{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    int count = 0;\r\n    int sum = 0;\r\n    for (int i = 0; i < nums.length;)\r\n    {\r\n        if (nums[i] == nums[i+1])\r\n        {\r\n        for (int a = i; a < nums.length; a++)\r\n        {\r\n            if (nums[a] == nums[a+1])\r\n            {\r\n                count = count + 1;\r\n            }\r\n        }\r\n            i = i + count +1;\r\n            sum = sum + 1;\r\n        }\r\n    }\r\n}\r\n"}
{"context": "", "question": "Consider the series of numbers beginning at start and running up to but not including end, so for example start=1 and end=5 gives the series 1, 2, 3, 4. Return a new String[] array containing the string form of these numbers, except in the case of multiples of 3, use \"Fizz\" instead of the number, and for multiples of 5 use \"Buzz\", and for multiples of both 3 and 5 use \"FizzBuzz\". In Java, String.valueOf(xxx) will make the String form of an int or other type.", "answer": "public String[] fizzBuzz(int start, int end)\r\n{\r\n    String[] a = new String[end - start];\r\n    \r\n    for(int i = start; i < end; i++) {\r\n        if(i % 15 == 0) {\r\n            a[i - start] = \"FizzBuzz\";\r\n        } else if(i % 3 == 0) {\r\n            a[i - start] = \"Fizz\";\r\n        } else if(i % 5 == 0) {\r\n            a[i - start] = \"Buzz\";\r\n        } else {\r\n            a[i - start] = String.valueOf(i);\r\n        }\r\n    }\r\n                                                      \r\n    return a;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\n    if (isBirthday == false)\r\n    {\r\n        if (speed < 60)\r\n        {\r\n            return 0;\r\n        }\r\n        else if (speed >= 61 && speed <= 80)\r\n        {\r\n            return 1;\r\n        }\r\n        else if (speed >= 81)\r\n        {\r\n            return 2;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        return 0;\r\n    }\r\n}\r\nreturn 0;\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n    boolean isTrue = true;\r\n    int lastX = 0;\r\n    int lastY = 1;\r\n    \r\n    for (int i = 0; i < str.length() - 1; i++)\r\n    {\r\n        if (str.charAt(i) == 'x')\r\n        {\r\n            lastX = i;\r\n        }\r\n    }\r\n    \r\n    for (int j = 0; j < str.length() - 1; j++)\r\n    {\r\n        if (str.charAt(j) == 'y')\r\n        {\r\n            lastY = j;\r\n        }\r\n    }\r\n    \r\n    if (lastY > lastX)\r\n    {\r\n        isTrue = true;\r\n    }\r\n    \r\n    return isTrue;         \r\n}\r\n"}
{"context": "", "question": "You and your date are trying to get a table at a restaurant. The parameter you is the stylishness of your clothes, in the range 0..10, and date is the stylishness of your date's clothes. Write a method that returns your chances of getting a table, encoded as an int value with 0 = no, 1 = maybe, 2 = yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).", "answer": "public int dateFashion(int you, int date)\r\n{\r\n    \r\n    \tif (you <=2 || date <= 2)\r\n            print(\"0\");\r\n        else if (you >= 8 || date >= 8)\r\n            print(\"2\");\r\n        else \r\n            print(\"1\");\r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.", "answer": "public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)\r\n{\r\n\tif(isMom){\r\n    \treturn true;\r\n    }\r\n    else if(isAsleep){\r\n    \treturn false;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given an int array of any length, return a new array of its first 2 elements. If the array is smaller than length 2, use whatever elements are present.", "answer": "public int[] frontPiece(int[] nums)\r\n{\r\n   if(numbs.length >= 2)\r\n   {\r\n       int[] array = {nums[0], nums[1]};\r\n       return array;\r\n   }\r\n    \r\n    return nums; \r\n\r\n        \r\n}\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n   int firstX = -1;\r\n    int firstY;\r\n    \r\n   if(str.equals(\"\"))\r\n   {return true;}\r\n    \r\n    if(str.contains(\"x\"))\r\n    {    \r\n    firstX = str.lastIndexOf(\"x\");\r\n    }\r\n      \r\n    if(str.contains(\"y\"))\r\n    {\r\n    firstY = str.lastIndexOf(\"y\");\r\n    }\r\n    else\r\n    {return false;}\r\n    \r\n    if(firstY > firstX)\r\n    {\r\n    return true;\r\n    }\r\n    else\r\n    {return false;}\r\n   }\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.", "answer": "public int sortaSum(int a, int b)\r\n{\r\n    int sum = a + b;\r\n\tif(sum >= 10 && sum <= 19)\r\n\t\treturn 20;\r\n\t\treturn sum;\r\n}\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    int count = 0;\r\n    for(int i = 0; i < nums.length - 1; i++)\r\n  \t{\r\n        if (nums[i] == nums[i + 1] && nums[i] != nums[i - 1])\r\n        {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}\r\n"}
{"context": "", "question": "Return an array that is \"left shifted\" by one--so for an input of {6, 2, 5, 3}, the method returns {2, 5, 3, 6}. You may modify and return the given array, or return a new array.", "answer": "public int[] shiftLeft(int[] nums)\r\n{\r\n    if(nums.length >= 2)\r\n\t{\r\n\t\tint frontDig = nums[0];\r\n\t\tfor(int i = 0; i < nums.length - 1; i++)\r\n        {\r\n\t\t\tnums[i] = nums[i+1];\r\n            nums[nums.length-1] = frontDig;\r\n        }\r\n    }\r\n    return nums;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.", "answer": "public int loneSum(int a, int b, int c)\r\n{\r\n    if (a != b && a != c && b != c)\r\n    {\r\n     \treturn a + b + c;   \r\n    }\r\n    else if (a != b && a == c)\r\n    {\r\n\t\treturn b;\r\n    }\r\n    else if (a != c && a == b)\r\n    {\r\n        return c;\r\n    }\r\n    else if (b != c && b == a)\r\n    {\r\n        return c;\r\n    }\r\n    else if  (a != b && b == c)\r\n    {\r\n     \treturn a;   \r\n    }\r\n    return 0;\r\n}\r\n"}
{"context": "", "question": "Return true if the given string contains a \"bob\" string, but where the middle 'o' character can be any character.", "answer": "public boolean bobThere(String str)\r\n{\r\n    for(int i = 0; i < str.length()-2; i++){\r\n        if(str.charAt(i) == 'b' && str.charAt(i+2)=='b'){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Return a version of the given array where each zero value in the array is replaced by the largest odd value to the right of the zero in the array. If there is no odd value to the right of the zero, leave the zero as a zero. Hint: in solving this: you may use a second helper function if you want, say to find the largest odd value to the right of a specified position.", "answer": "public int[] zeroMax(int[] nums)\r\n{\r\n    int max;\r\n\tfor(int i = 0; i < nums.length - 1; i++)\r\n\t{\r\n\t\tif(nums[i] == 0)\r\n\t\t{\r\n\t\t\tmax = 0;\r\n\t\t\tfor(int k = i + 1; k < nums.length; k++)\r\n\t\t\t{\r\n\t\t\t\tif(nums[k] > max && nums[k] % 2 == 1)\r\n\t\t\t\t\tmax = nums[k];\r\n\t\t\t}\r\n\t\t\tif(max != 0)\r\n\t\t\t\tnums[i] = max;\r\n\t\t}\r\n\t}\r\n\treturn nums;\r\n}\r\n"}
{"context": "", "question": "Return the centered average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array has a length of 3 or more.", "answer": "public int centeredAverage(int[] nums)\r\n{\r\n    int max = nums[0];\r\n\tint min = nums[0];\r\n\tint sum = nums[0];\r\n\tfor(int i = 1; i < nums.length; i++)\r\n\t{\r\n\t\tsum  += nums[i];\r\n\t\tif(nums[i] > max)\r\n\t\t\tmax = nums[i];\r\n\t\telse if(nums[i] < min)\r\n\t\t\tmin = nums[i];\r\n\t}\r\n\treturn (sum-max-min) / (nums.length - 2);\r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that takes an array and returns the sum of the numbers in the array, or 0 if the array is empty. Except the number 13 is very unlucky, so it does not count any 13, or any number that immediately follows a 13.", "answer": "public int sum13(int[] nums)\r\n{\r\n    int sum = 0;\r\n    if (nums[0] != 13)\r\n    {\r\n        sum = sum + nums[0];\r\n    }\r\n    \r\n        for (int x = 1; x <= nums.length-2; x++)\r\n        {\r\n            if (nums[x] != 13 && nums[x-1] != 13)\r\n            {\r\n                sum = sum + nums[x];\r\n            }\r\n            \r\n            else\r\n            {\r\n                sum = sum + 0;\r\n            }\r\n        }\r\n    return sum;\r\n}\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n    int len = str.length() - 1;\r\n\tchar ch;\r\n\tfor(int i = len; i >= 0; i--)\r\n\t{\r\n\t\tch = str.charAt(i);\r\n\t\tif(ch == 'x')\r\n\t\t\treturn false;\r\n\t\telse if(ch == 'y')\r\n\t\t\treturn true;\r\n\t}\r\n\treturn true;  \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string, return a string made of its first 2 chars. If the string length is less than 2, use '@' for the missing chars.", "answer": "public String atFirst(String str)\r\n{\r\n    if (str.length() >= 2) {\r\n        return str.substring(0, 2);\r\n    }\r\n    String addition = \"@\";\r\n    String moreadd = \"@@\";\r\n    if (str.length() = 0) {\r\n        return moreadd;\r\n    }\r\n    if (str.length() = 1) {\r\n        return addition;\r\n    }\r\n    return str;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    int i = str.indexOf(\"xyz\");\r\n    int j = str.indexOf(\".xyz\");\r\n    if ( i != j-1)\r\n    {\r\n        return str.substring(i,4).equals(\"xyz\");\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n    \r\n}\r\n"}
{"context": "", "question": "Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form \"7:00\" indicating when the alarm clock should ring. Weekdays, the alarm should be \"7:00\" and on the weekend it should be \"10:00\". Unless we are on vacation--then on weekdays it should be \"10:00\" and weekends it should be \"off\".", "answer": "public String alarmClock(int day, boolean vacation)\r\n{\r\n    String a = \"7:00\";\r\n    String b = \"10:00\";\r\n    String c = \"off\";\r\n    if (!vacation)\r\n    {\r\n        if (day >0 && day <6)\r\n        {\r\n            return a;\r\n        }\r\n        else\r\n        {\r\n            return b;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if (day >0 && day <6)\r\n        {\r\n            return b;\r\n        }\r\n        else\r\n        {\r\n            return c;\r\n        }\r\n    }\r\n    return abc;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string str and a non-empty word, return a version of the original string where all chars have been replaced by pluses (+), except for appearances of the word which are preserved unchanged.", "answer": "public String plusOut(String str, String word)\r\n{\r\n    int slen = str.length();\r\n    int wlen = word.length();\r\n    String fin = \"\"; \r\n    for (int i = 0; i < slen; i++) \r\n    {\r\n        if (i <= slen - wlen) \r\n        {\r\n            String tmp = str.substring(i,i+wlen);\r\n            if (tmp.equals(word)) \r\n            {\r\n                fin += word;\r\n                i += wlen-1;\r\n      \t\t}\r\n            else\r\n            {\r\n                fin += \"+\";\r\n            }\r\n        }\r\n        else\r\n        {\r\n      \t\tfin += \"+\";\r\n        }\r\n  \t}\r\n  \treturn fin;\r\n\t}\r\n}\r\n"}
{"context": "", "question": "Given an int array of any length, return a new array of its first 2 elements. If the array is smaller than length 2, use whatever elements are present.", "answer": "public int[] frontPiece(int[] nums)\r\n{\r\n\tif (nums.length() > 2)\r\n    {\r\n        int[] newNums = Arrays.copyOfRange(nums, 0, 1);\r\n        return newNums;\r\n    }\r\n    return nums;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.", "answer": "public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)\r\n{\r\n    boolean answer = true;\r\n    if (isAsleep == true)\r\n        answer = false;\r\n    else if (isMorning == true)\r\n    {\r\n        if (isMom == true)\r\n            answer = true;\r\n        if (isMom == false)\r\n            answer = false;\r\n    }\r\n    else\r\n        answer = true;\r\n    return answer;\r\n        \r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    String part = substring.str(2);\r\n    System.out.print(part);\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.", "answer": "public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)\r\n{\r\n    if (isAsleep)\r\n        return false;\r\n    else if (isMorning)\r\n    {\r\n        if (isMom)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n    else\r\n        return true;\r\n}\r\n"}
{"context": "", "question": "You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.", "answer": "public int greenTicket(int a, int b, int c)\r\n{\r\n    int d=0;\r\n    if (a!=b || b!=c || a!=c)\r\n        d=0;\r\n    if (a==b || b==c || c==a)\r\n        d=10;\r\n    if (a==b && b==c && a==c)\r\n        d=20;\r\n    return d;\r\n}\r\n"}
{"context": "", "question": "Given an int array, return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 7 (every 6 will be followed by at least one 7). Return 0 for no numbers.", "answer": "public int sum67(int[] nums)\r\n{\r\n    int count = 0;\r\n    \r\n        for (int i = 0; i < nums.length; i++)\r\n        {                    \r\n            if (nums[i] == 6)\r\n            {\r\n                for (int x = i; x < nums.length; x++)\r\n                {\r\n                    \r\n                    if (nums[x] != 7)\r\n                    {\r\n                    }\r\n                    if (nums[x] == 7)\r\n                    {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            { \r\n                count = count + nums[i];\r\n            }\r\n        }\r\n    return count;\r\n}\r\n"}
{"context": "", "question": "Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.", "answer": "public boolean canBalance(int[] nums)\r\n{\r\n    int left = 0;\r\n\tint right;\r\n\tfor(int i = 0; i < nums.length - 1; i++)\r\n\t\tleft += nums[i];\r\n\tright = nums[nums.length-1];\r\n\tfor(int i = nums.length - 2; i > 0; i--)\r\n\t{\r\n\t\tif(left == right)\r\n\t\t\treturn true;\r\n\t\tleft -= nums[i];\r\n\t\tright += nums[i];\r\n\t}\r\n\treturn (left == right);\r\n}\r\n"}
{"context": "", "question": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note: str.toLowerCase() returns the lowercase version of a string.", "answer": "public boolean endOther(String a, String b)\r\n{\r\n    String A;\r\n    A = a.toLowerCase();\r\n    String B;\r\n    B = b.toLowerCase();\r\n    \r\n    if (A.endsWith(B) || B.endsWith(A))\r\n    {\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given an array, return an array that contains exactly the same numbers as the original array, but rearranged so that every 4 is immediately followed by a 5. Do not move the 4's, but every other number may move. The array contains the same number of 4's and 5's, and every 4 has a number after it that is not a 4. In this version, 5's may appear anywhere in the original array. (This is a slightly harder version of the fix34 problem.)", "answer": "public int[] fix45(int[] nums)\r\n{\r\n    int i = 0;\r\n    int j = 0;\r\n    while(j < nums.length && nums[j] !=5) {\r\n        j +=1;\r\n    }\r\n    while(i<nums.length) {\r\n        if(nums[i]=4) {\r\n            int subs = nums[i+1];\r\n            nums[i+1] = nums[j];\r\n            nums[j] = subs;\r\n    \t\twhile((j<nums.length && nums[j] !=5) || j == i+1) {\r\n                j +=1;\r\n            }\r\n            i+=1;\r\n        }\r\n    }\r\n    return nums;\r\n}\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n    int len = str.length() - 1;\r\n\tchar ch;\r\n\tfor(int i = len; i >= 0; i--)\r\n\t{\r\n\t\tch = str.charAt(i);\r\n\t\tif(ch == 'x')\r\n\t\t\treturn false;\r\n\t\telse if(ch == 'y')\r\n\t\t\treturn true;\r\n\t}\r\n\treturn true;  \r\n}\r\n"}
{"context": "", "question": "Given a string str, find all places where a three-letter combination starting with \"z\" and ending with \"p\" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like \"zipXzap\" would produce a result of \"zpXzp\".", "answer": "public String zipZap(String str)\r\n{\r\n    for (int i = 0; i < str.length() - 2; i++) \r\n    {\r\n    if (str.charAt(i) == 'z' && str.charAt(i + 2) == 'p')\r\n    {\r\n        str.replace(str.substring(i + 1), \"\");\r\n        return str;\r\n    }\r\n    }\r\n    return str;\r\n}\r\n"}
{"context": "", "question": "Given a string str, find all places where a three-letter combination starting with \"z\" and ending with \"p\" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like \"zipXzap\" would produce a result of \"zpXzp\".", "answer": "public String zipZap(String str)\r\n{\r\n    String c = \"\";\r\n    for (int i = 0; i < str.length(); i++)\r\n    {\r\n        String a = str.substring(i, i+1);\r\n        String b = str.substring(i+2, i+3);\r\n        if (i < str.length()-2 && a.equals(\"z\") && b.equals(\"p\"))\r\n        {\r\n            c = c + \"zp\";\r\n            i = i + 2;\r\n        }\r\n        else\r\n        {\r\n            c = c + substring(i, i+1);\r\n        }\r\n    }\r\n    \r\n    return c;\r\n    \r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if every 2 that appears in the array is next to another 2. Otherwise, return false.", "answer": "public boolean twoTwo(int[] nums)\r\n{\r\n    boolean ans = false;\r\n    for(int i = 0; i < nums.length ; i++)\r\n    {\r\n        if(nums[i]==2)\r\n        {\r\n            if(nums[i+1]==2 || nunms[i-1] == 2)\r\n            {\r\n                ans = true;\r\n                i = i + 1;\r\n            }\r\n            else\r\n            {\r\n                ans = false;\r\n            }\r\n        }                  \r\n    }\r\n    \r\n    return ans;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\nif (!isBirthday)\r\n{\r\n   if ( speed <= 60)\r\n   {\r\n       return 0;\r\n   }\r\n   else if ( speed >= 61 && speed <= 80)\r\n   {\r\n       return 1;\r\n   }\r\n   else \r\n   {\r\n       return 2;\r\n   }\r\n}\r\n    if (isBirthday)\r\n        if ( speed <= 65)\r\n   {\r\n       return 0;\r\n   }\r\n   else if ( speed >= 66 && speed <= 85)\r\n   {\r\n       return 1;\r\n   }\r\n   else \r\n   {\r\n       return 2;\r\n   }\r\n        \r\n}\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    int i = 0;\r\n    while (str.substring(i, i+5) != \"bread\")\r\n    {\r\n        i+1;\r\n    }\r\n    if (str.substring(i, i+5).equals(str.substring(str.length()-(i+5)))\r\n               && str.substring(i, i+5).equals(\"bread\"))\r\n    {\r\n        return str.substring(i, str.length() -(i+5));\r\n    }\r\n    else \r\n        {\r\n            return \"\";\r\n        }\r\n}\r\n"}
{"context": "", "question": "Given a string str, find all places where a three-letter combination starting with \"z\" and ending with \"p\" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like \"zipXzap\" would produce a result of \"zpXzp\".", "answer": "public String zipZap(String str)\r\n{\r\n  int nana = str.length();\r\n   int jaja = nana - 2;\r\n   int zero = 0;\r\n    int hanji = str.length() + 2;\r\n   int i = 0;\r\n   char ha;\r\n   StringBuilder bana = new StringBuilder(nana);\r\n   while(i < nana)\r\n   {\r\n       ha = str.charAt(i);\r\n       if(ha == 'z' && i < jaja && str.charAt(i+2) == 'p')\r\n       {\r\n           bana.append(\"zp\");\r\n           i += 3;\r\n       }\r\n       else\r\n       {\r\n           bana.append(ha);\r\n           i++;\r\n       }\r\n   }\r\n   return bana.toString();\r\n    //return nun;\r\n}\r\n"}
{"context": "", "question": "For each multiple of 10 in the given array, change all the values following it to be that multiple of 10, until encountering another multiple of 10. So {2, 10, 3, 4, 20, 5} yields {2, 10, 10, 10, 20, 20}.", "answer": "public int[] tenRun(int[] nums)\r\n{\r\n    int save = 0;\r\n    for(int i=0; i<nums.length; i++)\r\n    {\r\n        int copy = nums[i];\r\n        if(copy%10==0)\r\n        {\r\n            i++;\r\n            save = copy;\r\n            while(i<nums.length && nums[i]%10!=0)\r\n            {\r\n                nums[i]=save;\r\n                i++;\r\n            }\r\n            i--;\r\n        }\r\n    }\r\n    return nums;\r\n}\r\n"}
{"context": "", "question": "We'll say that a value is \"everywhere\" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.", "answer": "public boolean isEverywhere(int[] nums, int val)\r\n{\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        if (nums.length == 1)\r\n            return true;\r\n        else if (nums[i] == val)\r\n        {\r\n        }\r\n        else if (i < nums.length - 1 && (nums[i + 1] == val))\r\n        {\r\n        }\r\n        else if (i > 0 && nums[i - 1] == val)\r\n        {\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n  return true;\r\n    \r\n}\r\n"}
{"context": "", "question": "Given an array of int values, return true if the group of n numbers at the start of the array is the same as the group of n numbers at the end of the array. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n == 0 and n == 2, and false for n == 1 and n == 3. You may assume that n is in the range 0..nums.length, inclusive.", "answer": "public boolean sameEnds(int[] nums, int n)\r\n{\r\n    for (int i = 0; i < n; i++) \r\n    {\r\n        if (nums[i] != nums[nums.length - len + i]) \r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"}
{"context": "", "question": "Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. \"decomposition\").", "answer": "public int noTeenSum(int a, int b, int c)\r\n{\r\n    a=fixTeen(a);\r\n    b=fixTeen(b);\r\n    c=fixTeen(c);\r\n    return a+b+c;\r\n\r\n}\r\n\r\npublic int fixTeen(int n)\r\n{\r\n    if (n>12 && n<20)\r\n    {\r\n    \tif ((n>12 && n<15) || (n>16 && n<20))\r\n        {\r\n            return 0;\r\n        }\r\n    }\r\n    else \r\n        return n;\r\n}\r\n"}
{"context": "", "question": "Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form \"7:00\" indicating when the alarm clock should ring. Weekdays, the alarm should be \"7:00\" and on the weekend it should be \"10:00\". Unless we are on vacation--then on weekdays it should be \"10:00\" and weekends it should be \"off\".", "answer": "public String alarmClock(int day, boolean vacation)\r\n{\r\n    \r\n    if(day == 1 && !vacation)\r\n    {\r\n     return \"7:00\";   \r\n    }\r\n    \r\n    if(day == 2 && !vacation)\r\n    {\r\n     return \"7:00\";   \r\n    }\r\n    \r\n    if(day == 3 && !vacation)\r\n    {\r\n     return \"7:00\";   \r\n    }\r\n    \r\n    if(day == 4 && !vacation)\r\n    {\r\n     return \"7:00\";   \r\n    }\r\n    \r\n    if(day == 5 && !vacation)\r\n    {\r\n     return \"7:00\";   \r\n    }\r\n    \r\n    if( day ==0 && !vacation )\r\n    {\r\n     return \"10:00\";   \r\n    }\r\n    \r\n    if( day ==6 && !vacation)\r\n    {\r\n     return \"10:00\";   \r\n    }\r\n    \r\n    \r\n    if(day == 1 && vacation)\r\n    {\r\n     return \"10:00\";   \r\n    }\r\n    \r\n    if(day == 2 && vacation)\r\n    {\r\n     return \"10:00\";   \r\n    }\r\n    \r\n    if(day == 3 && vacation)\r\n    {\r\n     return \"10:00\";   \r\n    }\r\n    \r\n    if(day == 4 && vacation)\r\n    {\r\n     return \"10:00\";   \r\n    }\r\n    \r\n    if(day ==5 && vacation)\r\n    {\r\n     return \"10:00\";   \r\n    }\r\n    \r\n    if(day ==0 && vacation)\r\n    {\r\n     return \"off\";   \r\n    }\r\n    \r\n    \r\n    if(day ==6 && vacation)\r\n    {\r\n     return \"off\";   \r\n    }\r\n    \r\n    \r\n    return \"off\";\r\n    \r\n    \r\n}\r\n"}
{"context": "", "question": "We'll say that a value is \"everywhere\" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.", "answer": "public boolean isEverywhere(int[] nums, int val)\r\n{\r\n    \r\n    int totalz = nums.length;\r\n    int counter = 0;\r\n    \r\n    for (int i = 0; i < nums.length; i++)\r\n    {        \r\n\t\tif (nums [i+1] != null && (nums[i] == val || nums[i+1] == val))\r\n        {\r\n            counter = counter + 1;\r\n        }\r\n    }\r\n    \r\n    return (counter == totalz);\r\n    \r\n}\r\n"}
{"context": "", "question": "For each multiple of 10 in the given array, change all the values following it to be that multiple of 10, until encountering another multiple of 10. So {2, 10, 3, 4, 20, 5} yields {2, 10, 10, 10, 20, 20}.", "answer": "public int[] tenRun(int[] nums)\r\n{\r\n    int set = null;\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        if (nums[i] % 10 == 0)\r\n        {\r\n            set = nums[i];\r\n        }\r\n        else\r\n        {\r\n         \tif (set != null)\r\n            {\r\n                nums[i] = set;\r\n            }\r\n        }\r\n    }\r\n    return nums;\r\n}\r\n"}
{"context": "", "question": "Given an array containing three ints, return the sum of all the elements.", "answer": "public int sum3(int[] nums)\r\n{\r\n    return( nums[0] + nums [1] + nums [2]);\r\n}\r\n"}
{"context": "", "question": "Return the centered average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array has a length of 3 or more.", "answer": "public int centeredAverage(int[] nums)\r\n{\r\n    int merlin = 0;\r\n    int less = nums[0];\r\n    int more = nums[0];\r\n    \r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        merlin = merlin + nums[i];\r\n        less = Math.min(less, nums[i]);\r\n        more = Math.max(more, nums[i]);\r\n    }\r\n    return (merlin - (less-more)/nums.length);\r\n    \r\n}\r\n"}
{"context": "", "question": "You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.", "answer": "public int greenTicket(int a, int b, int c)\r\n{\r\n    if (a = b = c)\r\n    {\r\n        return 20;\r\n    }\r\n    else if (a != b != c)\r\n    {\r\n        return 0;\r\n    }\r\n    else\r\n    {\r\n       return 10; \r\n    }\r\n}\r\n"}
{"context": "", "question": "Given an int array of any length, return a new array of its first 2 elements. If the array is smaller than length 2, use whatever elements are present.", "answer": "public int[] frontPiece(int[] nums)\r\n{\r\n    if (nums.length < 2)\r\n    {\r\n        return nums;\r\n    }\r\n    else\r\n    {\r\n        String str = nums.substring(0,2);\r\n        return str;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.", "answer": "public boolean evenlySpaced(int a, int b, int c)\r\n{\r\n\t// big or small\r\n\tif (a < b && b < c){\r\n\t\tif (a - b == b - c ){\r\n        return true;\r\n        }\r\n    }\r\n    else if (a < c && c < b){\r\n    \tif (a - c == c - b){\r\n                    return true;\r\n        }\r\n    }\r\n    else if (b < a && a < c ){\r\n    \tif (b - a == a - c){\r\n                    return true;\r\n        }\r\n    }\r\n    else if (b < c && c < a ){\r\n    \tif ( b - c == c - a){\r\n                    return true;\r\n        }\r\n    }\r\n    else if (c < a && a <b){\r\n    \tif (c - a == a - b){\r\n                    return true;\r\n        }\r\n    }\r\n    else if (c < b && b < a){\r\n    \tif (c - b == b - a){\r\n                    return true;\r\n        }\r\n        \r\n    }\r\n    return false;\r\n        \r\n    \r\n    // return\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.", "answer": "public String repeatEnd(String str, int n)\r\n{\r\n    str = str.substring(str.length()-n, str.length());\r\n    for(int i = 1; i < n; i++)\r\n    {\r\n        str = str + str;\r\n    }\r\n    return str;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You have a red lottery ticket showing ints a, b, and c, each of which is 0, 1, or 2. If they are all the value 2, the result is 10. Otherwise if they are all the same, the result is 5. Otherwise so long as both b and c are different from a, the result is 1. Otherwise the result is 0.", "answer": "public int redTicket(int a, int b, int c)\r\n{\r\n    if ((a == 2) && (a = b = c))\r\n        {\r\n            return 10;\r\n        }\r\n    else if (a = b = c)\r\n    {\r\n        return 5;\r\n    }\r\n    else if (a != b && a != c)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        return 0;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.", "answer": "public int blackjack(int a, int b)\r\n{\r\n    int a1 = 21 - a;\r\n    int b1 = 21 - b;\r\n    if (a1 < 0 && b1 < 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else\r\n    {\r\n        if (a1 < 0)\r\n        {\r\n            a1 = a1*-1;\r\n        }\r\n        if (b1 < 0)\r\n        {\r\n            b1 = b1*-1;\r\n        }\r\n        if (a1 > b1)\r\n        {\r\n            return b;\r\n        }\r\n        else\r\n        {\r\n            return a;\r\n        }\r\n    }\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    if (str.indexOf(\"bread\") > 0) // if there are two peices of bread\r\n    {\r\n      return str.charAt(str.indexOf(\"bread\"));\r\n    }\r\n    else\r\n    {\r\n        return \"\";\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless \"outsideMode\" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.", "answer": "public boolean in1To10(int n, boolean outsideMode)\r\n{\r\n    if((n >= 1 && n <= 10) && !outsideMode)\r\n    {\r\n        return true;\r\n    }\r\n    else if ((n <= 1 || n >= 10) && outsideMode)\r\n    {\r\n     return true;   \r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)    \r\n{\r\n\tint ticketNumber=0;\r\n    if (speed >= 0 && speed < 60 && !isBirthday)\r\n        {\r\n            ticketNumber = 0;\r\n        }\r\n    else if (speed > 60 && speed <= 81 && !isBirthday)\r\n        {\r\n            ticketNumber = 1;\r\n        }\r\n    else if (speed > 81 && !isBirthday)\r\n    \t{\r\n        \tticketNumber = 2;\r\n    \t}\r\n    else if (speed < 65 && isBirthday)\r\n        {\r\n            ticketNumber = 0;\r\n        }\r\n    else if (speed > 65 && speed <= 86 && isBirthday)\r\n        {\r\n            ticketNumber = 1;\r\n        }\r\n    else if (speed > 86 && isBirthday)\r\n    \t{\r\n        \tticketNumber = 2;\r\n   \t\t}\r\n    return ticketNumber;\r\n    \r\n    \r\n}\r\n    \r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.", "answer": "public boolean squirrelPlay(int temp, boolean isSummer)\r\n{\r\n    if(isSummer == true)\r\n    {\r\n         if((temp >= 60) && (temp <= 100))\r\n           {\r\n               return true;\r\n           }\r\n         else \r\n            return false;\r\n    }\r\n    else\r\n            if((temp >= 60) && (temp <= 100))\r\n            {\r\n               return true;\r\n            }\r\n            else \r\n               return false;\r\n        \t    \r\n            \r\n         \r\n          \r\n       \r\n           \r\n                 \r\n          \r\n          \r\n    \r\n}\r\n"}
{"context": "", "question": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note: str.toLowerCase() returns the lowercase version of a string.", "answer": "public boolean endOther(String a, String b)\r\n{\r\n    boolean answer = false;\r\n    a = a.toLowerCase();\r\n    b = b.toLowerCase();\r\n    int aLen = a.length();\r\n    int bLen = b.length();\r\n    if (aLen <= bLen) {\r\n        if (a == b.substring(bLen - aLen - 1)) {\r\n            answer = true;\r\n        }\r\n    }\r\n    else if (bLen <= aLen) {\r\n        if (b == a.substring(aLen - bLen - 1)) {\r\n            answer = true;\r\n        }\r\n    }\r\n    else {\r\n        answer = false;\r\n    }\r\n    return answer;\r\n}\r\n"}
{"context": "", "question": "Return the centered average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array has a length of 3 or more.", "answer": "public int centeredAverage(int[] nums)\r\n{\r\n    int sum = 0;\r\n    int min = nums[0];\r\n    int max = nums[0];\r\n         \r\n    for(int i = 0; i < nums.length; i++) {\r\n        sum += nums[i];\r\n        min = Math.min(min, nums[i]);\r\n        max = Math.max(max, nums[i]);\r\n    }\r\n                           \r\n    return (sum - min - max) / (nums.length - 2);\r\n}\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    int clumps = 0;\r\n    \r\n    for (int i = 0; i < nums.length - 1; i++)\r\n    {\r\n        if (nums[i] == nums[i + 1])\r\n        {\r\n            clumps += 1;\r\n            for (; i < nums.length - 1; i++)\r\n            {\r\n                if (nums[i] != nums[i + 1])\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    return clumps;\r\n}\r\n"}
{"context": "", "question": "Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.", "answer": "public boolean canBalance(int[] nums)\r\n{\r\n    int size = nums.length;\r\n    int sum1 = 0;\r\n    int sum2 = 0;\r\n    int k = size - 1;\r\n    int i = 0;\r\n    int j = 0;\r\n    while (j <  size)\r\n    {\r\n        if (k < (size - 1)/2)\r\n            return false;\r\n    for (; k > size - i; k--)\r\n    {\t\r\n        sum2 = nums[k];    \r\n    }\r\n    for (; i <= size - k - 1; i++)\r\n    {\r\n            sum1 += nums[i];\r\n    }\r\n        if (sum1 == sum2)\r\n\t\treturn true;\r\n    i++;\r\n    k--;\r\n    sum1 = 0;\r\n    sum2 = 0;\r\n    }\r\n    \r\n    return false;\r\n\r\n    \r\n}\r\n"}
{"context": "", "question": "Return the centered average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array has a length of 3 or more.", "answer": "\r\npublic int centeredAverage(int[] nums)\r\n{\r\n    nums.sort(nums);\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    String firstBread = str.substring(0, 4);\r\n    String lastBread = str.substring(str.length() - 5, str.length() - 1);\r\n    \r\n    if(firstBread.equals(\"bread\") && lastBread.equals(\"bread\")) {\r\n        return str.substring(5, str.length() - 6);\r\n    }\r\n    \r\n    return \"\";\r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    if (str.length() >= 2)\r\n    {\r\n        String begin = str.substring(0, 2);\r\n        String end = str.substring(str.length() - 2, str.length());\r\n        \r\n        if (String.equals(begin, end))\r\n        {\r\n            return str.substring(2);\r\n        }\r\n        else\r\n        {\r\n            return str;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        return str;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    for (int i; i < str.length(); i++)\r\n    {\r\n    \tif (str.startsWith(\"xyz\", i) && !str.startsWith(\".\", i - 1))\r\n        {\r\n        \treturn(true);\r\n        }else{\r\n        \treturn(false);\r\n        }\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    int length = str.length() - 2;\r\n    for(int i = 0; i < length; i++);\r\n    {\r\n     \tif(str.charAt(i) == 'x' && str.charAt(i+1) == 'y' && str.charAt(i+2) == 'z')\r\n        {\r\n         \tif (i == 0 || str.charAt(i-1) != \".\")\r\n                return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    String newst = \"\";\r\n    int y = str.length() -1;\r\n    for(int x = 0; x < str.length(); x++)\r\n    {\r\n        if (str.substring(x, y-x).beginsWith(\"bread\")\r\n            && str.substring(x, y-x).endsWith(\"bread\"))\r\n        {\r\n            return newst+str.substring(x+5, y-5);\r\n            break;\r\n        }\r\n    }\r\n    return newst;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless \"outsideMode\" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.", "answer": "public boolean in1To10(int n, boolean outsideMode)\r\n{\r\n    int a = false;\r\n    if ( n<=10 && n>=0)\r\n        a=true;\r\n    if ( n<=10 && n>=0 && outsideMode==true)\r\n        a=false;\r\n    return a;\r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    String blank = \"\";\r\n    int len = str.length();\r\n    if (len <= 1)\r\n        return str;\r\n    else if (len == 2)\r\n        return blank;\r\n    else if (len == 3)\r\n        return str.substring(len - 1);\r\n    String firstPart = str.substring(1);\r\n    String lastPart = str.substring(len - 2, len - 1);\r\n\r\n  \t\r\n    if (firstPart == lastPart)\r\n    {\r\n        return str.substring(2, len - 1);\r\n    }\r\n    else\r\n        return str;\r\n    \r\n   \r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\nString toe = \"\";\r\n  if (str.length() < 2 ) {\r\n    return str;\r\n  }\r\n  String front = str.substring(0,2); // first two substring \r\n  \r\n  for (int i = 0; i < str.length(); i++) {\r\n    if (front.equals(str.substring(str.length()-2 ))) {\r\n      toe = toe + str.substring(2);\r\n      return toe;\r\n    }\r\n    else {\r\n      return str;\r\n    }\r\n  }\r\n  return \"\";\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Return a version of the given array where each zero value in the array is replaced by the largest odd value to the right of the zero in the array. If there is no odd value to the right of the zero, leave the zero as a zero. Hint: in solving this: you may use a second helper function if you want, say to find the largest odd value to the right of a specified position.", "answer": "public int[] zeroMax(int[] nums)\r\n{\r\n    int largestOdd = 0;\r\n    int size = nums.length;\r\n    int[] newNums = new int[size];\r\n    for (int i = 0; i < size; i++)\r\n    {\r\n        if (nums[i] != 0)\r\n            newNums[i]=nums[i];\r\n        else\r\n        {\r\n            int replacementIndex = i;\r\n            int k;\r\n            for (int j = i+1; j < size; j++)\r\n            {\r\n                k=j;\r\n                if(nums[j] % 2 != 0 && nums[j] > largestOdd)\r\n                    largestOdd = nums[k];\r\n            \t\treplacementIndex = k;\r\n            newNums[i]=nums[replacementIndex];\r\n            }\r\n        }\r\n    }\r\n    return newNums;\r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if every 2 that appears in the array is next to another 2. Otherwise, return false.", "answer": "public boolean twoTwo(int[] nums)\r\n{\r\n     if (nums.length == 1 && nums[0] == 2)\r\n     {\r\n        return false;\r\n     }\r\n          \r\n    if (nums.length >= 2 && ((nums[0] == 2 && nums[1] != 2) ||\r\n        (nums[nums.length - 1] == 2 && nums[nums.length - 2] \t\t!= 2)))\r\n    {\r\n        return false;\r\n    }\r\n                            \r\n    for (int i = 1; i <= nums.length - 2; i++) \r\n    {\r\n        if (nums[i] == 2 && nums[i - 1] != 2 && nums[i + 1] != \t\t\t\t2)\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n                                            \r\n    return true;\r\n    \r\n    /*if (nums.length < 2 && nums[0] != 2 )\r\n    {\r\n     \treturn true;   \r\n    }\r\n    else if (nums.length >= 2)\r\n    {\r\n     \t for (int i = 0; i < nums.length; i++)\r\n    {\r\n        \r\n     \tif (nums[i] == 2 && nums[i + 1] != 2)\r\n        {\r\n            return false;\r\n        }\r\n        else if (nums[i] == 2 && nums[i + 1] == 2)\r\n        {\r\n         \t   return true;\r\n        }       \r\n        \r\n        else if (nums[nums.length - 1] == 2)\r\n        {\r\n         \treturn false;   \r\n        }\r\n        \r\n    }\r\n          \r\n    }\r\n    return true;\r\n    \r\n    \r\n    /*if (nums.length < 2 && nums[0] != 2 )\r\n    {\r\n     \treturn true;   \r\n    }\r\n    else if (nums.length >= 2)\r\n    {\r\n     \t for (int i = 0; i < nums.length - 1; i++)\r\n    {\r\n        \r\n     \tif (nums[i] == 2 && nums[i + 1] != 2)\r\n        {\r\n            return false;\r\n        }\r\n        else if (nums[i] == 2 && nums[i + 1] == 2)\r\n        {\r\n         \t   return true;\r\n        }       \r\n        \r\n        else if (nums[nums.length - 1] == 2)\r\n        {\r\n         \treturn false;   \r\n        }\r\n    }\r\n    \r\n        \r\n        \r\n    }\r\n    return false;*/\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    \r\n    int length = str.length() - 2;\r\n    for(int i = 0 ; i < length; i++)\r\n    {\r\n     \tif(str.charAt(i) == 'x' && str.charAt(i+1) == 'y' && str.charAt(i+2) == 'z')\r\n        {\r\n         \tif (i == 0 || str.charAt(i-1) != '.')\r\n                return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string str and a non-empty word, return a version of the original string where all chars have been replaced by pluses (+), except for appearances of the word which are preserved unchanged.", "answer": "public String plusOut(String str, String word)\r\n{\r\n    int length = str.length();\r\n    int wordlength = word.length();\r\n    String strsub = \"\";\r\n    String newstr = \"\";\r\n    for(int i = 0; i < length; i++)\r\n    {\r\n        strsub = str.substring(i, length);\r\n        if(strsub.startsWith(word))\r\n        {\r\n            for(int j = 0; j < wordlength; j++)\r\n            {\r\n                newstr = newstr + word;\r\n                i = i + wordlength - 1;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            newstr = newstr + \"+\";\r\n        }\r\n    }\r\n    return newstr;\r\n}\r\n"}
{"context": "", "question": "Return true if the given string contains a \"bob\" string, but where the middle 'o' character can be any character.", "answer": "public boolean bobThere(String str)\r\n{\r\n    return(str.indexOf(\"b\")==str.indexOf(\"b\", str.indexOf(\"b\"))-2);\r\n}\r\n"}
{"context": "", "question": "Given an int[] array, write a function that returns an array where all the 10's have been removed. The remaining elements should shift left towards the start of the array as needed, and the empty spaces at the end of the array should be set to 0. So {1, 10, 10, 2} yields {1, 2, 0, 0}. You may modify and return the given array or make a new array.", "answer": "public int[] withoutTen(int[] nums)\r\n{\r\n    int[] newa;\r\n    newa = new int[nums.length];\r\n    int tha = 0;\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        if (nums[i] != 10)\r\n        {\r\n            newa[tha++] = nums[i];\r\n        }\r\n    }\r\n    return newa;\r\n}\r\n"}
{"context": "", "question": "We'll say that a value is \"everywhere\" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.", "answer": "public boolean isEverywhere(int[] nums, int val)\r\n{\r\n    boolean tvalue = false;\r\n    for(int i = 0; i < nums.length; i++)\r\n    {\r\n        if(nums[i] == val || nums[i+1] == val)\r\n        {\r\n            tvalue = true;\r\n        }\r\n    }\r\n    return tvalue;\r\n}\r\n"}
{"context": "", "question": "Given a string str, find all places where a three-letter combination starting with \"z\" and ending with \"p\" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like \"zipXzap\" would produce a result of \"zpXzp\".", "answer": "public String zipZap(String str)\r\n{\r\n    char z;\r\n    char p;\r\n    int length = str.length();\r\n    String string = str;\r\n    for (int i = 0; i<length-2; i++)\r\n    {\r\n        z = str.charAt(i);\r\n        p = str.charAt(i+2);\r\n    \tif (z == 'z' && p == 'p')\r\n        {\r\n            string = (string.substring(0, i+1) + string.substring(i+2, length));\r\n            length = length-1;\r\n        }\r\n     }\r\n     return string;\r\n }\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string str and a non-empty word, return a version of the original string where all chars have been replaced by pluses (+), except for appearances of the word which are preserved unchanged.", "answer": "public String plusOut(String str, String word)\r\n{\r\n    String plus = new String();\r\n    for (int i = 0; i < str.length(); i++)\r\n    {\r\n        if (i <= str.length() - word.length())\r\n        {\r\n            if (str.substring(i, i + word.length()).equals(word))\r\n            {\r\n                plus += word;\r\n                i += word.length() - 1;\r\n            }\r\n            else\r\n            {\r\n                plus += '+';\r\n            }\r\n        }\r\n    }\r\n    return str;\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    int firstBread = str.indexOf(\"bread\");\r\n    int lastBread = str.lastIndexOf(\"bread\");\r\n    if (str.startsWith(\"bread\") && str.endsWith(\"bread\"))\r\n    {\r\n        return str.substring(5, str.length() - 5);\r\n    }\r\n    else if (str.indexOf(\"bread\") != \t\tstr.lastIndexOf(\"bread\"))\r\n    {\r\n        return str.substring(firstBread, lastBread - 5);\r\n    }\r\n    else\r\n    {\r\n        return \"\";\r\n    }\r\n}\r\n"}
{"context": "", "question": "The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.", "answer": "public boolean love6(int a, int b)\r\n{\r\n    if ( a + b == 6 && a - b == 6)\r\n    {\r\n    \treturn true;\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.", "answer": "public int loneSum(int a, int b, int c)\r\n{\r\n    if(a == b && a!= c)\r\n        return c;\r\n    if(a==c && a!=b)\r\n        return b;\r\n    if(b==c &&  b!= a)\r\n    \treturn a;\r\n    if(a==b && b==c)\r\n        return 0;\r\n   \treturn a+b+c;\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    int x = str.length();\r\n    int beginning = 0;\r\n    int end = 0;\r\n    String afterBread = \"\"; \r\n    if (x > 10)\r\n    {\r\n       for (int i = 0; i < x/2; i ++)\r\n        {\r\n           char firstBeg = str.charAt(i);\r\n           char firstEnd = str.charAt(i+5);\r\n           if (firstBeg == 'b' && firstEnd == 'd')\r\n            {\r\n                beginning = i+5;\r\n            }\r\n        }\r\n        for (int j = x/2; j < x; j++)\r\n        {\r\n            char secondBeg = str.charAt(j);\r\n            char secondEnd = str.charAt(j+5);\r\n            if(secondBeg == 'b' && secondEnd == 'd')\r\n            {\r\n                end = j;\r\n            }\r\n        }\r\n        afterBread = str.substring(beginng, end);\r\n    }\r\n    return afterBread;\r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    int len = str.length();\r\n\tif(len >= 2)\r\n\t{\r\n\t\tif(str.substring(0,2).equals(str.substring(len-2, len)))\r\n\t\t\treturn str.substring(2);\r\n\t\telse\r\n\t\t\treturn str;\r\n\t}\r\n\telse\r\n\t\treturn str;\r\n}\r\n"}
{"context": "", "question": "Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.", "answer": "public boolean canBalance(int[] nums)\r\n{\r\n    int leftSum = 0;\r\n    int rightSum = 0;\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        leftSum = leftSum + nums[i];\r\n        for (int j = nums.length - 1; j > i; j--)\r\n        {\r\n            rightSum = rightSum + nums[i]; \r\n        }\r\n        if (leftSum == rightSum)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    return false; \r\n}\r\n\r\n"}
{"context": "", "question": "You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.", "answer": "public int greenTicket(int a, int b, int c)\r\n{\r\n    if (a = b && b = c && a = c)\r\n    {\r\n        return 20;\r\n    }\r\n    else if (a = b || b = c || a = c)\r\n    {\r\n        return 10;\r\n    }\r\n    else\r\n    {\r\n        return 0;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Return a version of the given array where each zero value in the array is replaced by the largest odd value to the right of the zero in the array. If there is no odd value to the right of the zero, leave the zero as a zero. Hint: in solving this: you may use a second helper function if you want, say to find the largest odd value to the right of a specified position.", "answer": "public int[] zeroMax(int[] nums)\r\n{\r\n    for(int i = 0; i < nums.length; i++) {\r\n        if(nums[i]==0){\r\n            nums[i]=findOdd(nums,i);\r\n        }\r\n    }\r\n}\r\npublic int findOdd(int[] nums, int index) {\r\n    boolean go = true;\r\n    int odd = 0;\r\n    while(go){\r\n        if(nums[index]%2==1&&nums[index]>odd)odd=nums[index];\r\n        index++;\r\n        if(index>=nums.length||nums[index]==0)go=!go;\r\n    }\r\n    return odd;\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.", "answer": "public String repeatEnd(String str, int n)\r\n{\r\n    \r\n    for(int i = 0; i < str.length() - 2; i++) {\r\n        if(str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')\r\n            return true;\r\n    }\r\n                \r\n    return false;\r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\n    if (isBirthday == true)\r\n    {\r\n        speed = speed - 5;\r\n    }\r\n   else if ( speed <= 60)\r\n    {\r\n        return 0;\r\n    }\r\n    else if ( speed <= 80)\r\n    {\r\n        return 1;\r\n    }\r\n    else if (speed >= 81)\r\n    {\r\n        return 2;\r\n    }\r\n    return 0;\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    if (str.contains(\"bread\"))\r\n    {\r\n        return \"bread\" + str + \"bread\";\r\n    }\r\n    else \r\n    {\r\n        return \"\";\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.", "answer": "public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)\r\n{\r\n    if (isAsleep == true)\r\n        return false;\r\n    else if (isMorning == false)\r\n        return true;\r\n    else if (isMorning == true && isMom == true)\r\n        return true;\r\n    else if (isMorning == true && isMom == false)\r\n        return false;    \r\n    else \r\n        return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless \"outsideMode\" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.", "answer": "public boolean in1To10(int n, boolean outsideMode)\r\n{\r\n    if (outsideMode)\r\n    {\r\n        if (n <=1 || n >=10)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    else if (n>=1 || n<=10)\r\n    {\r\n        return true;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note: str.toLowerCase() returns the lowercase version of a string.", "answer": "public boolean endOther(String a, String b)\r\n{\r\n    String lowerA = a.toLowerCase();\r\n    String lowerB = b.toLowerCase();\r\n\tboolean endA = lowerA.endsWith(lowerB);\r\n    boolean endB = lowerB.endsWith(lowerA);\r\n    if (endA == true || endB == true)\r\n    {\r\n        return true;\r\n    }\r\n    else \r\n    {\r\n\t\treturn false;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that takes an array and returns the sum of the numbers in the array, or 0 if the array is empty. Except the number 13 is very unlucky, so it does not count any 13, or any number that immediately follows a 13.", "answer": "public int sum13(int[] nums)\r\n{\r\n    int total;\r\n    if (nums.length == 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else\r\n    {\r\n        for (int i = 0; i < nums.length - 1; i++)\r\n        {\r\n            if (nums[i] == 13)\r\n            { \r\n                total = total + 0;\r\n            }\r\n            else if (nums[i - 1] == 13)\r\n            { \r\n                total = total + 0;\r\n            }   \r\n            total = total + nums[i];\r\n        }\r\n        return total;\r\n    }\r\n}\r\n                \r\n  "}
{"context": "", "question": "We'll say that a value is \"everywhere\" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.", "answer": "public boolean isEverywhere(int[] nums, int val)\r\n{\r\n   \tfor(int i=0;i<nums.length-1;i++) {\r\n        for(int j=i+1;j<nums.length;j++) {\r\n        \tif(nums[i] == val && nums[j] == val)\r\n            \treturn true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You have a red lottery ticket showing ints a, b, and c, each of which is 0, 1, or 2. If they are all the value 2, the result is 10. Otherwise if they are all the same, the result is 5. Otherwise so long as both b and c are different from a, the result is 1. Otherwise the result is 0.", "answer": "public int redTicket(int a, int b, int c)\r\n{\r\n   // just a different way to test if they are all the same\r\n    if((a/2 + b/2 + c/2) == 3)\r\n    {\r\n    return 10;\r\n    }\r\n\t\r\n    if(a == b && b == c)\r\n    {return 5;}\r\n    \r\n    if(b != a && c != a)\r\n    {return 1;}\r\n    \r\n    return 0;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.", "answer": "public int loneSum(int a, int b, int c)\r\n{\r\n    if( a == b && a == c)\r\n        return 0;\r\n    else if (a == b)\r\n        return c;\r\n    else if (a == c)\r\n        return b;\r\n    else if (b == c)\r\n        return a;\r\n    else\r\n        return a + b + c;\r\n    \r\n    \r\n    \r\n    \r\n}\r\n"}
{"context": "", "question": "Return the centered average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array has a length of 3 or more.", "answer": "public int centeredAverage(int[] nums)\r\n{\r\n    return (sum(nums) - max(nums) - min(nums)) / (len(nums) - 2);\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\n    if (isBirthday == false)\r\n    {\r\n    \tif (speed <= 65)\r\n    \t{\r\n        \treturn 0;\r\n    \t}\r\n    \telse if (speed > 65 && speed <= 85)\r\n    \t{\r\n        \treturn 1;\r\n    \t}\r\n    \telse if (speed > 85)\r\n    \t{\r\n        \treturn 2;\r\n    \t}\r\n    }\r\n    else\r\n    {\r\n        if (speed <= 60)\r\n    \t{\r\n        \treturn 0;\r\n    \t}\r\n    \telse if (speed > 60 && speed <= 80)\r\n    \t{\r\n        \treturn 1;\r\n    \t}\r\n    \telse if (speed > 80)\r\n    \t{\r\n        \treturn 2;\r\n    \t}\r\n    }\r\n\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\n\tint ticket;\r\n    \r\n    if (isBirthday == false)\r\n    { \r\n        if(speed<=60)\r\n    \t{\r\n        \tticket = 0;\r\n    \t}\r\n    \tif (speed>=61 || speed<=80)\r\n    \t{\r\n    \t    ticket = 1;\r\n    \t}\r\n    \tif (speed>=81)\r\n    \t{\r\n    \t    ticket = 2;\r\n    \t}\r\n    }\r\n    else\r\n    {\r\n        if(speed<=65)\r\n    \t{\r\n        \tticket = 0;\r\n    \t}\r\n    \tif (speed>=66 || speed<=85)\r\n    \t{\r\n    \t    ticket = 1;\r\n    \t}\r\n    \tif (speed>=86)\r\n    \t{\r\n    \t    ticket = 2;\r\n    \t}\r\n    }\r\n    \r\n    return ticket;\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    String insides = \"\";\r\n    CharSequence b = \"bread\";\r\n    if (str.contains(b))\r\n        { \r\n            int topPiece = str.indexOf(\"bread\") + 4;\r\n         \t insides = str.subtring(topPiece);\r\n            if (insides.contains(b))\r\n                {\r\n                    int bottomPiece = insides.lastIndexOf(\"bread\");\r\n                   insides = insides.substring(bottomPiece);\r\n                }\r\n            else\r\n                {\r\n                    insides = \"\";\r\n                }\r\n        }\r\n    return insides;                \r\n}\r\n"}
