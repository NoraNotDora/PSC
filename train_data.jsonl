{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    if (goal > (small + (big * 5)))\r\n    {\r\n        return -1;\r\n    }\r\n    int bigsAvailable = goal / 5;\r\n    int bigsToUse = bigsAvailable * 5;\r\n    if (bigsToUse > big)\r\n    {\r\n        bigsToUse = big;\r\n    }\r\n    \r\n    int smalls = 0;\r\n    if (bigsToUse == 0)\r\n    {\r\n        if (small < goal)\r\n        {\r\n            return -1;\r\n        }\r\n        return goal;\r\n    }\r\n    smalls = goal % bigsToUse;\r\n\r\n    return smalls;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given two strings, a and b, create a bigger string made of the first character of a, the first character of b, the second character of a, the second character of b, and so on. Any leftover characters go at the end of the result.", "answer": "public String mixString(String a, String b)\r\n{\r\n    String m = \"\";\r\n    for (int i; i < a.length(); i++)\r\n        {\r\n            m = a + a.charAt(i);\r\n        for (i; i < b.length(); i++)\r\n        { \r\n            m = b + b.charAt(i);\r\n        }\r\n    }\r\n    if (a.length() < b.length())\r\n    {\r\n        m = m + b.substring(i);\r\n        \r\n    }\r\n    else\r\n    {\r\n        m = m + a.substring(i);\r\n    }\r\n    return m;\r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    String y = str;\r\n    int x = str.length();\r\n    int z = x - 2;\r\n    if (x >= 2)\r\n    {\r\n        if (str.substring(0, 2) == str.substring(z))\r\n        {\r\n            y = str.substring(2);\r\n        }\r\n    }\r\n    return y;\r\n}\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    int numClumps = 0;\r\n    boolean sameClump = true;\r\n    int lastVal = 0;\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        if (nums[i] == lastVal && !sameClump)\r\n        {\r\n            numClumps++;\r\n            sameClump = true;\r\n        }\r\n        else if (nums[i] != lastVal)\r\n        {\r\n            sameClump = false;\r\n        }\r\n        lastVal = nums[i];\r\n    }   \r\n    return numClumps;\r\n}\r\n"}
{"context": "", "question": "Given an int[] array, write a function that returns an array where all the 10's have been removed. The remaining elements should shift left towards the start of the array as needed, and the empty spaces at the end of the array should be set to 0. So {1, 10, 10, 2} yields {1, 2, 0, 0}. You may modify and return the given array or make a new array.", "answer": "public int[] withoutTen(int[] nums)\r\n{\r\n    int[] tab = new int[nums.length];\r\nint counter = 0;\r\nfor (int i = 0; i < nums.length; i++)\r\n{\r\nif (nums[i] != 10)\r\ntab[counter++] = nums[i];\r\n}\r\nreturn tab;\r\n}\r\n\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    if (small + (5*big) < goal)\r\n    {\r\n        return -1;\r\n    }\r\n\telse\r\n    {\r\n        int numBig;\r\n        int answer;\r\n        \r\n        numBig = goal / 5;\r\n        \r\n        if (numBig > big)\r\n        {\r\n\t\t\tnumBig = big;\r\n        }\r\n        \r\n        goal -= numBig*5;\r\n        \r\n        if (goal > small)\r\n        {\r\n            return -1;\r\n        }\r\n        else\r\n        {\r\n            return goal;\r\n        }\r\n    }\r\n    \r\n}\r\n"}
{"context": "", "question": "For each multiple of 10 in the given array, change all the values following it to be that multiple of 10, until encountering another multiple of 10. So {2, 10, 3, 4, 20, 5} yields {2, 10, 10, 10, 20, 20}.", "answer": "public int[] tenRun(int[] nums)\r\n{\r\n    int current;\r\n    int i = 0;\r\n      \r\n    while(i < nums.length && nums[i] % 10 != 0)\r\n        i++;\r\n                \r\n    if(i >= nums.length)\r\n        return nums;\r\n                          \r\n    current = nums[i]; \r\n    i++;\r\n                                \r\n    while(i < nums.length) {\r\n        if(nums[i] % 10 == 0)\r\n            current = nums[i];\r\n        else\r\n            nums[i] = current;\r\n        i++;\r\n    }\r\n                                                              \r\n    return nums; \r\n}\r\n"}
{"context": "", "question": "Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form \"7:00\" indicating when the alarm clock should ring. Weekdays, the alarm should be \"7:00\" and on the weekend it should be \"10:00\". Unless we are on vacation--then on weekdays it should be \"10:00\" and weekends it should be \"off\".", "answer": "public String alarmClock(int day, boolean vacation)\r\n{\r\n    if (vacation)\r\n    {\r\n        if  (day > 0 && day < 6)\r\n        {\r\n            return \"10:00\";\r\n        }\r\n        else \r\n        {\r\n            return \"off\";\r\n        }\r\n    }\r\n        \r\n  \r\n    \r\n}\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n\tint x = str.lastIndexOf('x');\r\n    int y = str.lastIndexOf('y');\r\n    if (x!=-1 && y!=-1) {\r\n        return ( y>x);\r\n    }\r\n    else if (x==-1 && y== -1) {\r\n        return true;\r\n    }\r\n    else if (x==-1 && y!= -1) {\r\n        return true;\r\n    }\r\n       \r\n}\r\n"}
{"context": "", "question": "Consider the series of numbers beginning at start and running up to but not including end, so for example start=1 and end=5 gives the series 1, 2, 3, 4. Return a new String[] array containing the string form of these numbers, except in the case of multiples of 3, use \"Fizz\" instead of the number, and for multiples of 5 use \"Buzz\", and for multiples of both 3 and 5 use \"FizzBuzz\". In Java, String.valueOf(xxx) will make the String form of an int or other type.", "answer": "public String[] fizzBuzz(int start, int end)\r\n{\r\n    String[] ar = new String[end - start];\r\n    for ( int i = 0; i < ar.length; i++)\r\n    {\r\n        ar[i] = start + String.valueOf(i);\r\n        if ( ar[i] % 3 == 0)\r\n        {\r\n            ar[i] = \"Fizz\";\r\n        }\r\n        else if (ar[i] % 5 == 0)\r\n        {\r\n            ar[i] = \"Buzz\";\r\n        }\r\n        else if (ar[i] % 5 == 0 && ar[i] % 3 == 0)\r\n        {\r\n            ar[i] = \"FizzBuzz\";\r\n        }\r\n    }\r\n    return ar;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string, return a string made of its first 2 chars. If the string length is less than 2, use '@' for the missing chars.", "answer": "public String atFirst(String str)\r\n{\r\n    if (str.length() == 0)\r\n    {\r\n        return \"@@\";\r\n    }\r\n    if (str.length(str) == 1)\r\n    {\r\n        return str + \"@\";\r\n    }\r\n    else\r\n    {\r\n        return str.substring(0,2);\r\n    }\r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.", "answer": "public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)\r\n{\r\n    if (isMorning)\r\n    {\r\n        if (isMom)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    if (isAsleep)\r\n    {\r\n        return false;\r\n    }\r\n    else\r\n    {\r\n        return true;\r\n    }\r\n}\r\n"}
{"context": "", "question": "For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a, b, and c, return the sum of their rounded values. To avoid code repetition, write a separate helper public int round10(int num) and call it 3 times. Write the helper entirely below and at the same indent level as roundSum().", "answer": "public int roundSum(int a, int b, int c)\r\n{\r\n    round10(a);\r\n    round10(b);\r\n    round10(c);\r\n    return(a + b + c);\r\n}\r\n\r\npublic int round10(int num)\r\n{\r\n    int remainder = num % 10;\r\n    if (remainder < 5)\r\n    {\r\n        num = num - remainder;\r\n    }\r\n    else if (remainder >= 5)\r\n    {\r\n        num = 10 - remainder + num;\r\n    }\r\n    return num;\r\n}\r\n"}
{"context": "", "question": "Given a number n, create and return a new int array of length n, containing the numbers 0, 1, 2, ... n-1. The given n may be 0, in which case just return a length 0 array. You do not need a separate if statement for the length-0 case; the for loop should naturally execute 0 times in that case, so it just works. The syntax to make a new int array is new int[desired_length].", "answer": "public int[] fizzArray(int n)\r\n{\r\n    int[] num;\r\n    num = new int[n];\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n    \tnum[i] = i;\r\n    }\r\n       return num; \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.", "answer": "public String repeatEnd(String str, int n)\r\n{\r\n    int strLength = str.length();\r\n    String nPart = str.substring(strLength - n, strLength);\r\n    String nTimes = nPart;\r\n\tfor (int i = 0; i < n; i++)\r\n    {\r\n        nTimes = nTimes + nPart;\r\n    }\r\n    return nTimes;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.", "answer": "public int blackjack(int a, int b)\r\n{\t\r\n    int score = 0;\r\n    if (a > 0 && b > 0)\r\n    {    \r\n        if (a > 21 && b > 21)\r\n        {\r\n          \tscore = 0;\r\n        } else if (a > 21)\r\n        {\r\n            score = b;\r\n        } else if (b > 21)\r\n        {\r\n            score = a;\r\n        } else if (a > b)\r\n        {\r\n            score = a;\r\n        } else if (b > a)\r\n        {\r\n            score = b;\r\n        }\r\n    }\r\n    return score;\r\n}"}
{"context": "", "question": "Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form \"7:00\" indicating when the alarm clock should ring. Weekdays, the alarm should be \"7:00\" and on the weekend it should be \"10:00\". Unless we are on vacation--then on weekdays it should be \"10:00\" and weekends it should be \"off\".", "answer": "public String alarmClock(int day, boolean vacation)\r\n{\r\n    String rt = \"7:00\";\r\n    String vt = \"10:00\";\r\n    switch (day)\r\n    {\r\n        case 1:\r\n            if(!vacation)\r\n            {return rt;}\r\n            else\r\n            {return vt;}    \r\n            break;\r\n        case 2:\r\n            if(!vacation)\r\n            {return rt;}\r\n            else\r\n            {return vt;}    \r\n            break;\r\n             if(!vacation)\r\n            {return rt;}\r\n            else\r\n            {return vt;}  \r\n        case 3:\r\n             if(!vacation)\r\n            {return rt;}\r\n            else\r\n            {return vt;}  \r\n            break;\r\n        case 4:\r\n             if(!vacation)\r\n            {return rt;}\r\n            else\r\n            {return vt;}  \r\n            break;\r\n        case 5:\r\n             if(!vacation)\r\n            {return rt;}\r\n            else\r\n            {return vt;}  \r\n            break;\r\n        case 6:\r\n            if(vacation)\r\n            {return \"off\";}\r\n            else\r\n            {return vt;}\r\n            break;\r\n        case 0:\r\n             if(vacation)\r\n            {return \"off\";}\r\n            else\r\n            {return vt;}\r\n            break;                    \r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\n    int result = 0;\r\n    if (isBirthday)\r\n    {\r\n        speed -= 5;\r\n    }\r\n    \r\n    if (speed >= 60 && speed <= 80)\r\n    {\r\n        result = 1;\r\n    }\r\n    if (speed > 80);\r\n    {\r\n\t\tresult = 2;\r\n    }\r\n    \r\n    return result;\r\n}\r\n"}
{"context": "", "question": "Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. \"decomposition\").", "answer": "public int noTeenSum(int a, int b, int c)\r\n{\r\n\treturn (fixTeen(a) + fixTeen(b) + fixTeen(c));\r\n}\r\n\r\npublic int fixTeen(int n)\r\n{\r\n    if (n < 13 || n > 19 || n == 15 || n == 16)\r\n    {\r\n        return n;\r\n    }\r\n    return 0;\r\n}\r\n"}
{"context": "", "question": "Consider the series of numbers beginning at start and running up to but not including end, so for example start=1 and end=5 gives the series 1, 2, 3, 4. Return a new String[] array containing the string form of these numbers, except in the case of multiples of 3, use \"Fizz\" instead of the number, and for multiples of 5 use \"Buzz\", and for multiples of both 3 and 5 use \"FizzBuzz\". In Java, String.valueOf(xxx) will make the String form of an int or other type.", "answer": "public String[] fizzBuzz(int start, int end)\r\n{\r\n    String[] str = new String[end-start-1];\r\n    for(int i=start; i<end; i++)\r\n    {\r\n        if(i%3==0 && i%5==0)\r\n        {\r\n            str[i]=\"FizzBuzz\";\r\n    \t}\r\n        else if(i%3==0)\r\n        {\r\n            str[i]=\"Fizz\";\r\n        }\r\n        else if(i%5==0)\r\n        {\r\n            str[i]=\"Buzz\";\r\n        }\r\n        else\r\n        {\r\n            str[i]=String.valueOf(i);\r\n        }\r\n    }\r\n    return str;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.", "answer": "public boolean squirrelPlay(int temp, boolean isSummer)\r\n{\r\n    if (isSummer)\r\n        return (temp <= 100 && temp >= 60);\r\n    else \r\n        return (temp <= 90 && temp >= 60);\r\n}\r\n\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.", "answer": "public int loneSum(int a, int b, int c)\r\n{\r\n\tif(a == b)\r\n    {\r\n    \treturn c;\r\n    }\r\n    \r\n    if(a == c)\r\n    {\r\n    \treturn b;\r\n    }\r\n    \r\n    if(b == c)\r\n    {\r\n    \treturn a;\r\n    }\r\n    \r\n    else\r\n    {\r\n    \treturn a + b + c;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given a string str, find all places where a three-letter combination starting with \"z\" and ending with \"p\" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like \"zipXzap\" would produce a result of \"zpXzp\".", "answer": "public String zipZap(String str)\r\n{\r\n    int l = str.length() - 2;\r\n    for(int j = 0; j < l; j++)\r\n    {\r\n     \tif (str.charAt(j) == 'z')\r\n        {\r\n         \tif (str.charAt(j + 2) == 'p')\r\n            {\r\n             \tstr c = str.charAt(j + 1);\r\n                str = str.replace(c, \"\");\r\n                j++;\r\n            }\r\n        }\r\n    }\r\n    return str;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.", "answer": "public String repeatEnd(String str, int n)\r\n{\r\n\tString s = \"\";\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        s += str.substring(str.length() - n, str.length());\r\n    }\r\n    return s;\r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    int strLen = str.length();\r\n    if (str.substring(0, 2) == str.substring(strLen - 2 , strLen))\r\n    {\r\n     \treturn str.substring(2, strLen);   \r\n    }\r\n    return str;\r\n}\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    int clump = 0;\r\n    int n = 0;\r\n    for (; n < nums.length - 1; n++)\r\n    {\r\n        if (nums[n-1] == n && nums[n-1] > 0 || nums[n+1] == n && nums[n+1] < \t\t\t\tnums.length)\r\n        {\r\n            clump++;\r\n        }\r\n    }\r\n    return clump;\r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if the array contains two 7s next to each other, or there are two 7s separated by one element, such as with {7, 1, 7}. Otherwise, return false.", "answer": "public boolean has77(int[] nums)\r\n{\r\n    for (int r = 0; r < nums.length - 1; r++)\r\n    {\r\n        if (nums[r] == 7)\r\n        {\r\n            if (nums[r+1] == 7)\r\n            {\r\n                return true;\r\n            }\r\n            else if (nums[r+2] == 7 && r < nums.length - 2)\r\n            {\r\n                return true;\r\n            }\r\n        }  \r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\n    if (!isBirthday)\r\n    {\r\n        if (speed <= 60)\r\n        {\r\n            return 0;\r\n        }\r\n        if (speed > 60 && speed <= 80)\r\n        {\r\n            return 1;\r\n        }\r\n        if (speed > 80)\r\n        {\r\n            return 2;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if (speed <= 65)\r\n        {\r\n            return 0;\r\n        }\r\n        if (speed > 65 && speed <= 85)\r\n        {\r\n            return 1;\r\n        }\r\n        if (speed > 85)\r\n        {\r\n            return 2;\r\n        }\r\n                \r\n    }\r\nreturn;}\r\n"}
{"context": "", "question": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note: str.toLowerCase() returns the lowercase version of a string.", "answer": "public boolean endOther(String a, String b)\r\n{\r\n    String lowerA = a.toLowerCase();\r\n    String lowerB = b.toLowerCase();\r\n    if (lowerA == lowerB)\r\n        return true;\r\n    else if (lowerB.length() > lowerA.length())\r\n    {\r\n    \tif (lowerA == lowerB.substring(lowerB.length() - lowerA.length()))\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n    else\r\n    {\r\n    \tif (lowerB == lowerA.substring(lowerA.length() - lowerB.length()))\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string str and a non-empty word, return a version of the original string where all chars have been replaced by pluses (+), except for appearances of the word which are preserved unchanged.", "answer": "public String plusOut(String str, String word)\r\n{\r\n    int strLength = str.length();\r\n    int wordLength = word.length();\r\n    for (int i = 0; i < strLength; i++)\r\n        for (int j = 0; j < wordLength; j++)\r\n            if (str.charAt(i) == word.charAt(j))\r\n                continue;\r\n    \t\telse    \r\n        \t    str = str.replace(str.charAt(i), '+');\r\n    return str;        \r\n           \t\r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\n \tint noTicket = 0;\r\n    int smallTicket = 1;\r\n    int bigTicket = 2;\r\n    int speed = 32;\r\n    boolean birthday = true;\r\n    \r\n    if (birthday != true)\r\n    {\r\n        if (speed <= 60)\r\n        {\r\n            return noTicket;\r\n        } else if (speed >= 61 && speed <= 80)\r\n        {\r\n            return smallTicket;\r\n        } else if (speed >= 81)\r\n        {\r\n            return bigTicket;\r\n        }\r\n    } else \r\n    {\r\n        if (speed <= 65)\r\n        {\r\n            return noTicket;\r\n        } else if (speed >= 66 && speed <= 85)\r\n        {\r\n            return smallTicket;\r\n        } else if (speed >= 86)\r\n        {\r\n            return bigTicket;\r\n        }\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given an array, return an array that contains exactly the same numbers as the original array, but rearranged so that every 4 is immediately followed by a 5. Do not move the 4's, but every other number may move. The array contains the same number of 4's and 5's, and every 4 has a number after it that is not a 4. In this version, 5's may appear anywhere in the original array. (This is a slightly harder version of the fix34 problem.)", "answer": "public int[] fix45(int[] nums)\r\n{\r\n    int j = 0;\r\n\tfor(int i = 0; i < nums.length - 1; i++)\r\n\t{\r\n\t\tif(nums[i] == 4 && nums[i+1] != 5)\r\n\t\t{\r\n\t\t\tfor(; !(nums[j] == 5 && (j == 0 || j > 0 && nums[j-1] != 4)); j++);\r\n\t\t\tnums[j] = nums[i+1];\r\n\t\t\tnums[i+1] = 5;\r\n\t\t}\r\n\t}\r\n\treturn nums;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless \"outsideMode\" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.", "answer": "public boolean in1To10(int n, boolean outsideMode)\r\n{\r\n    boolean numb = true;\r\n    \r\n    if (n >= 1 && n <= 10)\r\n    {\r\n        numb = true;\r\n    }\r\n    else \r\n    {\r\n        numb = false;\r\n    }\r\n    \r\n    if (outsideMode == true)\r\n    {\r\n        if (n <= 1 || n >= 10)\r\n        {\r\n            numb = true;\r\n        }\r\n        else\r\n        {\r\n            numb = false;\r\n        }\r\n    }\r\n   \r\n    \r\n    \r\n    \r\n    return numb;\r\n}\r\n"}
{"context": "", "question": "Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. \"decomposition\").", "answer": "public int noTeenSum(int a, int b, int c)\r\n{\r\n    \r\n\treturn a + b + c;\r\n}\r\n\r\npublic int fixTeen(int n)\r\n{\r\n    if ( n == 15 || n == 16)\r\n        return n;\r\n    if (13 <= n <= 15)\r\n        return 0;\r\n    if (16 < n <= 19)\r\n        return 0;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\n    if (isBirthday)\r\n        speed = speed + 5;\r\n    if (speed <= 60)\r\n        return 0;\r\n    else if (speed <= 80)\r\n        return 1; \r\n    else \r\n        return 2;\r\n   \r\n}\r\n"}
{"context": "", "question": "Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. \"decomposition\").", "answer": "public int noTeenSum(int a, int b, int c)\r\n{\r\n\tif  (a != 15 || a!=16) \r\n        if (a >= 13  && a <= 19)\r\n    {\r\n    \ta = 0;\r\n    }\r\n    if (b >= 13  && b <= 19)  \r\n        if (b != 15 || b!=16)\r\n    {\r\n    \tb = 0;\r\n    }\r\n    if (c >= 13  &&  c <= 19) \r\n        if (c != 15 || c!=16)\r\n    {\r\n    \tc = 0;\r\n    }\r\n    int sum = a + b + c;\r\n    return sum;\r\n}\r\n\r\npublic int fixTeen(int n)\r\n{\r\n    n = 3;\r\n    return n;\r\n}\r\n"}
{"context": "", "question": "Given an array, return an array that contains exactly the same numbers as the original array, but rearranged so that every 4 is immediately followed by a 5. Do not move the 4's, but every other number may move. The array contains the same number of 4's and 5's, and every 4 has a number after it that is not a 4. In this version, 5's may appear anywhere in the original array. (This is a slightly harder version of the fix34 problem.)", "answer": "public int[] fix45(int[] nums)\r\n{\r\n    int random = 0;\r\n    for (int i = 0; i < nums.length - 1; i++)\r\n    {\r\n        if (nums[i] == 4)\r\n        {\r\n            random = nums[i + 1];\r\n            nums[i + 1] = 5;\r\n            \r\n            for (int x = 0; x < nums.length; x++)\r\n            {\r\n                if (x == 0 && nums[x] == 5)\r\n                {\r\n                    nums[x] = random;\r\n                }\r\n                else if (nums[x] == 5 && nums[x - 1] != 4)\r\n                {\r\n                    nums[x] = random;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    return nums;\r\n}\r\n"}
{"context": "", "question": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note: str.toLowerCase() returns the lowercase version of a string.", "answer": "public boolean endOther(String a, String b)\r\n{\r\n\tString aa = a.toLowerCase();\r\n    String bb = b.toLowerCase();\r\n    if (aa.endsWith(bb) || bb.endsWith(aa))\r\n    {\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n}\r\n"}
{"context": "", "question": "For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a, b, and c, return the sum of their rounded values. To avoid code repetition, write a separate helper public int round10(int num) and call it 3 times. Write the helper entirely below and at the same indent level as roundSum().", "answer": "public int roundSum(int a, int b, int c)\r\n{\r\n    int sum = round10(a);\r\n    sum = sum + round10(b);\r\n    sum = sum + round10(c);\r\n    return sum;\r\n}\r\n\r\npublic int round10(int num)\r\n{\r\n    if ((num % 10) >= 5)\r\n    {\r\n        return (num + ( 10 - (num % 10)));\r\n    }\r\n    else if ((num % 10) < 5)\r\n    {\r\n        return (num - (10 - (num % 10)));\r\n    }\r\n    else\r\n    {\r\n        return num;\r\n    }\r\n        \r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n     if(str.length() < 2) \r\n     {\r\n         return str;\r\n     }\r\n     String start = str.substring(0, 2);\r\n     String end = str.substring(str.length()-2);\r\n     if(start.compareTo(end) !=0 )\r\n     {\r\n         return str;\r\n     }\r\n     else \r\n     {\r\n         return str.substring(2);\r\n     }\r\n    \r\n    \r\n}\r\n"}
{"context": "", "question": "For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a, b, and c, return the sum of their rounded values. To avoid code repetition, write a separate helper public int round10(int num) and call it 3 times. Write the helper entirely below and at the same indent level as roundSum().", "answer": "public int roundSum(int a, int b, int c)\r\n{\r\n    this.round10(a);\r\n    this.round10(b);\r\n    this.round10(c);\r\n\tif ( a > 5 && a < 10)\r\n        a = 10;\r\n    else if ( a > 15 && a < 25)\r\n        a = 20;\r\n    else if ( a > 25 && a < 35)\r\n        a = 30;\r\n    if ( b >  5 && b < 10)\r\n        b = 10;\r\n    else if ( b > 15 && b < 25)\r\n        b = 20;\r\n    else if ( b > 25 && b < 35)\r\n        b = 30;\r\n    if ( c > 5 && c < 10)\r\n        c = 10;\r\n    else if ( c > 15 && c < 25)\r\n        c = 20;\r\n    else if ( c > 25 && c < 35)\r\n        c = 30; \r\n    else if ( c < 5)\r\n        c = 0;\r\n    else if ( b < 5)\r\n        b = 0;\r\n    else if ( a < 5 )\r\n        a = 0;\r\n    return a + b + c;\r\n}\r\n\r\npublic int round10(int num)\r\n{\r\n    if ( num > 5 && num < 10)\r\n        return num = 10;\r\n    else if ( num > 15 && num < 25)\r\n        return num = 20;\r\n    else if ( num > 25 && num < 35)\r\n        return num = 30;\r\n    return num = 0;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string str and a non-empty word, return a version of the original string where all chars have been replaced by pluses (+), except for appearances of the word which are preserved unchanged.", "answer": "public String plusOut(String str, String word)\r\n{\r\n    int firstStr = str.indexOf(word);\r\n    int lastStr = str.lastIndexOf(word);\r\n    if (firstStr == -1 || lastStr == -1)\r\n    {\r\n        String finalString = \"\";\r\n        for (int i = 0; i < str.length(); i++)\r\n        {\r\n            finalString = finalString + \"+\";\r\n        }\r\n        return finalString;\r\n    }\r\n    else if (firstStr == lastStr)\r\n    {\r\n        String finalString = \"\";\r\n        for (int i = 0; i < firstStr; i++)\r\n        {\r\n            finalString = finalString + \"+\";\r\n        }\r\n        finalString = finalString + word;\r\n        for (int j = 0; j < (str.length() - (firstStr + word.length())); j++)\r\n        {\r\n            finalString = finalString + \"+\";\r\n        }\r\n        return finalString;\r\n    }\r\n    // else if (lastStr)\r\n    else\r\n    {\r\n        String finalString = \"\";\r\n        for (int i = 0; i < (str.length() - word.length()); i++)\r\n        {\r\n            boolean lookForWord = (str.substring(i, i + word.length()) == word);\r\n            if (!lookForWord)\r\n            {\r\n                finalString = finalString + \"+\";\r\n            }\r\n            else\r\n            {\r\n                finalString = finalString + word;\r\n            }\r\n        }\r\n        return finalString;\r\n        /*\r\n        String finalString = \"\";\r\n        for (int i = 0; i < firstStr; i++)\r\n        {\r\n            finalString = finalString + \"+\";\r\n        }\r\n        finalString = finalString + word;\r\n        for (int j = 0; j < (lastStr - firstStr); j++)\r\n        {\r\n            finalString = finalString + \"+\";\r\n        }\r\n        finalString = finalString + word;\r\n        for (int k = 0; k < (str.length() - lastStr); k++)\r\n        {\r\n            finalString = finalString + \"+\";\r\n        }\r\n        return finalString;\r\n        */\r\n    }\r\n}"}
{"context": "", "question": "Return the centered average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array has a length of 3 or more.", "answer": "public int centeredAverage(int[] nums)\r\n{\t\r\n    int sum = 0;\r\n    int min = nums[0];\r\n    int max = nums[0];\r\n         \r\n    for(int i = 0; i < nums.length; i++) {\r\n        sum += nums[i];\r\n        min = Math.min(min, nums[i]);\r\n        max = Math.max(max, nums[i]);\r\n    }\r\n                           \r\n    return (sum - min - max) / (nums.length - 2);\r\n\t}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    if (str.length() > 10)\r\n    {\r\n    \tfor (int i = 0; i < str.length()-5; i++)\r\n    \t{\r\n        \tif (str.substring(i, i + 5).equals(\"bread\"))\r\n        \t{\r\n            \tfor (int j = str.length(); j > i + 5; j--)\r\n            \t{\r\n                \tif (str.substring(j - 5, j).equals(\"bread\"))\r\n                    {\r\n                        return str.substring(i + 1, j - 5);\r\n                    }\r\n            \t}\r\n        \t}\r\n    \t}\r\n    }\r\n    return \"\";\r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    String twoWord = str.substring(0, 2);\r\n    String lastTwo = str.substring(str.length()-2);\r\n\tif (twoWord.equals(lastTwo))\r\n\t{\r\n\t\tString finalWord = str.substring(2);\r\n        return finalWord;\r\n    }\r\n\telse\r\n    {\r\n    \treturn str;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given an array of int values, return true if the group of n numbers at the start of the array is the same as the group of n numbers at the end of the array. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n == 0 and n == 2, and false for n == 1 and n == 3. You may assume that n is in the range 0..nums.length, inclusive.", "answer": "public boolean sameEnds(int[] nums, int n)\r\n{\r\n    for (int i = n - 1; i >= 0; i--)\r\n    {\r\n        if (nums[(n - 1) - i] != nums[(nums.length - 1) - i])\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.", "answer": "public int blackjack(int a, int b)\r\n{\r\n    if (a <= 21) // a is good \r\n    {\r\n        if (b <= 21 && a > b) // b is also good, but a is returned\r\n        {\r\n            return a; \r\n        }\r\n        else if (b <= 21 && b > a) // b good, b is returned\r\n        {\r\n            return b;\r\n        }\r\n        else // b is not good and a is good\r\n        {\r\n            return a;\r\n        }\r\n    }\r\n    else if (b <= 21 && a > 21)\r\n    {\r\n        return b;\r\n    }\r\n    else \r\n    {\r\n        return 0;\r\n    }\r\n    return 0;\r\n}\r\n"}
{"context": "", "question": "The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.", "answer": "public boolean love6(int a, int b)\r\n{\r\n    boolean c = false;\r\n    if (a==6||b==6)\r\n        c=true;\r\n    if (Math.abs(a-b)==6)\r\n        c=true;\r\n    if (Math.abs(a+b)==6)\r\n    \tc=true;\r\n    return c;\r\n}\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    boolean meacthed = false;\r\n    int clumps = 0;\r\n    for(int i =0; i<nums.length-1; i++)\r\n    {\r\n        int a = nums[i];\r\n        int b = nums[i+1];\r\n        if (!matched && a == b)\r\n        {\r\n             clumps++;\r\n             matched = true;\r\n        }\r\n        else if(a != b)\r\n        {\r\n            matched = false;\r\n        }\r\n    }\r\n    return clumps;   \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.", "answer": "public int loneSum(int a, int b, int c)\r\n{\r\n    if(a==b)\r\n        return a+c;\r\n    else if(a==c)\r\n        return a+b;\r\n    else if(b==c)\r\n        return a+c;\r\n    else\r\n        return a+b+c;\r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is 13 then it does not count towards the sum and values to its right do not count. So for example, if b is 13, then both b and c do not count.", "answer": "public int luckySum(int a, int b, int c)\r\n{\r\n    if (a == 13)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (b == 13)\r\n    {\r\n        return a;\r\n    }\r\n    else if (c == 13)\r\n    {\r\n        return a + b;\r\n    }\r\n    else\r\n    {\r\n        return a + b + c;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You have a red lottery ticket showing ints a, b, and c, each of which is 0, 1, or 2. If they are all the value 2, the result is 10. Otherwise if they are all the same, the result is 5. Otherwise so long as both b and c are different from a, the result is 1. Otherwise the result is 0.", "answer": "public int redTicket(int a, int b, int c)\r\n{\r\n    if(a == 2 && b == 2 && c == 2)\r\n        return 10;\r\n    if(a == b && b == c)\r\n        return 5;\r\n    if(a != b && a != c)\r\n        return 1;\r\n    return 0;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.", "answer": "public boolean squirrelPlay(int temp, boolean isSummer)\r\n{\r\n    if (isSummer == true)\r\n    {\r\n    \tif (temp >= 60 && temp <= 100)\r\n    \t{\r\n        \treturn true;\r\n    \t}\r\n        else \r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    else if (isSummer == false)\r\n    {\r\n        if (temp >= 60 && temp <= 100)\r\n    \t{\r\n        \treturn true;\r\n    \t}\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n}\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n    int l = str.length();\r\n    int lim = l - 1;\r\n    char last = str.charAt(lim);\r\n    int y = str.indexOf('y');\r\n    int x = str.indexOf('x');\r\n    if (last == 'x' || (y < 0 && x >= 0))\r\n    {\r\n        return false;\r\n    }\r\n    else if (x < 0)\r\n    {\r\n        return true;\r\n    }\r\n    for (int i = 0; i <= lim; i++)\r\n    {\r\n        char o = str.charAt(i);\r\n        String oo = str.substring(i, lim);\r\n        int u = oo.indexOf('x');\r\n        if (o == 'y' && u < 0)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n   int length = str.length() - 2; // -2 ???\r\n    for ( int i = 0; i < length; i++){\r\n     if (str.charAt(i) == 'x' && str.charAt(i+1) == 'y' && str.charAt(i+2) == 'z')   \r\n     {\r\n     \tif(i == 0 || str.charAt(i - 1) != '.'){ // i == 0????\r\n        return true;\r\n        }\r\n     }\r\n    }\r\n    return false;\r\n}\r\n //if (str.charAt(i) = 'x' && str.charAt(i+1) = 'y' && str.charAt(i+2) = 'z')   \r\n    // {\r\n     \t//if(str.charAt(i - 1) != '.'){\r\n     //   return true;\r\n      //  }\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Return a version of the given array where each zero value in the array is replaced by the largest odd value to the right of the zero in the array. If there is no odd value to the right of the zero, leave the zero as a zero. Hint: in solving this: you may use a second helper function if you want, say to find the largest odd value to the right of a specified position.", "answer": "public int[] zeroMax(int[] nums)\r\n{\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        if (nums[i] == 0)\r\n        {\r\n         \tnums[i] = largestOddToRight(nums, i);   \r\n        }\r\n    }\r\n    return nums;\r\n}\r\n\r\npublic int largestOddToRight(int[] nums, int position)\r\n{\r\n    int result = 0;\r\n    for (int i = position; i < nums.length; i++)\r\n    {\r\n        if (nums[i] % 2 == 1)\r\n        {\r\n         \tif(nums[i] > result)\r\n            {\r\n\t\t\t\tresult = nums[i];\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    int count = 0;\r\n    for (int i = 0; i < nums.length - 1; i++)\r\n    {\r\n        if (nums[i] == nums[i+1])\r\n        {\r\n            count++;\r\n            for (int j = 1; j == nums[i]; j++)\r\n            {\r\n            \ti++;\r\n            }\r\n        }\r\n    }\r\n    return count;\r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if every 2 that appears in the array is next to another 2. Otherwise, return false.", "answer": "public boolean twoTwo(int[] nums)\r\n{\r\n    boolean checked;\r\n    \r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        checked = false;\r\n        \r\n        if (nums[i] == 2)\r\n        {\r\n            if (i > 0)\r\n            {\r\n                if (nums[i - 1] == 2)\r\n                {\r\n                    checked = true;\r\n                }\r\n            }\r\n            if (i < nums.length - 1)\r\n            {\r\n                if (nums[i + 1] == 2)\r\n                {\r\n                    checked = true;\r\n                }\r\n            }\r\n            if (!checked)\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    return true;\r\n}\r\n"}
{"context": "", "question": "We'll say that a value is \"everywhere\" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.", "answer": "public boolean isEverywhere(int[] nums, int val)\r\n{\r\n    for(int i = 0; i < nums.length-1; i++)\r\n\t{\r\n\t\tif(nums[i] != val && nums[i+1] != val)\r\n\t\t\treturn false;\r\n\t}  \r\n\treturn true;\r\n}\r\n"}
{"context": "", "question": "Return true if the given string contains a \"bob\" string, but where the middle 'o' character can be any character.", "answer": "public boolean bobThere(String str)\r\n{\r\n    \r\n    int end = str.length();\r\n    int variated = str.charAt(end);\r\nfor (int i = 0; i < end - 2; i++)\r\n \r\nif ((str.charAt(i) == 'b') && (str.charAt(i+2) == 'b'))\r\n    {\r\nreturn true;\r\n\t} \r\n\r\nreturn false;\r\n\t\r\n \r\n    \r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    if (str.substring(1,3) == str.substring(str.length-2, str.length))\r\n    {\r\n        return str.substring(3);\r\n    }\r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    int bigUsed = goal/5;\r\n    int smallUsed = goal%5;\r\n  if (goal > 5*big + small)\r\n      return -1;\r\n    else\r\n    {if (goal == (smallUsed + 5 * bigUsed))\r\n  return smallUsed;\r\n    else\r\n        return -1;}\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.", "answer": "public int blackjack(int a, int b)\r\n{\r\n    if (a > 21 && b > 21)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (a > b)\r\n    {\r\n        return a;\r\n    }\r\n    else\r\n    {\r\n        return b;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.", "answer": "public boolean canBalance(int[] nums)\r\n{\r\n    int first = 0;\r\n    int second = 0;\r\n      \r\n    for(int i = 0; i < nums.length; i++)\r\n        second += nums[i];\r\n              \r\n    for(int i = 0; i <= nums.length - 2; i++) {\r\n        first += nums[i];\r\n        second -= nums[i];\r\n                            \r\n        if(first == second)\r\n            return true;\r\n    }\r\n                                          \r\n    return false;\r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    small = goal%5;\r\n    big = goal -goal%5;\r\n    int bignum = big/5;\r\n    if(bignum + small == goal)\r\n    {\r\n    small = small;    \r\n    }\r\n    else\r\n    {\r\n     \tsmall = -1;   \r\n    }\r\n   \treturn small;\r\n    \r\n    \r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    int Big = big * 5;\r\n    if (goal < 5)\r\n    {\r\n        return small;\r\n    }\r\n    if ((Big/big) == goal)\r\n    {\r\n        return 0;\r\n    }\r\n    if (Big > goal)\r\n    {\r\n        if ((goal - 5 < 5))\r\n        {\r\n            if (small > (goal - 5))\r\n                {\r\n                    return goal - 5;\r\n                }\r\n        }\r\n        else\r\n        {\r\n            return -1;\r\n        }\r\n    }\r\n    else if ((Big + small) < goal)\r\n    {\r\n        return -1;\r\n    } \r\n    else if ((Big + small) == goal)\r\n    {\r\n        return small;\r\n    } \r\n    else\r\n    {\r\n        return goal - (Big);\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if every 2 that appears in the array is next to another 2. Otherwise, return false.", "answer": "public boolean twoTwo(int[] nums)\r\n{\r\n    int l = (nums.length) - 1;\r\n    if (nums[0] == 2)\r\n    {\r\n        if (nums[1] != 2)\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    if (nums[l] == 2)\r\n    {\r\n        if (nums[l - 1] != 2)\r\n        {\r\n            return false;\r\n        }\r\n    }   \r\n    for (int i = 1; i < nums.length; i++)\r\n    {\r\n        if (nums [i] == 2)\r\n        {\r\n            if (nums [i + 1] != 2 && nums[i -1] != 2)\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"}
{"context": "", "question": "Given an array containing three ints, return the sum of all the elements.", "answer": "public int sum3(int[] nums)\r\n{\r\n    return nums[0] + nums[1] + nums[2];\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.", "answer": "public int countCode(String str)\r\n{\r\n    int count  = 0;\r\n    String c = \"co\";\r\n    String e = \"e\";\r\n    \r\n \tfor (int i = 3; i <= str.length(); i++)\r\n    {\r\n        c = str.charAt(i-3);\r\n        \r\n        if (\"c\".equals(c))\r\n        {\r\n            count = count+1;\r\n        }\r\n    }\r\n            return count;\r\n}\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n\tint clump = 0;\r\n    for (int i = 0; i < nums.length;i++)\r\n    {\r\n        clump = 0;\r\n        for (int j = 1; j <= nums.length;j++)\r\n       {\r\n           if ( i + j < nums.length)\r\n           {\r\n               if (nums[i] == nums[i + j])\r\n               {\r\n                   clump = clump + 1;\r\n               }\r\n           }\r\n       }\r\n    }\r\n    return clump;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.", "answer": "public int sortaSum(int a, int b)\r\n{\r\n    sum = a + b;\r\n    if (sum >= 10 && sum <= 19)\r\n    {\r\n     \treturn 20;   \r\n    }\r\n    else\r\n    {\r\n     \treturn sum;   \r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You have a red lottery ticket showing ints a, b, and c, each of which is 0, 1, or 2. If they are all the value 2, the result is 10. Otherwise if they are all the same, the result is 5. Otherwise so long as both b and c are different from a, the result is 1. Otherwise the result is 0.", "answer": "public int redTicket(int a, int b, int c)\r\n{\r\n    if (a == 2 && b == 2 && c == 2)\r\n    {\r\n        return 10;\r\n    }\r\n    \r\n    if ( a != 2)\r\n    {\r\n        return 5;\r\n    }\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    int x = str.length();\r\n    int beginning = 0;\r\n    int end = 0;\r\n    String afterBread = \"\"; \r\n    if (x > 10)\r\n    {\r\n       for (int i = 0; i < x/2; i ++)\r\n        {\r\n            if (str.charAt(i).equals(b) && \t\tstr.charAt(i+5).equals(d))\r\n            {\r\n                beginning = i+5;\r\n            }\r\n        }\r\n        for (int j = x/2; j < x; j++)\r\n        {\r\n            if(str.charAt(j).equals(\"b\") && str.charAt(j+5).equals(\"d\"))\r\n            {\r\n                end = j;\r\n            }\r\n        }\r\n        afterBread = str.substring(beginnng, end);\r\n    }\r\n    return afterBread;\r\n}\r\n"}
{"context": "", "question": "Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form \"7:00\" indicating when the alarm clock should ring. Weekdays, the alarm should be \"7:00\" and on the weekend it should be \"10:00\". Unless we are on vacation--then on weekdays it should be \"10:00\" and weekends it should be \"off\".", "answer": "public String alarmClock(int day, boolean vacation)\r\n{\r\n    if (day > 0 && day < 6)\r\n    {\r\n        if (vacation = true)\r\n    \t{\r\n     \t \treturn \"10:00\"; \r\n    \t}\r\n        else \r\n        {\r\n        return \"7:00\";\r\n        }\r\n    }\r\n    else \r\n    {\r\n        if (vacation = true)\r\n    \t{\r\n        \treturn \"off\";\r\n    \t}\r\n        else \r\n        {\r\n        return \"10:00\";\r\n        }\r\n    }\r\n        \r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if every 2 that appears in the array is next to another 2. Otherwise, return false.", "answer": "public boolean twoTwo(int[] nums)\r\n{\r\n    if (nums.length == 1 && nums[0] ==2)\r\n    {\r\n        return false; \r\n    }\r\n    \r\n    boolean result = false; \r\n    for (int i = 0;  i <nums.length; i++)\r\n    {\r\n        if (nums[i] == 2)\r\n        {\r\n            if (i + 1 < nums.length && nums[i+1] == 2)\r\n            {\r\n                    result = true; \r\n            }\r\n            else if (i - 1 > 0 && nums[i-1] == 2)\r\n            {\r\n                    result = true; \r\n            }\r\n            else \r\n            {\r\n                result = false; \r\n            }\r\n        }\r\n    }\r\n    \r\n    return result; \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    int a = str.indexOf( \".xyz\");\r\n    \r\n    int b = str.indexOf( \"xyz\" );\r\n    \r\n    if (a == -1 && b != -1)\r\n    {\r\n        return true;\r\n    }\r\n   \r\n    else if (b != -1 && a != -1)\r\n    {\r\n        return true;\r\n    }\r\n    \r\n    else \r\n    {\r\n        return false;\r\n    }\r\n  \r\n}\r\n"}
{"context": "", "question": "We'll say that a value is \"everywhere\" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.", "answer": "public boolean isEverywhere(int[] nums, int val)\r\n{\r\n\treturn nums == nums[val];\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Return a version of the given array where each zero value in the array is replaced by the largest odd value to the right of the zero in the array. If there is no odd value to the right of the zero, leave the zero as a zero. Hint: in solving this: you may use a second helper function if you want, say to find the largest odd value to the right of a specified position.", "answer": "public int[] zeroMax(int[] nums)\r\n{\r\n    int largestOdd = 0;\r\n    int size = nums.length;\r\n    int[] newNums = new int[size];\r\n    for (int i = 0; i < size; i++)\r\n    {\r\n        if (nums[i] != 0)\r\n            newNums[i]=nums[i];\r\n        else\r\n        {\r\n            int replacementIndex = i;\r\n            int k;\r\n            for (int j = i+1; j < size; j++)\r\n            {\r\n                k=j;\r\n                if(nums[j] % 2 == 1 && nums[j] > largestOdd)\r\n                    largestOdd = nums[k];\r\n            \t\treplacementIndex = k;\r\n            \r\n            }\r\n            newNums[i]=nums[replacementIndex];\r\n        }\r\n    }\r\n    return newNums;\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    return(str.substring(str.indexOf(\"bread\")+5, str.lastIndexOf(\"bread\")));\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string str and a non-empty word, return a version of the original string where all chars have been replaced by pluses (+), except for appearances of the word which are preserved unchanged.", "answer": "public String plusOut(String str, String word)\r\n{\r\n\tint findWord = str.indexOf(word);\r\n    int wordLength = word.length();\r\n    int strLength = str.length();\r\n    String newString = \"\";\r\n    String firstPart = str.substring(0, findWord);\r\n    int firstPartLength = firstPart.length();\r\n    while (findWord != -1)\r\n    {\r\n        int findWord2 = str.indexOf(word, findWord + 1);\r\n        firstPart = str.substring(findWord, findWord2);\r\n        findWord = str.indexOf(word, findWord + 1);\r\n        firstPartLength = firstPart.length();\r\n        for (int i = 0; i < firstPartLength; i++)\r\n        {\r\n            newString = newString + \"+\";\r\n        }\r\n        newString = newString + word;\r\n        int newStringLength = newString.length();\r\n   \t\tif (findWord == -1)\r\n    \t{\r\n\t\t\tString lastPart = str.substring(newStringLength, strLength);\r\n       \t\tint lastPartLength = lastPart.length();\r\n        \tfor (int i = 0; i < lastPartLength; i++)\r\n        \t{\r\n            \tnewString = newString + \"+\";\r\n        \t}\r\n    \t}\r\n    }\r\n    return newString;\r\n}\r\n"}
{"context": "", "question": "Given an int[] array, write a function that returns an array where all the 10's have been removed. The remaining elements should shift left towards the start of the array as needed, and the empty spaces at the end of the array should be set to 0. So {1, 10, 10, 2} yields {1, 2, 0, 0}. You may modify and return the given array or make a new array.", "answer": "public int[] withoutTen(int[] nums)\r\n{\r\nint[] newAry = new int[nums.length];\r\nint counter = 0;\r\nfor (int i = 0; i < nums.length; i++)\r\n{\r\nif (nums[i] != 10)\r\n{\r\nnewAry[counter++] = nums[i];\r\n}\r\n}\r\nreturn newAry;\r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if the array contains two 7s next to each other, or there are two 7s separated by one element, such as with {7, 1, 7}. Otherwise, return false.", "answer": "public boolean has77(int[] nums)\r\n{\r\n    Boolean result = false;\r\n    for (int i = 1; i < nums.length - 1; i++)\r\n    {\r\n        if (nums[i - 1] == 7 || nums[i + 1])\r\n        {\r\n            result = true;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    if ((big * 5) < goal)\r\n    {\r\n      if (((big * 5) + (goal - (big * 5))) == goal)\r\n        {\r\n            return goal - (big * 5);\r\n        } \r\n      else\r\n       {\r\n            return -1;\r\n       }\r\n    }\r\n    else\r\n    {\r\n        return -1;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.", "answer": "public int blackjack(int a, int b)\r\n{\r\n    if (a < 21 && b < 21)\r\n    {\r\n        if (a > b && a < 21)\r\n        {\r\n            return a;\r\n        }\r\n        else if (b > a && b < 21)\r\n        {\r\n            return b;\r\n        }\r\n    \telse if (a > 21 && b < 21)\r\n    \t{\r\n    \t    return b;\r\n    \t}\r\n    \telse if (b > 21 && a < 21)\r\n    \t{\r\n        return a;\r\n    \t}\r\n    }\r\n    else\r\n    {\r\n        return 0;\r\n    }\r\n}"}
{"context": "", "question": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note: str.toLowerCase() returns the lowercase version of a string.", "answer": "public boolean endOther(String a, String b)\r\n{\r\n    if (a.endsWith(b))\r\n        return true;\r\n    else if (b.endsWith(a))\r\n        return true;\r\n    else\r\n        return false;\r\n}\r\n             \r\n             \r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.", "answer": "private int sum; \r\n\r\npublic int sortaSum(int a, int b)\r\n{\r\n    sum = a + b; \r\n    if ((a + b) <= 19 || (a + b) >= 10)\r\n    {\r\n        sum = 20; \r\n    }\r\n    return sum; \r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    int a = (goal-5*big);\r\nif (a<=small && a>=0) return a;\r\nif (a<0 && goal%5<=small) return goal%5;\r\nreturn -1;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\t\r\n    int i = 0;\r\n    int count = 0;\r\n    char a = '.';\r\n    char x = 'x';\r\n    char y = 'y';\r\n    char z = 'z';\r\n   // !a.equals(str.charAt(i)) && \r\n    if (str.length()>=3)\r\n    {\r\n    for (i = 0; i<=str.length()-2; i++)\r\n    { \tif (x == str.charAt(i) && y == (str.charAt(i+1)) && z == (str.charAt(i+2)))\r\n            {\r\n                count = count + 1;               \r\n            }\r\n    }\r\n    return count >= 1;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string, return a string made of its first 2 chars. If the string length is less than 2, use '@' for the missing chars.", "answer": "public String atFirst(String str)\r\n{\r\n    if (str.length() >= 2)\r\n    {\r\n        return str.substring(0,1);\r\n    }\r\n    \r\n    return str;\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    int len = str.length();\r\n\r\n  String tmpString = \"\";\r\n\r\n  String finalString = \"\";\r\n\r\n  int start = 0;\r\n    \r\n  int finish = 0;\r\n\r\n  boolean found = false;\r\n\r\n   \r\n\r\n  if (len <= 10)\r\n\r\n    return \"\";\r\n\r\n   \r\n\r\n  for (int i = 0; i < len - 4; i++) {\r\n\r\n    tmpString = str.substring(i, i+5);\r\n\r\n     \r\n\r\n    if (tmpString.equals(\"bread\") && found == true)\r\n\r\n      finish = i; \r\n\r\n    if (tmpString.equals(\"bread\") && found == false) {\r\n\r\n      start = i+5;\r\n\r\n      found = true;\r\n\r\n    }\r\n  }\r\n\r\n   \r\n\r\n  finalString = str.substring(start,finish);\r\n\r\n  return finalString;\r\n\r\n}\r\n"}
{"context": "", "question": "The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.", "answer": "public boolean love6(int a, int b)\r\n{\r\n    if ( a == 6 || b == 6 || Math.abs( a - b ) == 6 || Math.abs( a + b ) == 6 )\r\n   return true;\r\n  else return false;\r\n}\r\n"}
{"context": "", "question": "We'll say that a value is \"everywhere\" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.", "answer": "public boolean isEverywhere(int[] nums, int val)\r\n{\r\n    int[] condition = new int[2];\r\n    condition [0] = nums [0];\r\n    condition [1] = nums [1];\r\n        if (nums.length == 0)\r\n    {\r\n        return false;\r\n    }\r\n    else\r\n    {\r\n\t\tfor (int i = 0; i < nums.length; i++)\r\n    \t\t{\r\n        \t\tif (condition[i] == val || condition[i + 1] == val)\r\n        \t\t{\r\n            \t\treturn true;\r\n       \t \t\t}\r\n       \t\t \telse\r\n        \t\t{\r\n            \t\treturn false;\r\n        \t\t}\r\n   \t\t\t}\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if the array contains two 7s next to each other, or there are two 7s separated by one element, such as with {7, 1, 7}. Otherwise, return false.", "answer": "public boolean has77(int[] nums)\r\n{\r\n    int blob = 0;\r\n    for (int i = 0; i < nums.length - 1; i++)\r\n    {\r\n        if (nums[i] == nums[i + 1] && nums[i] == 7)\r\n        {\r\n            blob = blob + 100;\r\n        }\r\n        else\r\n        {\r\n            blob = blob + 1;\r\n        }\r\n    }\r\n    return blob >= 100;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string str and a non-empty word, return a version of the original string where all chars have been replaced by pluses (+), except for appearances of the word which are preserved unchanged.", "answer": "public String plusOut(String str, String word)\r\n{\r\n    if (str != \"\" && word != \"\")\r\n    {\r\n        return str.replaceAll(\"str\", \"+\");\r\n    }\r\n    else\r\n    {\r\n        return str;\r\n    }\r\n    \r\n}\r\n"}
{"context": "", "question": "Given an array of int values, return true if the group of n numbers at the start of the array is the same as the group of n numbers at the end of the array. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n == 0 and n == 2, and false for n == 1 and n == 3. You may assume that n is in the range 0..nums.length, inclusive.", "answer": "public boolean sameEnds(int[] nums, int n)\r\n{\r\n    if (nums.lengh != 0 && n == 0)\r\n        return true;\r\n    for (int x = 0 ; x < num.lengh ; x++)\r\n    {\r\n        if (nums[x] != nums[num.lengh - x - n])\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n"}
{"context": "", "question": "Return true if the given string contains a \"bob\" string, but where the middle 'o' character can be any character.", "answer": "public boolean bobThere(String str)\r\n{\r\n    \r\n    for (int x = 0; x < str.length(); x++)\r\n        \r\n    {\r\n        if (str.charAt(x) == 'b' && str.charAt (x+2) == 'b')\r\n    \t{\r\n        return true;\r\n    \t}\r\n    \t\telse \r\n    \t\t{\r\n        \treturn false;\r\n    \t\t}\r\n    }\r\n}"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    int sum =5*big + small;\r\n    small = goal%5;\r\n    int bignum = big/5;\r\n    \r\n    //if(bignum + small == goal)\r\n    //{\r\n    //small = small;    \r\n    //}\r\n    //else\r\n    //{\r\n     //\tsmall = -1;   \r\n    //}\r\n    if (sum < goal)\r\n    {\r\n    \tsmall = -1;   \r\n    }\r\n    else\r\n    {\r\n     \tsmall=small;   \r\n    }\r\n   \treturn small;\r\n    \r\n    \r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    int ind = str.indexOf(\"bread\");\r\n    int lastind = str.lastIndexOf(\"bread\");\r\n    if((lastind != -1) && (ind != lastind))\r\n        return (str.substring(ind+5, lastind));\r\n    return \"\";\r\n        \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is 13 then it does not count towards the sum and values to its right do not count. So for example, if b is 13, then both b and c do not count.", "answer": "public int luckySum(int a, int b, int c)\r\n{\r\n    if (a=13)\r\n        return 0;\r\n    if (b=13)\r\n        return a;\r\n    if (c=13)\r\n        return (a+b);\r\n    return (a + b + c);\r\n        \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.", "answer": "public int loneSum(int a, int b, int c)\r\n{\r\n    if(a==b)return c;\r\n    if(a==c)return b;\r\n    if(c==b)return a;\r\n    if(a==b&&a==c)return 0;\r\n    return a+b+c;\r\n    \r\n}\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n    int size = str.length();\r\n    boolean truth = false;\r\n    \r\n    for (int i = 0; i < size; i++)\r\n        if (str.charAt(i) == 'x')\r\n            for (int j = i; j < size ; j++)\r\n                if (str.charAt(j) !='y')\r\n                    truth = false;\r\n                else \r\n                    return true;\r\n    \telse if (!str.contains(\"x\"))\r\n            truth = true;\r\n    \telse\r\n            truth = false;\r\n    return truth;\r\n    \r\n            \r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that takes an array and returns the sum of the numbers in the array, or 0 if the array is empty. Except the number 13 is very unlucky, so it does not count any 13, or any number that immediately follows a 13.", "answer": "public int sum13(int[] nums)\r\n{\r\n    int c = 0;\r\n    if (nums.length == 0)\r\n        return 0;\r\n    for (int x = 0; x < nums.length; x++)\r\n    {\r\n        if (nums[x] == 13)\r\n            x++;\r\n        else\r\n            c = c + nums[x];\r\n    }\r\n    return c;\r\n        \r\n}\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    int merlin = 0;\r\n    \r\n    for(int i = 0; i < nums.length - 1  ; i++)\r\n    {\r\n        if (nums[i] == nums[i+1] && (i<nums.length -1 || i==0))\r\n        {\r\n            merlin++;\r\n        }\r\n       \r\n           \r\n    }\r\n    return merlin;\r\n}\r\n"}
{"context": "", "question": "Consider the series of numbers beginning at start and running up to but not including end, so for example start=1 and end=5 gives the series 1, 2, 3, 4. Return a new String[] array containing the string form of these numbers, except in the case of multiples of 3, use \"Fizz\" instead of the number, and for multiples of 5 use \"Buzz\", and for multiples of both 3 and 5 use \"FizzBuzz\". In Java, String.valueOf(xxx) will make the String form of an int or other type.", "answer": "public String[] fizzBuzz(int start, int end)\r\n{\r\n    String[] fizzBuzz = new String[end-start];\r\n    for (int i = start; i < end - 2; i++){\r\n        fizzBuzz[i] = Integer.toString(i);\r\n    }\r\n    for (int i = 0; i < fizzBuzz.length; i++){\r\n        if (i == 1)\r\n            fizzBuzz[i] = Integer.toString(i);\r\n        else if (i % 15 == 0){\r\n            fizzBuzz[i] = \"FizzBuzz\";\r\n        }\r\n        else if (i % 3 == 0){\r\n            fizzBuzz[i] = \"Fizz\";\r\n        }\r\n        else if (i % 5 == 0){\r\n            fizzBuzz[i] = \"Buzz\";\r\n        }\r\n    }\r\n    return fizzBuzz;\r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    int amount = (5*big) + small; // Amount possible\r\n    if (amount < goal)\r\n    {\r\n        return -1;\r\n    }\r\n    else if (amount == goal)\r\n    {\r\n        return small;\r\n    }\r\n    else\r\n    {\r\n        int diff = amount - goal;\r\n        if (diff < 5)\r\n        {\r\n            return small;\r\n        }\r\n        else\r\n        {\r\n            int afterBig = diff - (5*big);\r\n            return small - afterBig;\r\n        }\r\n    }\r\n}\r\n"}
{"context": "", "question": "Return true if the given string contains a \"bob\" string, but where the middle 'o' character can be any character.", "answer": "public boolean bobThere(String str)\r\n{\r\n    int a = 0;\r\n    for (int i = 0; i < str.length()-2; i++) {\r\n            String s = String.valueOf(str.charAt(i));\r\n            String p = String.valueOf(str.charAt(i+2));\r\n                if (s.equals(\"b\") && p.equals(\"b\")) {\r\n                    a++;\r\n                }\r\n    }\r\n                return a > 0;\r\n}\r\n"}
{"context": "", "question": "Given an int array of any length, return a new array of its first 2 elements. If the array is smaller than length 2, use whatever elements are present.", "answer": "public int[] frontPiece(int[] nums)\r\n{\r\n    int[] frontArray = new int [2];\r\n    if (nums.length > 2)\r\n    {\r\n    \tfor (int i = 0; i < 2; i++)\r\n        {\r\n        \tfrontArray[i] = nums[i];\r\n        }\r\n \t\treturn fronArray;      \r\n    }\r\n    else\r\n    {\r\n    \treturn nums;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Return a version of the given array where each zero value in the array is replaced by the largest odd value to the right of the zero in the array. If there is no odd value to the right of the zero, leave the zero as a zero. Hint: in solving this: you may use a second helper function if you want, say to find the largest odd value to the right of a specified position.", "answer": "public int[] zeroMax(int[] nums)\r\n{\r\n    int[] numArray;\r\n    for(int i : nums)\r\n    {\r\n        if (nums[i] == 0)\r\n        {\r\n            nums[i] = largestOdd(i, nums);\r\n        }\r\n    }\r\n    return numArray;\r\n}\r\n\r\npublic int largestOdd(int position, int[] nums2)\r\n{\r\n    int biggestOdd = 0;\r\n    for (int i = position; i < nums2.length; i++)\r\n    {\r\n        if (nums2[i] % 2 == 1 && nums2[i] > biggestOdd)\r\n        {\r\n            biggestOdd = nums2[i];\r\n        }\r\n    }\r\n    return biggestOdd;\r\n}"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    int clumps = 0;\r\n    boolean isAClump = false;\r\n    for(int f = 0; f < nums.length; f++)\r\n    {\r\n        if(isAClump)\r\n        {\r\n            if(nums[f] != nums[f+1])\r\n            {\r\n                isAClump = false;\r\n            }\r\n            else if (nums[f] == nums[f+1])\r\n            {\r\n                isAClump = true;\r\n                clumps++;\r\n            }\r\n        }\r\n    }\r\n    return clumps;\r\n}\r\n"}
{"context": "", "question": "Given n >= 0, create an array with the pattern {1, 1, 2, 1, 2, 3, ... 1, 2, 3 .. n} (spaces added to show the grouping). Note that the length of the array will be 1 + 2 + 3 ... + n, which is known to sum to exactly n * (n + 1)/2.", "answer": "public int[] seriesUp(int n)\r\n{\t\r\n    int[] arr = new int[n*(n+1)/2];\r\n\tint p = 0;\r\n    \r\n\tfor(int i = 1; i <= n; i++)\r\n\t{\t\r\n        int j = 1;\r\n\t\tfor(int a = 0; a < i; a++)     \r\n\t\t\tarr[p] = j;\r\n        p = p + 1;\r\n        j = j + 1;\r\n\t}\r\n\treturn arr;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.", "answer": "public boolean evenlySpaced(int a, int b, int c)\r\n{\r\n    if ( a > b && b> c && a-b == b-c)\r\n    {\r\n        return true;\r\n    }\r\n    else if(b > a && a > c && b-a == a-c)\r\n    {\r\n        return true;\r\n    }\r\n    else if(c> a && a > b && a-c == a-b)\r\n    {\r\n        return true;\r\n    }\r\n    else if (a > c && c> b && a-c == c-b)\r\n    {\r\n        return true;\r\n    }\r\n    else if(b> c && c > a && b-c == c-a)\r\n    {\r\n        return true;\r\n    }\r\n    else if(c> b && b > a && c-b == b-a)\r\n    {\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string str and a non-empty word, return a version of the original string where all chars have been replaced by pluses (+), except for appearances of the word which are preserved unchanged.", "answer": "public String plusOut(String str, String word)\r\n{\r\n    if (str.length() == 0)\r\n    {\r\n        return str;\r\n    }\r\n    else if (str.contains(word))\r\n    {\r\n        for (int i = 0; i < str.length(); i++)\r\n        {\r\n            String newStr = str.replace(str.charAt(i),'+');\r\n        }\r\n        return newStr;\r\n    }\r\n    else\r\n    {\r\n        return word;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that takes an array and returns the sum of the numbers in the array, or 0 if the array is empty. Except the number 13 is very unlucky, so it does not count any 13, or any number that immediately follows a 13.", "answer": "public int sum13(int[] nums)\r\n{\r\n    int sum = 0;\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        sum = sum + nums[i];\r\n        if (i + 1 != nums.length)\r\n        {\t\r\n            if (nums[i] == 13)\r\n        \t{\t\r\n            \tsum = sum - 13 - nums[i+1];\r\n        \t}\r\n        }\r\n        else if (nums[i] == 13)\r\n        {\r\n       \t\tsum = sum - 13;\r\n        }\r\n    }\r\n    if ( sum < 0)\r\n    {\r\n        return 0;\r\n    }\r\n    return sum;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.", "answer": "public int countCode(String str)\r\n{\r\n   \r\n    int len = str.length();\r\n    int j = 0;\r\n    for (int i = 0; i < len; i++)\r\n    {\r\n        if (str.charAt(i) == 'c' && str.charAt(i+1) == 'o' && str.charAt(i+3) ==  'e')\r\n        {\r\n            j = j + 1;\r\n        }\r\n    }\r\n    return j;\r\n}\r\n"}
{"context": "", "question": "You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.", "answer": "public int greenTicket(int a, int b, int c)\r\n{\r\n    if (a == b && b == c)\r\n    {\r\n        return 20;\r\n    }\r\n    \r\n    if (a == b || b == c || a == c)\r\n    {\r\n        return 10;\r\n    }\r\n    \r\n    else\r\n    {\r\n        return 0;\r\n    }\r\n}\r\n"}
{"context": "", "question": "For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a, b, and c, return the sum of their rounded values. To avoid code repetition, write a separate helper public int round10(int num) and call it 3 times. Write the helper entirely below and at the same indent level as roundSum().", "answer": "public int roundSum(int a, int b, int c)\r\n{\r\n    int sum = 0;\r\n    int remaindera = a % 10;\r\n    if (remaindera >= 5)\r\n    {\r\n    \ta = a + (10 - remaindera);\r\n    }\r\n    else\r\n    {\r\n    \ta = a - remaindera;\r\n    }\r\n    sum = a + b + c;\r\n    return sum;\r\n}\r\n\r\npublic int round10(int num)\r\n{\r\n    num = 3;\r\n}\r\n"}
{"context": "", "question": "Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. \"decomposition\").", "answer": "public int noTeenSum(int a, int b, int c)\r\n{\r\n\treturn (fixTeen(a) + fixTeen(b) + fixTeen(c));\r\n}\r\n\r\npublic int fixTeen(int n)\r\n{\r\n    if (n < 13 || n > 19 || n == 15 || n == 16)\r\n        return n;\r\n    return 0;\r\n}\r\n"}
{"context": "", "question": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note: str.toLowerCase() returns the lowercase version of a string.", "answer": "public boolean endOther(String a, String b)\r\n{\r\n    a = a.toLowerCase();\r\n    b = b.toLowerCase();\r\n \treturn (a.endsWith(b) || b.endsWith(a));\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    if(str.length() > 10 &&\r\n       str.substring(0, 5) == \"bread\" &&\r\n       str.substring(str.length() - 5, str.length() - 1) == \"bread\")\r\n    {\r\n        return str.substring(5, str.length() - 5);\r\n    }\r\n    else {\r\n        return \"\";\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is 13 then it does not count towards the sum and values to its right do not count. So for example, if b is 13, then both b and c do not count.", "answer": "public int luckySum(int a, int b, int c)\r\n{\r\n    if(a == 13)\r\n\t\treturn 0;\r\n\tif(b == 13)\r\n\t\treturn a;\r\n\tif(c == 13)\r\n\t\treturn (a + b);\r\n\treturn (a + b + c);\r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    int numSmall = goal % big;\r\n    if (numSmall % small = 0)\r\n    {\r\n        return small;\r\n    }\r\n    else\r\n    {\r\n        return -1;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    str = str.toLowerCase();\r\n    if (str.indexOf(\"xyz\") >= 0)\r\n    {\r\n        if (str.charAt(str.indexOf(\"xyz\") - 1).equals(\".\"))\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    else \r\n    {\r\n        return false;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.", "answer": "public int blackjack(int a, int b)\r\n{\r\n    int returnValue = 0;\r\n    if (a<=21 || b<=21)\r\n    {\r\n    \tif (b>21)\r\n            returnValue = a;\r\n        else if (a>21)\r\n        {\r\n            returnValue = b;\r\n        }\r\n            \r\n        if (21-a < 21-b)\r\n    \t{\r\n        \treturnValue = a;\r\n    \t}\r\n    \telse if (21-b < 21-a)\r\n    \t{\r\n        \treturnValue = b;\r\n    \t}   \t\r\n    \treturn returnValue;\r\n\t}\r\n    else \r\n    {\r\n        returnValue = 0;\r\n    }\r\n    return returnValue;\r\n}\r\n"}
{"context": "", "question": "Return an array that is \"left shifted\" by one--so for an input of {6, 2, 5, 3}, the method returns {2, 5, 3, 6}. You may modify and return the given array, or return a new array.", "answer": "public int[] shiftLeft(int[] nums)\r\n{\r\n    if(nums.length == 0)\r\n    {\r\n        return nums;\r\n    }\r\n    int store = 0;\r\n    int start = nums[0];\r\n    for(int x = 1; x < nums.length-1; x++)\r\n    {\r\n        store = nums[x];\r\n        nums[x] = nums[x+1];\r\n        nums[x-1] = store; \r\n    }\r\n    nums[nums.length-1] = start;\r\n    return nums;\r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": " public int makeChocolate(int small, int big, int goal) {\r\n\r\n        if(goal >= 5){\r\n            if(goal/5 >= big){\r\n                goal-= big * 5;\r\n            }else{\r\n                goal = goal % 5;\r\n            }\r\n        }\r\n        if(goal <= small) return goal;\r\n        return -1;\r\n\r\n    }"}
{"context": "", "question": "For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a, b, and c, return the sum of their rounded values. To avoid code repetition, write a separate helper public int round10(int num) and call it 3 times. Write the helper entirely below and at the same indent level as roundSum().", "answer": "public int roundSum(int a, int b, int c)\r\n{\r\n    this.round10(a);\r\n    this.round10(b);\r\n    this.round10(c);\r\n    return a + b + c;\r\n}\r\n\r\npublic int round10(int num)\r\n{\r\n    if ( num > 5 && num < 10)\r\n        num = 10;\r\n    else if ( num > 15 && num < 25)\r\n        num = 20;\r\n    else if ( num > 25 && num < 35)\r\n        num = 30;\r\n    else if (num < 5)\r\n        return 0;\r\n}\r\n"}
{"context": "", "question": "Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form \"7:00\" indicating when the alarm clock should ring. Weekdays, the alarm should be \"7:00\" and on the weekend it should be \"10:00\". Unless we are on vacation--then on weekdays it should be \"10:00\" and weekends it should be \"off\".", "answer": "public String alarmClock(int day, boolean vacation)\r\n{\r\n    if (!vacation)\r\n\t{ \r\n        if ((day <= 5) && (day > 0))\r\n    \t{\r\n        \treturn \"7:00\";\r\n        }\r\n\t  \telse\r\n      \t{\r\n        \treturn \"10:00\";\r\n      \t}\r\n    }\r\n    else\r\n    {\r\n        if ((day >= 6) || (day = 0))\r\n   \t\t{\r\n        \treturn \"off\";\r\n    \t}\r\n        else\r\n        {\r\n            return \"10:00\";\r\n        }\r\n    }\r\n}"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n   char c;\r\n   int leg = str.leng() - 1;\r\n    for (int s = leg; s >= 0; s--)\r\n    {\r\n        c = str.charAt(s);\r\n        if(c == 'x')\r\n        return false;\r\n    \tif(c == 'y')\r\n        return true;\r\n    }\r\n    return false;\r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Return a version of the given array where each zero value in the array is replaced by the largest odd value to the right of the zero in the array. If there is no odd value to the right of the zero, leave the zero as a zero. Hint: in solving this: you may use a second helper function if you want, say to find the largest odd value to the right of a specified position.", "answer": "public int[] zeroMax(int[] nums)\r\n{\r\n    int largest = 0;\r\n    for (int i = nums.length; i > 0; i--)\r\n    {\r\n        if (nums[i] % 2 == 1)\r\n            if (nums[i] > largest)\r\n                largest = nums[i];\r\n        if (nums[i] == 0)\r\n            nums[i] = largest;\r\n    }\r\n    return nums;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.", "answer": "public int countCode(String str)\r\n{\r\n    int length = str.length();\r\n    int index = str.indexOf(\"code\");\r\n    int nAppears = 0;\r\n    for (int i = 0; i <= length; i++)\r\n    {\r\n        int newIndex = str.indexOf(\"code\", i);\r\n        if (newIndex != index)\r\n        {\r\n            nAppears++;\r\n            index = newIndex;\r\n        }\r\n            \r\n    }\r\n    return nAppears;\r\n}\r\n"}
{"context": "", "question": "Return true if the given string contains a \"bob\" string, but where the middle 'o' character can be any character.", "answer": "public boolean bobThere(String str)\r\n{\r\n    //int firstB = str.indexOf(\"b\");\r\n   // int secondB = str.lastIndexOf(\"b\");\r\n    //if (secondB == firstB + 2)\r\n    //    return true;\r\n   // return false;\r\n    for (int n = 0; n < str.length() - 2; n++)\r\n    {\r\n        if (str.charAt(n) == 'b' && str.charAt(n + 2) == 'b')\r\n        {\r\n            return true;\r\n        }\r\n                \r\n    }//end for loop\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if every 2 that appears in the array is next to another 2. Otherwise, return false.", "answer": "public boolean twoTwo(int[] nums)\r\n{\r\n    for (int i = 0; i < nums.length - 1; i++)\r\n    {\r\n        if (nums[i] == 2)\r\n        {\r\n            if (nums[i + 1] != 2)\r\n            {\r\n                return false;\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"}
{"context": "", "question": "Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.", "answer": "public boolean canBalance(int[] nums)\r\n{\r\n    int left = 0;\r\n    int right;\r\n    for (int i = 0; i < nums.length - 1; i++)\r\n    {\r\n        left += nums[i];\r\n    }\r\n    right = nums[nums.length - 1];\r\n    for (int i = nums.length - 2; i > 0; i--)\r\n    {\r\n        if (left == right)\r\n        {\r\n            return true;\r\n        }\r\n        left -= nums[i];\r\n        right += nums[i];\r\n    }\r\n    return (left == right);\r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    int mb = 5;\r\n    int cb = 0;\r\n    int xb = cb*mb;\r\n    while (xb < goal)\r\n    {\r\n        cb = cb + 1;\r\n        xb = cb*mb;\r\n    }\r\n    int sb = goal - xb;\r\n    if (sb > small)\r\n    {\r\n        return -1;\r\n    }\r\n    else\r\n    {\r\n        return sb;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    int xyzloc = str.indexOf(\"xyz\");\r\n    if (xyzloc - 1 == -1)\r\n        return true;\r\n    else if (str.charAt(xyzloc - 1) == '.')\r\n        return false;\r\n    else\r\n        return true;\r\n}\r\n"}
{"context": "", "question": "Consider the series of numbers beginning at start and running up to but not including end, so for example start=1 and end=5 gives the series 1, 2, 3, 4. Return a new String[] array containing the string form of these numbers, except in the case of multiples of 3, use \"Fizz\" instead of the number, and for multiples of 5 use \"Buzz\", and for multiples of both 3 and 5 use \"FizzBuzz\". In Java, String.valueOf(xxx) will make the String form of an int or other type.", "answer": "public String[] fizzBuzz(int start, int end)\r\n{\r\n    String[] str = new String[end - start];\r\n        int count = 0;\r\n        for(int i = start; i < end-1; i++)\r\n        {\r\n        \tcount++;\r\n            str[count] = String.valueOf(i);\r\n            if(i%3==0 && i%5==0)\r\n            {\r\n            str[count] = \"FizzBuzz\";\r\n            }\r\n                       \r\n            if(i % 3 == 0 && i % 3 != 0)\r\n            {\r\n            str[count] = \"Fizz\";\r\n            }\r\n            if(i % 5 == 0 && i % 5 != 0)\r\n            {\r\n            str[count] = \"Buzz\";\r\n            }\r\n        }\r\n    return str;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string str and a non-empty word, return a version of the original string where all chars have been replaced by pluses (+), except for appearances of the word which are preserved unchanged.", "answer": "public String plusOut(String str, String word)\r\n{\r\n    String a;\r\n\r\n        for (int i =0;i < str.length(); i ++){\r\n        if (str.substring(i, i + word.length().equals(word)))\r\n        {\r\n        \ta = a + word;\r\n            i = i + word.length();\r\n        }else\r\n        {\r\n        \ta = a + \"x\";\r\n            i = i + 1;\r\n        }\r\n    }\r\n    return a;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.", "answer": "public int countCode(String str)\r\n{\r\n    int counts = 0;\r\n    for (int i = 0; i < str.length() - 3; i++)\r\n    {\r\n        if (str.charAt(i) == 'c' && \r\n            str.charAt(i + 1) == 'o' &&\r\n           str.charAt(i + 2) == 'e')\r\n        {\r\n            return counts;\r\n        }\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    int l = str.length() - 2;\r\n    \r\n    for (int i = 0; i < l; i++)\r\n    {\r\n        if (str.charAt(i) == 'x' && str.charAt(i + 1) == 'y' && str.charAt(i + \t\t\t\t2) == 'z')\r\n        {\r\n            if (i == 0 || str.charAt(i - 1) != '.')\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;    \r\n}\r\n"}
{"context": "", "question": "Return true if the given string contains a \"bob\" string, but where the middle 'o' character can be any character.", "answer": "public boolean bobThere(String str)\r\n{\r\n    for (int i = 0; i < str.length(); i++)\r\n    {\r\n      if (str.substring(i, i + 1).equals(\"b\") && str.substring(i + 2, i + \t\t 3).equals(\"b\"))\r\n      {\r\n          return true;\r\n          break;\r\n      }\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.", "answer": "public int loneSum(int a, int b, int c)\r\n{\r\n    sum = a + b + c;\r\n    if(a==b)\r\n    {\r\n        sum = sum - b;\r\n    }\r\n    if(a == c)\r\n    {\r\n        sum = sum - c;\r\n    }\r\n    if(b == c)\r\n    {\r\n        sum = sum - c;\r\n    }\r\n    return sum;\r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    String beginning = str.substring(0, 1);\r\n    String ending = str.substring((lenght(str)-2));\r\n    if (beginning.equals(ending))\r\n    {\r\n        return str.substring(length-2);\r\n    }\r\n    return str;\r\n}\r\n"}
{"context": "", "question": "Given an int array of any length, return a new array of its first 2 elements. If the array is smaller than length 2, use whatever elements are present.", "answer": "public int[] frontPiece(int[] nums)\r\n{\r\n    int size = nums.length;\r\n    \r\n    if (size < 2)\r\n        return nums;\r\n    else \r\n       \r\n        return nums;\r\n    \r\n}\r\n"}
{"context": "", "question": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note: str.toLowerCase() returns the lowercase version of a string.", "answer": "public boolean endOther(String a, String b)\r\n{\r\n    a.toLowerCase();\r\n    b.toLowerCase();\r\n    if ((a.indexOf(b) != -1) || (b.indexOf(a) != -1))\r\n    {\r\n        return true; \r\n    }\r\n    else \r\n    {\r\n        return false; \r\n    }\r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.", "answer": "public int countCode(String str)\r\n{\r\n    int times = 0;\r\n\r\n\tint i = 0;\r\n\r\n\tint len = str.length()-3;\r\n\r\n\twhile(i <  len)\r\n\r\n\t{\r\n\r\n\t\tif(str.charAt(i) == 'c' && str.charAt(i+1) == 'o' && str.charAt(i+3) == 'e')\r\n\r\n\t\t{\r\n\r\n\t\t\ttimes++;\r\n\r\n\t\t\ti += 4;\r\n\r\n\t\t}\r\n\r\n\t\telse\r\n\r\n\t\t\ti++;\r\n\r\n\t}\r\n\r\n\treturn times;\r\n}\r\n"}
{"context": "", "question": "Given an array of int values, return true if the group of n numbers at the start of the array is the same as the group of n numbers at the end of the array. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n == 0 and n == 2, and false for n == 1 and n == 3. You may assume that n is in the range 0..nums.length, inclusive.", "answer": "public boolean sameEnds(int[] nums, int n)\r\n{\r\n    int start = 0;\r\n\tint end = nums.length-n;\r\n\tfor(; n > 0; n--)\r\n\t{\r\n\t\tif(nums[start] != nums[end])\r\n\t\t\treturn false;\r\n\t\telse\r\n\t\t{\r\n\t\t\tstart++;\r\n\t\t\tend++;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n    \r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    int num = -1;\r\n    if ((5 * big) + small >= goal)\r\n    {\r\n        num = big % goal;\r\n    }\r\n    return num;\r\n        \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given two strings, a and b, create a bigger string made of the first character of a, the first character of b, the second character of a, the second character of b, and so on. Any leftover characters go at the end of the result.", "answer": "public String mixString(String a, String b)\r\n{\r\n    char charLet1;\r\n    charLet1 = a.charAt(0);\r\n    String stringLet1;\r\n    stringLet1 = String.valueOf(charLet1);\r\n    \r\n    String initialMix;\r\n    initialMix = stringLet1; \r\n    \r\n    for (int i = 0; i < b.length(); i++)\r\n    {\r\n        char charLet;\r\n        charLet = b.charAt(i);\r\n        String stringLet;\r\n        stringLet = String.valueOf(charLet);\r\n        \r\n        \r\n        for (int j = 0; j < a.length(); i++)\r\n        {\r\n            \r\n            // make a new string containing old string and a new letter\r\n        }\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless \"outsideMode\" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.", "answer": "public boolean in1To10(int n, boolean outsideMode)\r\n{\r\n    if ( outsideMode == true && (n <= 1 || n >= 10))\r\n    {\r\n      return true;       \r\n    }\r\n     if (n >= 1 && n <= 10)\r\n         {\r\n             return true;\r\n         }\r\n         else\r\n         {\r\n             return false;\r\n         }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.", "answer": "public int countCode(String str)\r\n{\r\n    \r\n    int num = 0;\r\n    \r\n    for (int i = 0; i < str.length()-2; i++)\r\n    {\r\n        if ((str.charAt(i) == 'c') && (str.charAt(i+1) == 'o') && (str.charAt(i+3) == 'b'))\r\n        {\r\n            num++;  \r\n        }\r\n    }\r\n    return num; \r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\nint bigCapacity = goal/5;\r\n\r\nif (bigCapacity>=big && goal-big*5<=small)\r\n{\r\n return goal-big*5; \r\n}\r\nelse if (bigCapacity<big && goal%5<=small)\r\n{\r\n return goal%5;\r\n}\r\n\r\nelse\r\n{\r\n    return -1;\r\n}\r\n\r\n}      \r\n}\r\n\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    int numba = 0;\r\n\tboolean check = false;\r\n    int q = nums.length - 1;\r\n  for(int i = 0; i < q; i++)\r\n  {\r\n  \t\r\n  \tif(nums[i] == nums[i+1])\r\n  \t{\r\n  \t\tnumba++;\r\n        check = true;\r\n  \t\t\r\n  \t}\r\n      else if(check)\r\n  \t{\r\n\t  \tif(nums[i] != nums[i+1])\r\n\t  \t\tcheck = false;\r\n\t  }\r\n  }\r\n    return numba;\r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    if (str.length() > 2)\r\n    {\r\n    \tif (str.substring(0,2).equals(str.substring(str.length()-2, \t\t\tstr.length())))\r\n        {\r\n        \treturn str.substring(2,str.length());\r\n        }\r\n            \r\n    }\r\n    else\r\n    {\r\n        return \"[\" + str + \"]\";  \r\n    }\r\n   return \"[\" + str + \"]\";\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    //check from variable starting at 0\r\n    //and go until str.length\r\n    int n = 0;\r\n    while (n < str.length() - 2)\r\n        if (str.substring(n, n + 2).equals(\"xyz\"))\r\n            if (str.charAt(n - 1).equals('.'))\r\n                return false;\r\n            else    \r\n            \treturn true;\r\n    \tn++;\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string str and a non-empty word, return a version of the original string where all chars have been replaced by pluses (+), except for appearances of the word which are preserved unchanged.", "answer": "public String plusOut(String str, String word)\r\n{\r\n    int length = str.length();\r\n    String newString = \"\";\r\n    int wordlength = word.length();\r\n\tfor (int x = 0; x < length; x++)\r\n\t{\r\n\t\tif (str.substring(x, x + wordlength).equals(word))\r\n        {\r\n\t\t\t/*newString = str.substring(0, x-1);\r\n            for (int i = 0; i < wordlength; i++)\r\n                 {\r\n                     newString = newString + \"+\";\r\n                 }\r\n            newString = str.substring(x + wordlength, length);*/\r\n            newString += word;\r\n            x++;\r\n            \r\n        }\r\n        else\r\n        {\r\n           newString += \"+\";//nothing;\r\n        }\r\n\t}\r\n    return newString;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is 13 then it does not count towards the sum and values to its right do not count. So for example, if b is 13, then both b and c do not count.", "answer": "public int luckySum(int a, int b, int c)\r\n{\r\n    int sum;\r\n    if ( a == 13);\r\n    {\r\n        sum = 0;\r\n    }\r\n    if (b == 13)\r\n    {\r\n        sum = a + c;\r\n    }\r\n    if (c == 13)\r\n    {\r\n        sum = a + b;\r\n    }\r\n    else\r\n    {\r\n        sum = a + b + c;\r\n    }\r\n    return sum;\r\n}\r\n"}
{"context": "", "question": "Return true if the given string contains a \"bob\" string, but where the middle 'o' character can be any character.", "answer": "public boolean bobThere(String str)\r\n{\r\n     for(int i = 0; i < str.length() - 2; i++) {\r\n        if(str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')\r\n            return true;\r\n    }\r\n                \r\nreturn false;\r\n}\r\n"}
{"context": "", "question": "Return an array that is \"left shifted\" by one--so for an input of {6, 2, 5, 3}, the method returns {2, 5, 3, 6}. You may modify and return the given array, or return a new array.", "answer": "public int[] shiftLeft(int[] nums)\r\n{\r\n    int[] newList = new int[nums.length];\r\n    for (int i = 0; i < nums.length - 1; i++)\r\n    {\r\n        newList[i] = nums[i + 1];\r\n        newList[nums.length - 1] = nums[0];\r\n    }\r\n    return newList;\r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    int strLen = str.length();\r\n    if (strLen < 2)\r\n    {\r\n        return str;\r\n    }\r\n    else if (strLen == 2)\r\n    {\r\n     return \"\";   \r\n    }\r\n    else if (str.substring(1, 2) = str.substring(strLen - 1 , strLen))\r\n    {\r\n     \treturn \"test\";//str.substring(2, strLen);   \r\n    }\r\n    return str;\r\n}\r\n"}
{"context": "", "question": "Consider the series of numbers beginning at start and running up to but not including end, so for example start=1 and end=5 gives the series 1, 2, 3, 4. Return a new String[] array containing the string form of these numbers, except in the case of multiples of 3, use \"Fizz\" instead of the number, and for multiples of 5 use \"Buzz\", and for multiples of both 3 and 5 use \"FizzBuzz\". In Java, String.valueOf(xxx) will make the String form of an int or other type.", "answer": "public String[] fizzBuzz(int start, int end)\r\n{\r\n    String[] output = new String[end - start - 1];\r\n    int j = 0;\r\n    for(int i = start; i < end;i++)\r\n    {\r\n        if (i % 3 == 0 && i % 5 == 0)\r\n        {\r\n            output[j] = \"FizzBuzz\";\r\n            j++;\r\n        }\r\n        else if (i % 3 == 0)\r\n        {\r\n            output[j] = \"Fizz\";\r\n            j++;\r\n        }\r\n        else if (i % 5 == 0)\r\n        {\r\n            output[j] = \"Buzz\";\r\n            j++;\r\n        }\r\n        else\r\n        {\r\n        \toutput[j] = String.valueOf(i);\r\n        \tj++;\r\n        }\r\n    }\r\n    return output;\r\n}\r\n"}
{"context": "", "question": "Consider the series of numbers beginning at start and running up to but not including end, so for example start=1 and end=5 gives the series 1, 2, 3, 4. Return a new String[] array containing the string form of these numbers, except in the case of multiples of 3, use \"Fizz\" instead of the number, and for multiples of 5 use \"Buzz\", and for multiples of both 3 and 5 use \"FizzBuzz\". In Java, String.valueOf(xxx) will make the String form of an int or other type.", "answer": "public String[] fizzBuzz(int start, int end)\r\n{\r\n    String[] arr = new String[start - end];\r\n    for (i = 0; i < start - end; i++)\r\n    {\r\n        int tmp = i+start-1;\r\n\t\t\tint fizz = tmp % 3;\r\n\t\t\tint buzz = tmp % 5;\r\n\t\t\tString s = \"\";\r\n\t\t\tif(fizz==0){\r\n\t\t\t\tif(buzz==0) s = \"FizzBuzz\";\r\n\t\t\t\telse s = \"Fizz\";\r\n\t\t\t}\r\n        \telse{\r\n\t\t\t\tif(buzz==0) s = \"Buzz\";\r\n\t\t\t\telse s = String.valueOf(tmp);\r\n\t\t\t}\r\n\t\t\tarr[i-1] = s;\r\n\t}\r\n\treturn arr;\r\n    \r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.", "answer": "public String repeatEnd(String str, int n)\r\n{\r\n    int length = str.length();\r\n    String newString =  \"\";\r\n    String lastChars = str.substring(n, length);\r\n    int i = 0;\r\n    while (i <= n)\r\n    {\r\n        newString = newString + lastChars;\r\n        i++;\r\n    }\r\n    return newString;    \r\n}\r\n"}
{"context": "", "question": "When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.", "answer": "public boolean cigarParty(int cigars, boolean isWeekend)\r\n{\r\n    if (isWeekend) \r\n    {\r\n        if (cigars >= 40)\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }                   \r\n    }\r\n    else\r\n    {\r\n        if (cigars >= 40 && cigars <= 60)\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        } \r\n        \r\n    }\r\n    \r\n}\r\n"}
{"context": "", "question": "Given an int array of any length, return a new array of its first 2 elements. If the array is smaller than length 2, use whatever elements are present.", "answer": "public int[] frontPiece(int[] nums)\r\n{\r\n    int[] beg;\r\n    if (nums.length >= 2)\r\n    {\r\n     \tbeg = new int[2];\r\n        beg[0] = nums[0];\r\n        beg[1] = nums[1];\r\n    }\r\n        else if (nums.length == 1)\r\n        {\r\n            beg = new int[1];\r\n            beg[0] = nums[0];\r\n        }\r\n        else \r\n        {\r\n         \tbeg = new int[0];   \r\n        }\r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.", "answer": "public int countCode(String str)\r\n{\r\n    int count = 0;\r\n    for (int i = 0; i < str.length() - 3; i++)\r\n    {\r\n        if ('co'.equals(str.substring(i, i + 2)))\r\n        {\r\n            if (str.charAt(i + 3) == 'e')\r\n            {\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    return count;\r\n}\r\n"}
{"context": "", "question": "Return the centered average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array has a length of 3 or more.", "answer": "public int centeredAverage(int[] nums)\r\n{\r\n    int min = 1000;\r\n    int max = -1000;\r\n    int sum = 0;\r\n    int posMin = 0;\r\n    int posMax =0;\r\n    int count = 0;\r\n    for (int i = 0; i<nums.length;i++)\r\n    {\r\n        if(nums[i]<min)\r\n        {\r\n            min=nums[i];\r\n            posMin = i;\r\n        }\r\n        if(nums[i]>max)\r\n        {\r\n            max=nums[i];\r\n            posMax = i;\r\n        }\r\n    }\r\n    if(posMin==posMax)\r\n    {\r\n        posMin++;\r\n    }\r\n    for (int j = 0; j<nums.length; j++)\r\n    {\r\n        if(j!=posMin && j!=posMax)\r\n        {\r\n            sum+=nums[j];\r\n        }\r\n    }\r\n    int avg = sum/count;\r\n    return avg;\r\n}"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    int y = goal % 5;\r\n    int x = y - small;\r\n    int z = 0;\r\n    if (x > 0)\r\n    {\r\n\t\tz = -1;\r\n    }\r\n    else\r\n    {\r\n        z = y;\r\n    }\r\n    return z;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given two strings, a and b, create a bigger string made of the first character of a, the first character of b, the second character of a, the second character of b, and so on. Any leftover characters go at the end of the result.", "answer": "public String mixString(String a, String b)\r\n{\r\n\tint aLen = a.length();\r\n\tint bLen = b.length();\r\n\tint i = 0;\r\n\tStringBuilder stbuild = new StringBuilder(aLen+bLen);\r\n\tfor(; i < aLen && i < bLen; i++)\r\n\t{\r\n\t\tstbuild.append(a.charAt(i));\r\n\t\tstbuild.append(b.charAt(i));\r\n\t}\r\n\t// only 1 for loop will actually run\r\n\tfor(; i < aLen; i++)\r\n\t\tstbuild.append(a.charAt(i));\r\n\tfor(; i < bLen; i++)\r\n\t\tstbuild.append(b.charAt(i));\r\n\treturn stbuild.toString();\r\n}"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    String part1 = str.substring(0,2);\r\n    String part2 = str.substring(-2);\r\n    int length = str.length();\r\n    if ( part1 == part2)\r\n    {\r\n    \tstr = str.substring(2);\r\n        return str;\r\n    }\r\n    else if (length <= 2 && part1 == part2)\r\n    {\r\n    \tstr = ' ';\r\n        return str;\r\n    }\r\n    else \r\n    {\r\n    \treturn str;\r\n    }\r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.", "answer": "public int blackjack(int a, int b)\r\n{\r\n    if ( (a >= 0 && b >= 0) && (a <= 21 || b <= 21))\r\n    {\r\n    \tif ( (21 - a) <= (21 - b))\r\n        {\r\n        \treturn a;\r\n        }\r\n        else\r\n        {\r\n        \treturn b;\r\n        }\r\n    }\r\n    else\r\n    {\r\n    \treturn 0;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given a string str, find all places where a three-letter combination starting with \"z\" and ending with \"p\" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like \"zipXzap\" would produce a result of \"zpXzp\".", "answer": "public String zipZap(String str)\r\n{\r\n    int length = str.length();\r\n    String sub = \"\";\r\n    for (int i = 0; i < length; i++)\r\n    {\r\n        if (str.charAt(i) == 'z' && str.charAt(i + 2) == 'p')\r\n        {\r\n            sub = sub + str.charAt(i) + str.charAt(i + 2);\r\n        }\r\n        else\r\n        {\r\n        }\r\n    }\r\n    return sub;\r\n}\r\n"}
{"context": "", "question": "Given a string str, find all places where a three-letter combination starting with \"z\" and ending with \"p\" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like \"zipXzap\" would produce a result of \"zpXzp\".", "answer": "public String zipZap(String str)\r\n{\r\n    String a = \"\";\r\n    for (int i = 0; i < str.length(); i ++)\r\n    {\r\n    \tif (str.startsWith(\"z\", i) && str.startsWith(\"p\", i + 2))\r\n        {\r\n        \ta = a + \"zp\";\r\n            i = i + 1;\r\n        }else{\r\n        \ta = a + str.charAt(i);\r\n        }\r\n    }\r\n    return a;\r\n}\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n    for (int i = str.length() - 1; i >= 0; i--) {\r\n        if (str.charAt(i) == 'y') {\r\n            return true;\r\n        }\r\n        else if (str.charAt(i) == 'x') {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"}
{"context": "", "question": "Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form \"7:00\" indicating when the alarm clock should ring. Weekdays, the alarm should be \"7:00\" and on the weekend it should be \"10:00\". Unless we are on vacation--then on weekdays it should be \"10:00\" and weekends it should be \"off\".", "answer": "public String alarmClock(int day, boolean vacation)\r\n{\r\n    if ((day == 0 || day == 6) && vacation)\r\n    {\r\n        return (\"off\");\r\n    }\r\n    if(day == 0 || day == 6 || vacation)\r\n    {\r\n     \treturn (\"10:00\");   \r\n    }\r\n    else\r\n    {\r\n     \treturn (\"7:00\");   \r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    int i=0; \r\n    if(str.length()>=3)\r\n    {\r\n        while (!str.substring(i, i+3).equals (\"xyz\") && i+4<= str.length())\r\n   \t\t{\r\n       \t \ti=i+1;\r\n    \t}\r\n        if (str.substring(i-1, i+3).equals (\".xyz\"))\r\n        {\r\n            return false;\r\n        } \r\n    \treturn str.substring(i, i+3).equals (\"xyz\");\r\n            \r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    int s = goal % 5;\r\n    if(s == 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if(s + big*5 > goal)\r\n    {\r\n        return -1;\r\n    }\r\n    return s;\r\n}\r\n"}
{"context": "", "question": "Given an array of int values, return true if the group of n numbers at the start of the array is the same as the group of n numbers at the end of the array. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n == 0 and n == 2, and false for n == 1 and n == 3. You may assume that n is in the range 0..nums.length, inclusive.", "answer": "public boolean sameEnds(int[] nums, int n)\r\n{\r\n    int start = 0;\r\n\tint end = nums.length-n;\r\n\tfor(; n > 0; n--)\r\n\t{\r\n\t\tif(nums[start] != nums[end])\r\n\t\t\treturn false;\r\n\t\telse\r\n\t\t{\r\n\t\t\tstart++;\r\n\t\t\tend++;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n"}
{"context": "", "question": "Given an int array of any length, return a new array of its first 2 elements. If the array is smaller than length 2, use whatever elements are present.", "answer": "public int[] frontPiece(int[] nums)\r\n{\r\n    if (nums.length = 0)\r\n    {\r\n        int[] newNums = new int[0];\r\n    }\r\n    \r\n    else if (nums.length = 1)\r\n    {\r\n        int[] newNums = new int[1];\r\n        newNums[0] = nums[0];\r\n    }\r\n    else\r\n    {\r\n        int[] newNums = new int[2];\r\n        newNums[0] = nums[0];\r\n        newNums[1] = nums[1];\r\n    }\r\n    \r\n    return newNums;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.", "answer": "public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)\r\n{\r\n    if(isAsleep)\r\n\t\treturn false;\r\n\tif(isMom)\r\n\t\treturn true;\r\n\treturn (!isMorning);\r\n    \r\n}\r\n"}
{"context": "", "question": "You and your date are trying to get a table at a restaurant. The parameter you is the stylishness of your clothes, in the range 0..10, and date is the stylishness of your date's clothes. Write a method that returns your chances of getting a table, encoded as an int value with 0 = no, 1 = maybe, 2 = yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).", "answer": "public int dateFashion(int you, int date)\r\n{\r\n \tif(you <= 2 || date <= 2)\r\n    {\r\n    \treturn 0;\r\n    }\r\n    \r\n    else if(you >=8 || date>=8)\r\n    {\r\n    \treturn 2;\r\n    }\r\n    \r\n    else\r\n    {\r\n    \treturn 1;\r\n    }\r\n    \r\n    return 1;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\n    if (!isBirthday)\r\n    {\r\n    \r\n   if (speed <= 60 )\r\n   {\r\n   return 0;\r\n   }\r\n    else if (speed > 60 && speed <= 80)\r\n    {\r\n    return 1;\r\n    }\r\n    else \r\n    {\r\n    return 2;\r\n    }\r\n    }\r\n    else\r\n    {\r\n        if (speed <= 65 )\r\n   {\r\n   return 0;\r\n   }\r\n    else if (speed > 65 && speed <= 85)\r\n    {\r\n    return 1;\r\n    }\r\n    else \r\n    {\r\n    return 2;\r\n    }\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.", "answer": "public boolean canBalance(int[] nums)\r\n{\r\n    int size = nums.length;\r\n    int sum1 = 0;\r\n    int sum2 = 0;\r\n    int k = size - 1;\r\n    int i = 0;\r\n    int j = 0;\r\n    while (j < size)\r\n    {\r\n        if (k < (size - 1)/2)\r\n            return false;\r\n    for (; k > size - i; k--)\r\n    {\t\r\n        sum2 = nums[k];    \r\n    }\r\n    for (; i < size - k; i++)\r\n    {\r\n            sum1 += nums[i];\r\n    }\r\n        if (sum1 == sum2)\r\n\t\treturn true;\r\n    i++;\r\n    k--;\r\n    sum1 = 0;\r\n    sum2 = 0;\r\n    }\r\n    \r\n    return false;\r\n\r\n    \r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if the array contains two 7s next to each other, or there are two 7s separated by one element, such as with {7, 1, 7}. Otherwise, return false.", "answer": "public boolean has77(int[] nums)\r\n{\r\n    for (int i=0;i<nums.length-1;i++) {\r\n     \tif (nums[i] == 7 && nums[i+1] ==7) {\r\n         return true;   \r\n        }\r\n    }\r\n    for (int i=0;i<nums.length-2;i++) {\r\n        if (nums[i] ==7 && nums[i+2] ==7 && i<nums.length-2) {\r\n         return true;   \r\n        }\r\n    }\r\n            \r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string str and a non-empty word, return a version of the original string where all chars have been replaced by pluses (+), except for appearances of the word which are preserved unchanged.", "answer": "public String plusOut(String str, String word)\r\n{\r\n    int length = str.length();\r\n    int wordLength = word.length();\r\n    String plusStr = \"\";\r\n    for ( int i = 0; i < length; i ++)\r\n    {\r\n        if ( i <= length - wordLength )\r\n        {\r\n            if ( str.substring(i,\r\n                               i + wordLength).equals(word) )\r\n            {\r\n                plusStr = plusStr + word;\r\n                i = i + wordLength;\r\n            }\r\n            else\r\n            {\r\n                plusStr = plusStr + \"+\";\r\n            }\r\n        }\r\n        else\r\n        {\r\n            plusStr = plusStr + \"+\";\r\n        }\r\n    }\r\n    return plusStr;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.", "answer": "public boolean evenlySpaced(int a, int b, int c)\r\n{\r\n    if ( num.abs(a - b) == num.abs(b - c))\r\n        return true;\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n   boolean ychar = false;\r\n   for (int i = str.length() - 1; i >= 0; i--)\r\n        {\r\n       \t\tif(str.charAt(i) == 'y') //true when every x is balanced with a y after\r\n            {\r\n                ychar = true;\r\n                return true;\r\n            }\r\n        \tif(!ychar && str.charAt(i) == 'x')\r\n            {\r\n                return false;\r\n            }\r\n   \t\t}\r\n    return true;\r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if the array contains two 7s next to each other, or there are two 7s separated by one element, such as with {7, 1, 7}. Otherwise, return false.", "answer": "public boolean has77(int[] nums)\r\n{\r\n    for (int i = 0; i < nums.length - 1; i++)\r\n    {\r\n        if(nums[i] == 7 && nums[i+1] == 7) \r\n           {return true;}\r\n    }\r\n      \r\n    for (int i = 0; i < nums.length - 2; i++)\r\n    {\r\n        if (nums[i] == 7 && nums[i+2] == 7)\r\n        {return true;}\r\n      \r\n    }  \r\n        return false;\r\n    \r\n         \r\n         }"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    int len = str.length();\r\n    if (str(0) == str(len - 2) && str(1) == str(len - 1))\r\n    {\r\n            return str.substring(2,len);\r\n    }\r\n    else\r\n    {\r\n        return str;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given an array, return an array that contains exactly the same numbers as the original array, but rearranged so that every 4 is immediately followed by a 5. Do not move the 4's, but every other number may move. The array contains the same number of 4's and 5's, and every 4 has a number after it that is not a 4. In this version, 5's may appear anywhere in the original array. (This is a slightly harder version of the fix34 problem.)", "answer": "public int[] fix45(int[] nums)\r\n{\r\n    for (int i = 0; i < nums.length-1; i++)\r\n    {\r\n        if (nums[i] == 4)\r\n        {\r\n            int y = 0;\r\n            for (int x = 0; x < nums.length-1; x++)\r\n            {\r\n                if (nums[x] == 5)\r\n                {\r\n                    y = x;\r\n                    break;\r\n                }\r\n            }\r\n            nums[i+y] = nums[i+1];\r\n            nums[i+1] = 5;\r\n        }\r\n    }\r\n    return nums;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that takes an array and returns the sum of the numbers in the array, or 0 if the array is empty. Except the number 13 is very unlucky, so it does not count any 13, or any number that immediately follows a 13.", "answer": "public int sum13(int[] nums)\r\n{\r\n  int total = 0;\r\n    for (int i = 0; i < nums.length+1 ; i++)\r\n    { \r\n        if (nums[i] != 13 && i-1>=0 && nums[i-1] != 13)\r\n        {\r\n   total = total + nums[i];\r\n        }\r\n}\r\n    return total;\r\n    \r\n}\r\n"}
{"context": "", "question": "Given n >= 0, create an array with the pattern {1, 1, 2, 1, 2, 3, ... 1, 2, 3 .. n} (spaces added to show the grouping). Note that the length of the array will be 1 + 2 + 3 ... + n, which is known to sum to exactly n * (n + 1)/2.", "answer": "public int[] seriesUp(int n)\r\n{\r\n    int[] series = new int[n];\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        for (int x = 0; x < i; x++)\r\n        {\r\n            series[i] = x;\r\n        }\r\n    }\r\n    return series;\r\n}\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "boolean afterY = false;\r\nboolean isBalanced = true;\r\npublic boolean xyBalance(String str)\r\n{\r\n\tfor (int i = str.length() - 1; i >= 0 ; i--)\r\n    {\r\n        if (str.charAt(i) == 'y')\r\n        {\r\n            afterY = true;\r\n        }\r\n        \r\n        if (!afterY || str.charAt(i) == 'x')\r\n        {\r\n            isBalanced = false;\r\n        }\r\n    }\r\n   return isBalanced;\r\n}\r\n"}
{"context": "", "question": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note: str.toLowerCase() returns the lowercase version of a string.", "answer": "public boolean endOther(String a, String b)\r\n{\r\n    a = a.toLowerCase();\r\n    b = b.toLowerCase();\r\n    \r\n    if (a.endsWith(b) || b.endsWith(a)) {\r\n    \treturn true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Return the centered average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array has a length of 3 or more.", "answer": "public int centeredAverage(int[] nums)\r\n{\r\n \treturn 0;   \r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if every 2 that appears in the array is next to another 2. Otherwise, return false.", "answer": "public boolean twoTwo(int[] nums)\r\n{\r\n    int len = nums.length;\r\n    boolean allHave = true;\r\n\tfor (int i = 0; i < len; i++)\r\n    {\r\n        if (nums[i]==2)\r\n        {\r\n            if (i == 0)\r\n            {\r\n                if (nums[i+1] != 2)\r\n                {\r\n                    return false;\r\n                }\r\n            }\r\n            else if (i == len-1)\r\n            {\r\n                if (nums[i-1] != 2)\r\n                {\r\n                    return false;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (nums[i-1] != 2 && nums[i+1] != 2)\r\n                {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"}
{"context": "", "question": "We'll say that a value is \"everywhere\" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.", "answer": "public boolean isEverywhere(int[] nums, int val)\r\n{\r\n    for (int i = 0; i < nums.length - 1; i++) {\r\n        if (nums[i] != val && nums[i + 1] != val) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Return a version of the given array where each zero value in the array is replaced by the largest odd value to the right of the zero in the array. If there is no odd value to the right of the zero, leave the zero as a zero. Hint: in solving this: you may use a second helper function if you want, say to find the largest odd value to the right of a specified position.", "answer": "public int[] zeroMax(int[] nums)\r\n{\r\n    int length = nums.length;\r\n    int largest = 0;\r\n    counter = counter + 1;\r\n    while (nums[counter] != 0)\r\n    {\r\n        counter = counter + 1;\r\n    }\r\n    int[] newArray = new int[length];\r\n    for (int i = counter; i < length; i++)\r\n    {\r\n        if (nums[i] > 0)\r\n        {\r\n            largest = nums[i];\r\n        } \r\n    }\r\n    if (largest > 0)\r\n    {\r\n        for (int i = 0; i < length; i++)\r\n        {\r\n            if (i != location0)\r\n            {\r\n                newArray[i] = nums[i];\r\n            }\r\n            else\r\n            {\r\n                newArray[i] = largest;\r\n            }\r\n        }\r\n    }\r\n    return newArray;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.", "answer": "public boolean evenlySpaced(int a, int b, int c)\r\n{\r\n    if (a>b && c<b) {\r\n        if (a-b == b-c) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n    if (b>a && c<a) {\r\n        if (b-a == a-c) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n    if (c>b && a<c) {\r\n        if (c-b == b-a) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n}\r\n"}
{"context": "", "question": "Return the centered average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array has a length of 3 or more.", "answer": "public int centeredAverage(int[] nums)\r\n{\r\n    int highest = 0;\r\n    int lowest = 0;\r\n    int sum = 0;\r\n    int counter = 0;\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n      \tif (nums[i] > highest)\r\n        {\r\n            highest = nums[i];\r\n        }\r\n        if (nums[i] < lowest)\r\n        {\r\n            lowest = nums[i];\r\n        }\r\n    }\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        if (nums[i] == highest)\r\n        {\r\n            nums[i].remove();\r\n        }\r\n        else if (nums[i] == lowest)\r\n        {\r\n            nums[i].remove();\r\n        }\r\n        else\r\n        {\r\n            sum += nums[i];\r\n            counter++;\r\n        }\r\n    }\r\n    return sum / counter;\r\n}\r\n"}
{"context": "", "question": "The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.", "answer": "public boolean love6(int a, int b)\r\n{\r\n    if (a == 6 || b == 6)\r\n    {\r\n        return true;\r\n    }\r\n    else if (a + b == 6)\r\n    {\r\n        return true;\r\n    }\r\n    else if (Math.abs(a-b) == 6)\r\n    {\r\n        return true;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless \"outsideMode\" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.", "answer": "public boolean in1To10(int n, boolean outsideMode)\r\n{\r\n    boolean range = false;\r\n    if (n >= 1 && n <= 10)\r\n    {\r\n        range = true;\r\n    }\r\n    if (outsideMode == true)\r\n    {\r\n        if (n <= 1)\r\n        { \r\n            range = true;\r\n        }\r\n        else if (n >= 10)\r\n        {\r\n            range = true;\r\n        }\r\n        else \r\n        {\r\n            range = false;\r\n        }\r\n    }\r\n    return range;\r\n}\r\n"}
{"context": "", "question": "Given an array of int values, return true if the group of n numbers at the start of the array is the same as the group of n numbers at the end of the array. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n == 0 and n == 2, and false for n == 1 and n == 3. You may assume that n is in the range 0..nums.length, inclusive.", "answer": "public boolean sameEnds(int[] nums, int n)\r\n{\r\n    if (n == 0)\r\n    {\r\n        return true;\r\n    }\r\n    if (n <= nums.length)\r\n    {\r\n        int[] firstgroup = new int[n];\r\n        int[] lastgroup = new int[n];\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            firstgroup[i] = nums[i];\r\n        }\r\n        int p = nums.length;\r\n        for (int o = nums.length - n; o < nums.length; o++)\r\n        {\r\n            int r = nums.length - p;\r\n            lastgroup[r] = nums[o];\r\n            p = p - 1;\r\n        }\r\n        if (firstgroup.equals(lastgroup))\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.", "answer": "public int sortaSum(int a, int b)\r\n{\r\n    if ( a + b >= 10 && a + b <= 19)\r\n        return 20;\r\n    else\r\n        return a + b;\r\n}\r\n"}
{"context": "", "question": "You and your date are trying to get a table at a restaurant. The parameter you is the stylishness of your clothes, in the range 0..10, and date is the stylishness of your date's clothes. Write a method that returns your chances of getting a table, encoded as an int value with 0 = no, 1 = maybe, 2 = yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).", "answer": "public int dateFashion(int you, int date)\r\n{\r\n    if(you <= 2 || date <= 2)\r\n\t\treturn 0;\r\n\tif(you >= 8 || date >= 8)\r\n\t\treturn 2;\r\n\treturn 1;\r\n}\r\n"}
{"context": "", "question": "Given an int array, return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 7 (every 6 will be followed by at least one 7). Return 0 for no numbers.", "answer": "public int sum67(int[] nums)\r\n{\r\n\t   int sum = 0;\r\n    boolean sixseven = false;\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        if(sixseven)\r\n        {\r\n            if(nums[i] == 7)\r\n                sixeseven = false;\r\n        }\r\n        else if(nums[i] == 6)\r\n        {\r\n            sixseven = true;\r\n        }\r\n    \tsum = sum + nums[i];\r\n    }\r\n    return sum;\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    if (str.startsWith(\"bread\") && str.endsWith(\"bread\"))\r\n    {\r\n        String bread = \"bread\";\r\n        String reBread = bread + \"\";\r\n        String stri = str.replaceAll(reBread, \"\");\r\n        reBread = \"\" + bread;\r\n        stri = str.replaceAll(reBread, \"\");\r\n        return stri;\r\n    }\r\n    else\r\n    {\r\n        return \"\";\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    \r\n    if (str.substring(0,2) == str.substring(str.length()-1))\r\n        {\r\n         \tstr = str.substring(2);    \r\n        }\r\n        else\r\n        {\r\n         \tstr = str;   \r\n        }\r\n        return str;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.", "answer": "public String repeatEnd(String str, int n)\r\n{\r\n    String last = str.substring(str.length() - n);\r\n    for (int i = 0; i<n; i++)\r\n    {\r\n        last = last + last;\r\n    }\r\n    return last;\r\n        \r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    int result = 0;\r\n    \r\n    int x = goal / 5; // this returns number of big chocolates\r\n    int y = goal % 5; // this returns number of small chocolate\r\n    \r\n    int x = goal / 5;\r\n    int y = goal % 5;\r\n\r\n    if (x > big) \r\n    {\r\n        y = (x - big) * 5;\r\n    }\r\n    if (y > small)\r\n    {\r\n        return -1 ;\r\n    }\r\n    else\r\n    {\r\n        return y ;\r\n    }\r\n\r\n}\r\n    \r\n    \r\n"}
{"context": "", "question": "Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.", "answer": "public boolean canBalance(int[] nums)\r\n{\r\n    int total = 0;\r\n    int length = nums.length;\r\n    for ( int i = 0; i < length; i++ )\r\n    {\r\n        total += nums[i];\r\n    }\r\n    \r\n    if ( total % 2 == 1 )\r\n    {\r\n        return false;\r\n    }\r\n    else\r\n    {\r\n        if ( total == 0 && length == 1 )\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n        \tint smallTotal = 0;\r\n        \tint j = 0;\r\n        \twhile ( smallTotal < total / 2 )\r\n        \t{\r\n            \tsmallTotal += nums[j];\r\n            \tj++;\r\n        \t}\r\n        \treturn ( smallTotal == ( total / 2 ) );\r\n        }\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given an array of int values, return true if the group of n numbers at the start of the array is the same as the group of n numbers at the end of the array. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n == 0 and n == 2, and false for n == 1 and n == 3. You may assume that n is in the range 0..nums.length, inclusive.", "answer": "public boolean sameEnds(int[] nums, int n)\r\n{\r\n    for (int i = 0, j = nums.length - n; i < n; i++, j++)\r\n        if(nums[i] != nums[j]) return false;\r\n    return true;\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    int i = 0;\r\n   \tif (i+10 >= str.length())\r\n    {\r\n        while (str.substring(i, i+5) != \"bread\" &&\r\n           i+5 <= str.length() )\r\n   \t\t {\r\n       \t\t i=i+1;\r\n   \t\t }\r\n        if (str.substring(i, i+5).equals(str.substring\r\n                                              (str.length()-(i+5), \r\n                                                  str.length()-i))\r\n               && str.substring(i, i+5).equals(\"bread\"))\r\n   \t\t {\r\n      \t\t  return str.substring(i+5, str.length() -(i+5));\r\n   \t\t }\r\n    }\r\n    \r\n    \r\n    else \r\n        {\r\n            return \"\";\r\n        }\r\n    return;\r\n}\r\n\r\n"}
{"context": "", "question": "Given an array of int values, return true if the group of n numbers at the start of the array is the same as the group of n numbers at the end of the array. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n == 0 and n == 2, and false for n == 1 and n == 3. You may assume that n is in the range 0..nums.length, inclusive.", "answer": "public boolean sameEnds(int[] nums, int n)\r\n{\r\n\tfor (int i = 0, j = nums.length - n; i < n; i++, j++)\r\n        if (nums[i] != nums[j]) return false;\r\n    return true;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.", "answer": "public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)\r\n{\r\n    \tif(isAsleep)\r\n\t\treturn false;\r\n\tif(isMom)\r\n\t\treturn true;\r\n    if (!isMorning)\r\n        return true;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    for (int i = 0; i < str.length() - 2; i++)\r\n    {\r\n        if (str.charAt(i) == 'x' && str.charAt(i + 1) == 'y' && str.charAt(i + 2) == 'z')\r\n        {\r\n            return(i == 0 || str.charAt(i - 1) != '.');\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\n\tif (speed <= 60) {\r\n        return 0;\r\n    }\r\n        else if (speed > 60 && speed <81) {\r\n            return 1;\r\n        }\r\n            else {\r\n                return 2;\r\n        }\r\n    if (isBirthday);\r\n    \t if (speed <= 65) {\r\n             return 0;\r\n         }\r\n    else if (speed > 65 && speed < 86) {\r\n        return 1;\r\n    }\r\n    else {\r\n        return 2;\r\n    }\r\n}\r\n       "}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless \"outsideMode\" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.", "answer": "public boolean in1To10(int n, boolean outsideMode)\r\n{\r\n    if (outsideMode)\r\n    {\r\n     if (n <= 1 || n >= 10)\r\n     \treturn true;\r\n        }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n   \r\n\t}\t\r\nelse\r\n{\r\n    if ( n>= 1 && n<= 10)\r\n    {       return true;\r\n    }\r\n    else \r\n    {\r\n        return false;\r\n    }\r\n}\r\n\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You have a red lottery ticket showing ints a, b, and c, each of which is 0, 1, or 2. If they are all the value 2, the result is 10. Otherwise if they are all the same, the result is 5. Otherwise so long as both b and c are different from a, the result is 1. Otherwise the result is 0.", "answer": "public int redTicket(int a, int b, int c)\r\n{\r\n    int result = 0;\r\n    if (a == 2 && b == 2 && c == 2)\r\n        result = 10;\r\n    else if (a == b && b == c)\r\n        result = 5;\r\n    else if (a != b && a != c)\r\n        result = 1;\r\n    else\r\n        result = 0;\r\n    return result;\r\n}\r\n"}
{"context": "", "question": "For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a, b, and c, return the sum of their rounded values. To avoid code repetition, write a separate helper public int round10(int num) and call it 3 times. Write the helper entirely below and at the same indent level as roundSum().", "answer": "public int roundSum(int a, int b, int c)\r\n{\r\n    return (round10(a) + round10(b) + round10(c));\r\n}\r\n\r\npublic int round10(int num)\r\n{\r\n    int rounded = num % 10;\r\n    if (rounded >= 5)\r\n    {\r\n        return (10 - rounded) + num;\r\n    }\r\n    return num - rounded;\r\n}\r\n"}
{"context": "", "question": "We'll say that a value is \"everywhere\" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.", "answer": "public boolean isEverywhere(int[] nums, int val)\r\n{\r\n    boolean x = true;\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n     \tif ((i + 1) != nums.length)\r\n        {\r\n            if (nums[i] == val || nums[i+1] == val)\r\n            {\r\n                x = true;\r\n            }\r\n            else\r\n            {\r\n                x = false;\r\n            }\r\n        }\r\n    }\r\n    return x;\r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if the array contains two 7s next to each other, or there are two 7s separated by one element, such as with {7, 1, 7}. Otherwise, return false.", "answer": "public boolean has77(int[] nums)\r\n{\r\n    for(int i = 0; i < nums.length - 1; i++)\r\n    {\r\n        if(nums[i] == 7)\r\n        {\r\n            if(nums[i+1] == 7)\r\n            {\r\n                return true;\r\n            }\r\n            else if(i < nums.length - 2 && nums[i+2] == 7)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Given an array containing three ints, return the sum of all the elements.", "answer": "public int sum3(int[] nums)\r\n{\r\n    int total = 0;\r\n    for ( int i = 0; i < nums.length; i++ )\r\n    {\r\n        total += nums[i];\r\n    }\r\n    return total;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    int index = str.indexOf(\"xyz\");\r\n    int indexa = str. indexOf(\".\");\r\n    if (indexa +1 == index)\r\n    {\r\n        return false;\r\n    }\r\n    else\r\n    {\r\n        return true;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is 13 then it does not count towards the sum and values to its right do not count. So for example, if b is 13, then both b and c do not count.", "answer": "public int luckySum(int a, int b, int c)\r\n{\r\n    if ( a == 13)\r\n    {\r\n        return 0;\r\n    }\r\n    else if ( b == 13)\r\n    {\r\n        return a;\r\n    }\r\n    else if (c == 13)\r\n    {\r\n        return a + b;\r\n    }\r\n    else\r\n    {\r\n        return a + b + c;\r\n    }\r\n    \r\n}\r\n"}
{"context": "", "question": "Return the centered average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array has a length of 3 or more.", "answer": "public int centeredAverage(int[] nums)\r\n{\r\n    int max = nums[0];\r\n    int min = nums[0];\r\n    int sum = nums[0];\r\n    for (int i = 1; i < nums.length; i++)\r\n    {\r\n     \tsum += nums[i];\r\n        if(nums[i] > max)\r\n        {\r\n         \tmax = nums[i];   \r\n        }\r\n        else if (nums[i] < min)\r\n        {\r\n         \tmin = nums[i];   \r\n        }\r\n    }\r\n    return (sum - max - min)/(nums.length - 2);\r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    if (goal >= 5)\r\n    {\r\n        if (goal/5 >= big)\r\n        {\r\n            goal -= big * 5;\r\n        }\r\n        else \r\n        {\r\n            goal = goal % 5;\r\n            }\r\n    }\r\n            if (goal <= small)\r\n            return goal;\r\n            return 01;\r\n}\r\n"}
{"context": "", "question": "Given an int[] array, write a function that returns an array where all the 10's have been removed. The remaining elements should shift left towards the start of the array as needed, and the empty spaces at the end of the array should be set to 0. So {1, 10, 10, 2} yields {1, 2, 0, 0}. You may modify and return the given array or make a new array.", "answer": "public int[] withoutTen(int[] nums)\r\n{\r\n    int[] newArray = new int[nums.length];\r\n    int c = 0;\r\n    int l = nums.length;\r\n    for(int i = 0; i < l; i++)\r\n    {\r\n        if(nums[i] % 10 == 1)\r\n        {\r\n            newArray[i] = nums[i];\r\n            c++;\r\n        }\r\n    }\r\n    \r\n    for(int d = c; d < l; d++)\r\n    {\r\n        newArray[d] = 0;\r\n    }\r\n    return newArray;\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    String newst = \"\";\r\n    int y = str.length();\r\n    for(int x = 0; x < str.length(); x++)\r\n    {\r\n        if (str.length() < 10)\r\n        {\r\n            break;\r\n        }\r\n        if (str.substring(x).startsWith(\"bread\"))\r\n        {\r\n            for (int a = 0; a < str.length(); a++)\r\n            {\r\n                if(str.substring(x, y-a).endsWith(\"bread\"))\r\n                {\r\n                    newst = newst+str.substring(x+5, y-a);\r\n                    break;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    return newst;\r\n    \r\n}\r\n"}
{"context": "", "question": "Given an int[] array, write a function that returns an array where all the 10's have been removed. The remaining elements should shift left towards the start of the array as needed, and the empty spaces at the end of the array should be set to 0. So {1, 10, 10, 2} yields {1, 2, 0, 0}. You may modify and return the given array or make a new array.", "answer": "public int[] withoutTen(int[] nums)\r\n{\r\n    int[] newArray = new int[nums.length];\r\n    int c = 0;\r\n    int l = nums.length;\r\n    for(int i = 0; i < l; i++)\r\n    {\r\n        if(nums[i] % 10 != 1)\r\n        {\r\n            newArray[i] = nums[i];\r\n            c++;\r\n        }\r\n    }\r\n    \r\n    for(int d = c; d < l; d++)\r\n    {\r\n        newArray[d] = 0;\r\n    }\r\n    return newArray;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.", "answer": "public boolean evenlySpaced(int a, int b, int c)\r\n{\r\n   if ( (a-b = b-c) || (b-a = a-c) || (c-a == a-b))\r\n   {\r\n       return true;\r\n   }\r\n   return false;\r\n}\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n    int size = str.length()-1;\r\n    boolean truth = false;\r\n    \r\n    for (int i = 0; i < size; i++)\r\n        if (str.charAt(i) == 'x')\r\n            for (int j = i+1; j < size + 1; j++)\r\n                if (str.charAt(j) !='y')\r\n                    truth = false;\r\n                else \r\n                    return true;\r\n    \telse\r\n            truth = true;\r\n    return truth;\r\n    \r\n            \r\n    \r\n}\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    int length = nums.length;\r\n    int count = 0;\r\n    for (int i = 0; i < length - 1; i++){\r\n\t\tif(nums[i] == nums[i + 1]){\r\n            int j = i;\r\n            while (nums[i] == nums[j + 1] && nums[j + 1] == nums[j + 2]){\r\n                j = j + 1;\r\n            }\r\n        i = j;\r\n        count = count + 1;\r\n        }\r\n    }\r\n    return count;\r\n}\r\n"}
{"context": "", "question": "Given an array containing three ints, return the sum of all the elements.", "answer": "public int sum3(int[] nums)\r\n{\r\n    int sum;\r\n    for (int sum3 : nums)\r\n    {\r\n        sum += nums;\r\n    }\r\n    return sum;\r\n}\r\n"}
{"context": "", "question": "Return the centered average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array has a length of 3 or more.", "answer": "public int centeredAverage(int[] nums)\r\n{\r\n    int largest = -1000;\r\n    int smallest = 1000;\r\n    int sum = 0;\r\n    for (int i = 0; i < nums.length; i++)\r\n        if (nums[i] > largest)\r\n        {\r\n            largest = nums[i];\r\n        }\r\n        if (nums[i] < smallest)\r\n        {\r\n            smallest = nums[i];\r\n        }\r\n        sum += num;\r\n    int average = (sum - largest - smallest) / (nums.length - 2);\r\n        \r\n}\r\n"}
{"context": "", "question": "Given an array of int values, return true if the group of n numbers at the start of the array is the same as the group of n numbers at the end of the array. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n == 0 and n == 2, and false for n == 1 and n == 3. You may assume that n is in the range 0..nums.length, inclusive.", "answer": "public boolean sameEnds(int[] nums, int n)\r\n{\r\n    int[] one = new int[n];\r\n    int[] two = new int[n];\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        one[i] = nums[i];\r\n    }\r\n    \r\n    for (int i = nums.length - n; i < nums.length; i++)\r\n    {\r\n        two[i] = nums[i];\r\n        \r\n    }\r\n    if(n == 0)\r\n    {\r\n        return true;\r\n    }\r\n    \r\n    if(one.equals(two))\r\n    {\r\n        return true;\r\n    }\r\n    return false;\r\n        \r\n}\r\n"}
{"context": "", "question": "Return the centered average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array has a length of 3 or more.", "answer": "public int centeredAverage(int[] nums)\r\n{\r\n    int sum = 0;\r\n    int min = nums[0];\r\n    int max = nums[0];\r\n    for (int i =0;i<nums.length;i++)\r\n    {\r\n        sum += nums[i];\r\n        min = Math.min(min, nums[i]);\r\n        max = Math.max(max, nums[i]);\r\n    }\r\n    sum = sum-max;\r\n    sum = sum -min;\r\n    sum = sum/(nums.length-2);\r\n    return sum;\r\n}\r\n"}
{"context": "", "question": "Given a string str, find all places where a three-letter combination starting with \"z\" and ending with \"p\" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like \"zipXzap\" would produce a result of \"zpXzp\".", "answer": "public String zipZap(String str)\r\n{\r\n    int l = str.length() - 2;\r\n    for(int j = 0; j < l; j++)\r\n    {\r\n     \tif (str.charAt(j) == 'z')\r\n        {\r\n         \tif (str.charAt(j + 2) == 'p')\r\n            {\r\n             \tString c = str.substring(j + 1 , j + 2);\r\n                str = str.replace(c, \"\");\r\n                j++;\r\n            }\r\n        }\r\n    }\r\n    return str;\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    int length = str.length();\r\n    if (startsWith(\"bread\") && endsWith(\"bread\"))\r\n    {\r\n        return substring (6, length-6);\r\n    }\r\n    else\r\n    {\r\n        return \"\";\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string, return a string made of its first 2 chars. If the string length is less than 2, use '@' for the missing chars.", "answer": "public String atFirst(String str)\r\n{\r\n\tint len = str.length();\r\n\tif(len >= 2)\r\n\t\treturn str.substring(0, 2);\r\n\telse if(len == 1)\r\n\t\treturn (str.charAt(0)+\"@\");\r\n\telse\r\n\t\treturn \"@@\";\r\n}\r\n"}
{"context": "", "question": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note: str.toLowerCase() returns the lowercase version of a string.", "answer": "public boolean endOther(String a, String b)\r\n{\r\n    a = a.toLowerCase();\r\n\tb = b.toLowerCase();    \r\n    return(a.lastIndexOf(b)<a.length()-b.length()||b.lastIndexOf(a)<b.length()-a.length());\r\n}\r\n"}
{"context": "", "question": "Return true if the given string contains a \"bob\" string, but where the middle 'o' character can be any character.", "answer": "public boolean bobThere(String str)\r\n{\r\n    \r\n    \r\n    for(int i = 0; i < str.length(); i++)\r\n    {\r\n        if(str.substring(i, i+1).compareTo(\"b\") == 0)\r\n           {\r\n                       if(str.substring(i+2, i+3).compareTo(\"b\") == 0)\r\n                       {\r\n                       return true;\r\n                       }\r\n           }\r\n    }\r\n    if(str.compareTo(\"abcdefb\") == 0)\r\n    {\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n         return false;\r\n    }\r\n   \r\n}\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    int total = 0;\r\n    for (int i = 0; i < nums.length - 1; i++) {\r\n        if (nums[i] == nums[i+1]) {\r\n            total = total + 1;\r\n        }\r\n    }\r\n    return total;\r\n}\r\n"}
{"context": "", "question": "Given an int array of any length, return a new array of its first 2 elements. If the array is smaller than length 2, use whatever elements are present.", "answer": "public int[] frontPiece(int[] nums)\r\n{\r\n    if(nums.length >= 2)\r\n    {\r\n        nums = new int[]{nums[0], nums[1]};\r\n    }\r\n    else if(nums.length == 0)\r\n    {\r\n        nums = new int[0];\r\n    }\r\n    else if(nums.length < 2)\r\n    {\r\n        nums = new int[]{nums[0]};\r\n    }\r\n    return nums;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.", "answer": "public boolean squirrelPlay(int temp, boolean isSummer)\r\n{\r\n    if (isSummer)\r\n    \tif (60 <= temp && temp <= 100)\r\n            return true;\r\n    \telse\r\n            return false;\r\n    else if (60 <= temp && temp <= 90)\r\n        return true;\r\n       else\r\n           return false;\r\n}\r\n"}
{"context": "", "question": "Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form \"7:00\" indicating when the alarm clock should ring. Weekdays, the alarm should be \"7:00\" and on the weekend it should be \"10:00\". Unless we are on vacation--then on weekdays it should be \"10:00\" and weekends it should be \"off\".", "answer": "public String alarmClock(int day, boolean vacation)\r\n{\r\n   \tif (vacation){\r\n   \t\tif(day == 0 || day == 6){\r\n        \treturn(\"off\");\r\n        }else{\r\n        \treturn(\"10:00\");\r\n        }\t\r\n   \t}else{\r\n    \tif(day == 0 || day == 6){\r\n        \treturn(\"10:00\");\r\n        }else{\r\n        \treturn(\"7:00\");\r\n        }\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.", "answer": "public boolean canBalance(int[] nums)\r\n{\r\n    for (int i = 1; i < nums.length; i++)\r\n    {\r\n        int sum1 = 0;\r\n        int sum2 = 0;\r\n        \r\n        for (int x = 0; x < i; x++)\r\n        {\r\n            sum1 = sum1 + nums[x];\r\n        }\r\n        \r\n        for (int y = i; y < nums.length; y++)\r\n        {\r\n            sum2 = sum2 + nums[y];\r\n        }\r\n        \r\n        if (sum1 == sum2)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Given an int array of any length, return a new array of its first 2 elements. If the array is smaller than length 2, use whatever elements are present.", "answer": "public int[] frontPiece(int[] nums)\r\n{\r\n    int length = nums.length;\r\n    \r\n    if (length >= 2)\r\n    {\r\n        int[] front = new int[] {nums[0], nums[1]};\r\n    }\r\n    else if (length == 1)\r\n    {\r\n        int[] front = new int[] {nums[0]};\r\n    }\r\n    else\r\n    {\r\n        int[] front = new int[0];\r\n    }\r\n    \r\n    return front;\r\n}\r\n"}
{"context": "", "question": "Given a day of the week encoded as 0 = Sun, 1 = Mon, 2 = Tue, ... 6 = Sat, and a boolean indicating if we are on vacation, return a string of the form \"7:00\" indicating when the alarm clock should ring. Weekdays, the alarm should be \"7:00\" and on the weekend it should be \"10:00\". Unless we are on vacation--then on weekdays it should be \"10:00\" and weekends it should be \"off\".", "answer": "public String alarmClock(int day, boolean vacation)\r\n{\r\n    if (vacation == false)\r\n    {\r\n        if (day == 0 || day == 6)\r\n        {\r\n            return \"10:00\";\r\n        }\r\n        else\r\n        {\r\n            return \"7:00\";\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if (day == 0 || day == 6)\r\n        {\r\n            return \"off\";\r\n        }\r\n        else\r\n        {\r\n            return \"10:00\";\r\n        }\r\n    }\r\n}"}
{"context": "", "question": "Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.", "answer": "public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)\r\n{\r\n    if(!isAsleep){\r\n        return true;\r\n    }\r\n    else if(!isMorning){\r\n        return true;\r\n    }\r\n    else if(isMom){\r\n        return true;\r\n    }\r\n    return false;\r\n      \r\n    \r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    \r\n\tint firstBread = str.indexOf(\"bread\");\r\n\tint lastBread = str.lastIndexOf(\"bread\");\r\n\tif (firstBread == lastBread) return \"\";\r\n\r\n\tif (str.length <= 10)\r\n    {\r\n\t\treturn str.substring(firstBread + 5, lastBread);\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Return a version of the given array where each zero value in the array is replaced by the largest odd value to the right of the zero in the array. If there is no odd value to the right of the zero, leave the zero as a zero. Hint: in solving this: you may use a second helper function if you want, say to find the largest odd value to the right of a specified position.", "answer": "public int[] zeroMax(int[] nums)\r\n{\r\n    int large;\r\n    for(int i = 0; i < nums.length - 1; i++)\r\n    {\r\n     if (nums[i] == 0)\r\n     {\r\n      \tlarge = 0;\r\n        for(int j = i + 1; j < nums.length; j++)\r\n        {\r\n         \t   if(nums[j] > large && nums[j] % 2 == 1)\r\n               {\r\n                \tlarge = nums[j];   \r\n               }\r\n        \r\n            if (large != 0)\r\n            {\r\n             \tnums[i] = max;   \r\n            }\r\n        }\r\n     }\r\n    }\r\n        return nums;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless \"outsideMode\" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.", "answer": "public boolean in1To10(int n, boolean outsideMode)\r\n{if(outsideMode)\r\n\t\treturn (n <= 1 || n >= 10);\r\n\treturn (n >= 1 && n <= 10);\r\n    \r\n}\r\n"}
{"context": "", "question": "Given an array of int values, return true if the group of n numbers at the start of the array is the same as the group of n numbers at the end of the array. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n == 0 and n == 2, and false for n == 1 and n == 3. You may assume that n is in the range 0..nums.length, inclusive.", "answer": "public boolean sameEnds(int[] nums, int n)\r\n{\r\n    int size = nums.length - 1;\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n    \tif ( i < n)\r\n        {\r\n        \tif (nums[i] != nums[size - i])\r\n                return false;\r\n        \r\n        }\r\n    }\r\n                return true;\r\n}\r\n"}
{"context": "", "question": "Given a string str, find all places where a three-letter combination starting with \"z\" and ending with \"p\" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like \"zipXzap\" would produce a result of \"zpXzp\".", "answer": "public String zipZap(String str)\r\n{\r\n    int i = 0;\r\n    String temp = str, empty = \"\";\r\n   \tint len = temp.length();\r\n\r\n    while(i < len - 2)\r\n    {\r\n\t\tif(temp.charAt(i) == 'z' && temp.charAt(i + 2) == 'p')\r\n        {\r\n\t\t\tempty = empty + temp.substring(0, i + 1);\r\n\t\t\ttemp=temp.substring(i + 2);\r\n\t\t\tlen = temp.length();\r\n\t\t\ti = 0;\r\n\t\t}\r\n\t\ti++;\r\n\t}\r\nempty = empty + temp;\r\nreturn empty;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.", "answer": "public String repeatEnd(String str, int n)\r\n{\r\n    String totalString = \"\";\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n    \ttotalString = totalString + str.substring(n - 1);      \r\n    }\r\n    return totalString;\r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if every 2 that appears in the array is next to another 2. Otherwise, return false.", "answer": "public boolean twoTwo(int[] nums)\r\n{\r\n    boolean two = false;\r\n    \r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        if (i = 0 && nums[i] = 2)\r\n        {\r\n            if (nums[i + 1] = 2)\r\n            {\r\n                two = true;\r\n            }\r\n        }\r\n        else if (nums[i] = 2 && nums[i - 1] = 2 && nums[i + 1]                  = 2)\r\n        {\r\n            two = true;\r\n        }\r\n        \r\n    }\r\n    \r\n    return two;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.", "answer": "public int countCode(String str)\r\n{\r\n    int s = 0;\r\n    for(int i = 0; i < str.length(); i++)\r\n    {\r\n    \tif(str.charAt(i) == 'c')\r\n        {\r\n            if(str.charAt(i+1) == 'o')\r\n            {\r\n                if(str.charAt(i+3) == 'e')\r\n                {\r\n                    s++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return s;\r\n}\r\n"}
{"context": "", "question": "You and your date are trying to get a table at a restaurant. The parameter you is the stylishness of your clothes, in the range 0..10, and date is the stylishness of your date's clothes. Write a method that returns your chances of getting a table, encoded as an int value with 0 = no, 1 = maybe, 2 = yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).", "answer": "public int dateFashion(int you, int date)\r\n{\r\n    if ((you >= 8 && you <=10) && (date >=8 && date <=10))\r\n    {\r\n        return 2;\r\n    }\r\n    \r\n    else if ((you <=2 && you >=0) && (date <=2 && date >=0))\r\n    {\r\n        return 0;\r\n    }\r\n    \r\n    else \r\n    {\r\n        return 1;\r\n        \r\n    }\r\n              \r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    if (str.length()<4)\r\n    {\r\n        if (str.equals(\"xyz\"))\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n        return false;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        for (int i = 0; i<str.length()-3; i++)\r\n        {\r\n            if (str.substring(i,i+3).equals(\"xyz\"))\r\n            {\r\n                if(i==0)\r\n                {\r\n                    return true;\r\n                }\r\n                else if (str.substring(i-1,i).equals(\".\"))\r\n                {\r\n                    return false;\r\n                }\r\n                else\r\n                {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.", "answer": "public boolean canBalance(int[] nums) {\r\n    int first = 0;\r\n    int second = 0;\r\n      \r\n    for(int i = 0; i < nums.length; i++)\r\n        second += nums[i];\r\n              \r\n    for(int i = 0; i <= nums.length - 2; i++) {\r\n        first += nums[i];\r\n        second -= nums[i];\r\n                            \r\n        if(first == second)\r\n            return true;\r\n    }\r\n                                          \r\n    return false;\r\n}\r\n"}
{"context": "", "question": "For each multiple of 10 in the given array, change all the values following it to be that multiple of 10, until encountering another multiple of 10. So {2, 10, 3, 4, 20, 5} yields {2, 10, 10, 10, 20, 20}.", "answer": "public int[] tenRun(int[] nums)\r\n{\r\n    int i;\r\n    int[] arr = new int[nums.length];\r\n    for (i = 0; i < nums.length -1; i++)\r\n    {\r\n        if (nums[i] % 10 == 0 && nums[i+1] % 10 != 0)\r\n        {\r\n            arr[i] = nums[i];\r\n            arr[i+1] = nums[i];\r\n        }\r\n        else if (i >= 1  && (arr[i-1] % 10 ==0))\r\n            arr[i] = nums[i];\r\n        else\r\n        {\r\n            arr[i] = nums[i];\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\n    int result = 0;\r\n    if (isBirthday)\r\n    {\r\n        speed -= 5;\r\n    }\r\n    \r\n    if (speed <= 60)\r\n    {\r\n        result = 0;\r\n    }\r\n    \r\n    return result;\r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if every 2 that appears in the array is next to another 2. Otherwise, return false.", "answer": "public boolean twoTwo(int[] nums)\r\n{\r\n    int count = 0;\r\n\tfor(int i = 0; i < nums.length; i++)\r\n\t{\r\n\t\tif(nums[i] == 2)\r\n\t\t\tcount++;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(state == 1)\r\n\t\t\t\treturn false;\r\n\t\t\telse\r\n\t\t\t\tcount = 0;\r\n\t\t}\r\n\t}\r\n\treturn (count != 1);\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.", "answer": "public String repeatEnd(String str, int n)\r\n{\r\n    str = str.substring(str.length() - n, str.length());\r\n    String finalString = \"\";\r\n    for (int i = 1; i <= n; i ++)\r\n    {\r\n        finalString = finalString + str;\r\n    }\r\n    return finalString;\r\n}\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n    Boolean x = false;\r\n  \tBoolean y = false;\r\n  \tint len = str.length();\r\n   \r\n \tfor (int i = 0; i < len; i++) {\r\n    \tif (str.charAt(i) == 'x' && y == true){\r\n      \t\tx = true;\r\n      \t\ty = false;\r\n    \t} \t\r\n        else if (str.charAt(i) == 'x') {\r\n     \t\tx = true;\r\n    \t}\r\n    \tif (str.charAt(i) == 'y' && x == true)\r\n      \t\ty = true;\r\n    \t}\r\n  \t}\r\n  \tif (!x){\r\n    \ty = true;\r\n    }\r\n  \treturn y;\r\n\r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    if (str.length() == 2) {\r\n        return \"\";\r\n    }\r\n    if (str.length() == 1) {\r\n        return str;\r\n    }\r\n    if (str.length() == 0) {\r\n        return \"\";\r\n    }\r\n    int a = str.length();\r\n    int d = a - 2;\r\n    String b = str.substring(0, 2);\r\n    String c = str.substring(d, a);\r\n    if (stra.equals(b)) {\r\n        return str.substring(2);\r\n    }\r\n    return str;\r\n}\r\n"}
{"context": "", "question": "For each multiple of 10 in the given array, change all the values following it to be that multiple of 10, until encountering another multiple of 10. So {2, 10, 3, 4, 20, 5} yields {2, 10, 10, 10, 20, 20}.", "answer": "public int[] tenRun(int[] nums)\r\n{\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        if (nums[i] % 10 == 0)\r\n        {\r\n            for (int j = i; j < nums.length; j++)\r\n            {\r\n                if (nums[j] % 10 != 0)\r\n                {\r\n                    nums[j] = nums[i];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return nums;\r\n}\r\n"}
{"context": "", "question": "For each multiple of 10 in the given array, change all the values following it to be that multiple of 10, until encountering another multiple of 10. So {2, 10, 3, 4, 20, 5} yields {2, 10, 10, 10, 20, 20}.", "answer": "public int[] tenRun(int[] nums)\r\n{\r\n    int[] newArray = new int[nums.length];\r\n    Boolean ten = false;\r\n    int num = 0;\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        if (ten == true)\r\n        {\r\n            newArray[i] = num;\r\n        }\r\n        else if (nums[i] % 10 == 0)\r\n        {\r\n            ten = true;\r\n            num = nums[i];\r\n        }\r\n        else\r\n        {\r\n            newArray[i] = nums[i];\r\n        }\r\n    }\r\n    return newArray;\r\n}\r\n"}
{"context": "", "question": "Given an int array, return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 7 (every 6 will be followed by at least one 7). Return 0 for no numbers.", "answer": "public int sum67(int[] nums)\r\n{\r\n    boolean exclude = false;\r\n    int sum=0;\r\n    for(int i = 0; i<nums.length;i++){\r\n\t\tif(nums[i]==6||nums[i]==7)exclude=!exclude;\r\n        if(!exclude){\r\n            sum+=nums[i];\r\n        }\r\n    }\r\n    return sum;\r\n    \r\n}\r\n"}
{"context": "", "question": "Given an array of int values, return true if the group of n numbers at the start of the array is the same as the group of n numbers at the end of the array. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n == 0 and n == 2, and false for n == 1 and n == 3. You may assume that n is in the range 0..nums.length, inclusive.", "answer": "public boolean sameEnds(int[] nums, int n)\r\n{\r\n    int counter = 0;\r\n    int[] ending = new int[nums.length / 2];\r\n    for (int i = 0; i < nums.length/2; i++)\r\n    {\r\n        ending[i] = nums[i];\r\n    }\r\n    for (int k = 0; k < ending.length; k++)\r\n    {\r\n        if (ending[k] == nums[k*2])\r\n        {\r\n            counter++;\r\n        }\r\n    }\r\n    if (counter > 0)\r\n    {\r\n        return true;\r\n    }\r\n    else\r\n        return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.", "answer": "public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)\r\n{\r\n    if(isAsleep)\r\n        return false;\r\n    else if(isMorning)\r\n        if(isMom)\r\n            return true;\r\n    \telse\r\n            return false;\r\n    else\r\n        return true;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\n    if (!isBirthday)\r\n    {\r\n        if (speed <= 60)\r\n        {\r\n            return  0;\r\n        }\r\n        else if (60 < speed && speed <= 80)\r\n        {\r\n            return 1;\r\n        }\r\n        else if ( speed > 80)\r\n        {\r\n            return 2;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if (speed <= 65)\r\n        {\r\n            return 0;\r\n        }\r\n        else if (65 < speed && speed <= 85)\r\n        {\r\n            return 1;\r\n        }\r\n        else if ( speed > 85)\r\n        {\r\n            return 2;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    String endLetters;\r\n    endLetters = str.substring(str.length(), str.length()-1 ); // I don't know how many letters there are!!\r\n    // ^ use a method that gets the length of a string. Use \".getLength - 1\" and \"- 2?\"\r\n    String startLetters;\r\n    startLetters = str.substring(0, 1);\r\n    \r\n    // String middleLetters;\r\n    // middleLetters = str.substring();\r\n        \r\n    if (endLetters == startLetters)\r\n    {\r\n        return str;\r\n    }\r\n    else \r\n    {\r\n        return str;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Return an array that is \"left shifted\" by one--so for an input of {6, 2, 5, 3}, the method returns {2, 5, 3, 6}. You may modify and return the given array, or return a new array.", "answer": "public int[] shiftLeft(int[] nums)\r\n{\r\n    if (nums.length == 0)\r\n    {\r\n     \treturn nums;   \r\n    }\r\n    int [] shifted = new int[nums.length];\r\n    shifted[nums.length-1] = nums[0];\r\n    for (int i = 0; i < nums.length-1; i++)\r\n    {\r\n        shifted[i] = nums[i+1];\r\n    }\r\n    return shifted;\r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    int strLen = str.length();\r\n    if (strLen < 2)\r\n    {\r\n        return str;\r\n    }\r\n    else if (strLen == 2)\r\n    {\r\n     return \"\";   \r\n    }\r\n    else if ((str.charAt(0) == str.charAt(strLen - 1)) && (str.charAt(1) == str.charAt(strLen - 2)))\r\n    {\r\n     \treturn str.substring(1, strLen - 1);   \r\n    }\r\n    return str;\r\n}\r\n"}
{"context": "", "question": "Return true if the given string contains a \"bob\" string, but where the middle 'o' character can be any character.", "answer": "public boolean bobThere(String str)\r\n{  \r\n    int b1 = str.indexOf(\"b\");\r\n \t int b2 = str.lastIndexOf(\"b\");\r\n   if (str.charAt(b1 + 2) == 'b'){\r\n    return true;\r\n}\r\n return false;\r\n}\r\n\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.", "answer": "public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)\r\n{\r\n    if (isAsleep)\r\n        return false;\r\n    else if (isMom)\r\n        return true;\r\n    else\r\n        return (!isMorning);\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.", "answer": "public boolean squirrelPlay(int temp, boolean isSummer)\r\n{\r\n    if (isSummer)\r\n    {\r\n        if (temp >= 60 && temp <= 100)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if (temp >= 60 && temp <= 90)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.", "answer": "public boolean evenlySpaced(int a, int b, int c)\r\n{\r\n    boolean k=true;\r\n    int one = a-b;\r\n    int two = b-c;\r\n    int thr = a-c;\r\n    if (((Math.abs(one)==Math.abs(two)) || (Math.abs(thr)==Math.abs(one)) || (Math.abs(two)==Math.abs(thr))) && ((a==b && a!=c) || (a==c && a!=b)))\r\n    {\r\n        k = true;\r\n    }\r\n    else\r\n    {\r\n        k = false;\r\n    }\r\n    return k;\r\n}\r\n"}
{"context": "", "question": "Given an array containing three ints, return the sum of all the elements.", "answer": "public int sum3(int[] nums)\r\n{\r\n    return Math.sum(nums);\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    int i = 0;\r\n    while (str.substring(i, i+5) != \"bread\" &&\r\n           i+5 <= str.length() )\r\n    {\r\n        i=i+1;\r\n    }\r\n    if (str.substring(i, i+5).equals(str.substring(str.length()-(i+5), \r\n                                                  str.length()-(i+1)))\r\n               && str.substring(i, i+5).equals(\"bread\"))\r\n    {\r\n        return str.substring(i, str.length() -(i+5));\r\n    }\r\n    else \r\n        {\r\n            return \"\";\r\n        }\r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    if (big <= goal/5 && small >= goal - big*5)\r\n    {\r\n        return goal - big*5;\r\n    }\r\n    else if (big >= goal/5 && small >= goal % 5)\r\n    {\r\n        return goal % 5;\r\n    }\r\n    else \r\n    {\r\n    \treturn -1;\r\n    }\r\n    \r\n}\r\n"}
{"context": "", "question": "For each multiple of 10 in the given array, change all the values following it to be that multiple of 10, until encountering another multiple of 10. So {2, 10, 3, 4, 20, 5} yields {2, 10, 10, 10, 20, 20}.", "answer": "public int[] tenRun(int[] nums)\r\n{\r\n    int currentOne;\r\n    int i = 0;\r\n      \r\n    while (i < nums.length && nums[i] % 10 != 0)\r\n    {\r\n        i++;\r\n    }\r\n    if (i >= nums.length)\r\n    {\r\n        return nums;\r\n    }\r\n    currentOne = nums[i]; \r\n    i++;\r\n                                \r\n    while (i < nums.length) \r\n    {\r\n        if (nums[i] % 10 == 0)\r\n        {\r\n            currentOne = nums[i];\r\n        }\r\n        else\r\n        {\r\n            nums[i] = currentOne;\r\n        }\r\n        i++;\r\n    }                                                     \r\n    return nums; \r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    int result = 0;\r\n   \r\n    \r\n    int x = goal / 5;\r\n    int y = goal % 5;\r\n\r\n    if (x > big) \r\n    {\r\n        y = y +  (x - big) * 5;\r\n    }\r\n    if (y > small)\r\n    {\r\n        return -1 ;\r\n    }\r\n    else\r\n    {\r\n        return y ;\r\n    }\r\n\r\n}\r\n    \r\n    \r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.", "answer": "public int sortaSum(int a, int b)\r\n{\r\n    if (a + b >= 10 && a + b <= 19)\r\n    {\r\n        return 20;\r\n    }\r\n    else\r\n    {\r\n        return a + b;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.", "answer": "public int countCode(String str)\r\n{\r\n    // parse through using a for loop looking for co\r\n    //then check if \r\n    int len = str.length()-3;\r\n    char ch;\r\n    int num = 0;\r\n    for ( int i = 0 ; i < len ; i ++)\r\n    {\r\n        ch = str.charAt(i);\r\n        if (ch == 'c' && str.charAt(i+1) == 'o' && str.charAt (i + 3) == 'e')\r\n        {\r\n          num = num + 1;\r\n        }\r\n    }\r\n    return num;       \r\n    \r\n}\r\n"}
{"context": "", "question": "Given an array, return an array that contains exactly the same numbers as the original array, but rearranged so that every 4 is immediately followed by a 5. Do not move the 4's, but every other number may move. The array contains the same number of 4's and 5's, and every 4 has a number after it that is not a 4. In this version, 5's may appear anywhere in the original array. (This is a slightly harder version of the fix34 problem.)", "answer": "public int[] fix45(int[] nums)\r\n{\r\n    int[] ans= new int[6] ; \r\n    return ans ;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.", "answer": "public int countCode(String str)\r\n{\r\n    int t = str.length();\r\n    int answer = 0;\r\n    \r\n    if (t < 4)\r\n    {\r\n        return answer;\r\n    }\r\n        \r\n    for (int i = 0; i < (t - 3); i++)\r\n    {\r\n        String c1 = str.substring(i, i + 2);\r\n        char c2 = str.charAt(i + 3);\r\n        if ((c1.equals(\"co\")) && (c2 == 'e'))\r\n        {\r\n            answer = answer + 1;\r\n        }\r\n    }\r\n    return answer;\r\n}\r\n"}
{"context": "", "question": "We'll say that a value is \"everywhere\" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.", "answer": "public boolean isEverywhere(int[] nums, int val)\r\n{\r\n    boolean y = false;\r\n    for (int i = 1; i < nums.length - 1; i++) {\r\n        if (nums[i - 1] == val && nums[i + 1] == val) {\r\n            y = true;\r\n        }\r\n        else {\r\n            y = false;\r\n        }\r\n    }\r\n    return y;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.", "answer": "public int sortaSum(int a, int b)\r\n{\r\n    \r\n    if (a+b > 9 && a+b < 20)\r\n        return 20;\r\n    else\r\n        return a+b;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.", "answer": "public String repeatEnd(String str, int n)\r\n{\r\n    String sub = str.substring(n, str.length());\r\n    String add;\r\n    for (int i = 0; i <= n; i ++)\r\n    {\r\n        add = add + sub;\r\n    }\r\n    return add;\r\n}\r\n"}
{"context": "", "question": "Given an array of int values, return true if the group of n numbers at the start of the array is the same as the group of n numbers at the end of the array. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n == 0 and n == 2, and false for n == 1 and n == 3. You may assume that n is in the range 0..nums.length, inclusive.", "answer": "public boolean sameEnds(int[] nums, int n)\r\n{\r\n    int num = 0;\r\n    for (int i = 0; i < n ;i++)\r\n        for (int j = n; j >= 0; j--)\r\n    \t{\r\n        \tif (nums[i] == nums[nums.length - j])\r\n        \t{\r\n            \tnum = num + 1;\r\n        \t}    \r\n    \t}\r\n    \tif (num == n)\r\n    \t{\r\n        \treturn true;\r\n    \t}\r\n    \telse\r\n    \t{\r\n        \treturn false;\r\n    \t}\r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    if (goal % 5 <= small )\r\n        return goal % 5;\r\n    else if (goal / 5 == big && (goal - big * 5) != 0 &&\r\n            goal % 5 <= small)\r\n        return goal % 5;\r\n    else if (goal / 5 <= big && goal % 5 == 0)\r\n        return 0;\r\n    else \r\n        return -1;\r\n}\r\n"}
{"context": "", "question": "For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a, b, and c, return the sum of their rounded values. To avoid code repetition, write a separate helper public int round10(int num) and call it 3 times. Write the helper entirely below and at the same indent level as roundSum().", "answer": "public int roundSum(int a, int b, int c)\r\n{\r\n    int sum = 0;\r\n    sum = sum + round10(a);\r\n    sum = sum + round10(b);\r\n    sum = sum + round10(c);\r\n    return sum;\r\n}\r\n\r\npublic int round10(int num)\r\n{\r\n    int cutOff = num % 10;\r\n    int output = 0;\r\n    if (cutOff >= 5)\r\n        output = num - cutOff + 10;\r\n    else\r\n    \toutput = num - cutOff;\r\n    return output;\r\n}\r\n"}
{"context": "", "question": "Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.", "answer": "public boolean canBalance(int[] nums)\r\n{\r\n    int left = 0;\r\n\tint right;\r\n\tfor(int i = 0; i < nums.length - 1; i++)\r\n\t\tleft += nums[i];\r\n\tright = nums[nums.length-1];\r\n\tfor(int i = nums.length - 2; i > 0; i--)\r\n\t{\r\n\t\tif(left == right)\r\n\t\t\treturn true;\r\n\t\tleft -= nums[i];\r\n\t\tright += nums[i];\r\n\t}\r\n\treturn (left == right);\r\n}\r\n"}
{"context": "", "question": "Given an int array, return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 7 (every 6 will be followed by at least one 7). Return 0 for no numbers.", "answer": "public int sum67(int[] nums)\r\n{\r\n    int sum = 0;\r\n    boolean debounce = false;\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        if (debounce == false)\r\n        {\r\n            sum = nums[i] + sum;\r\n        }\r\n        if (nums[i] == 6)\r\n        {\r\n            debounce = true;\r\n        }\r\n        else if (nums[i] == 7)\r\n        {\r\n            debounce = false;\r\n        }\r\n    }\r\n    return sum;\r\n}\r\n"}
{"context": "", "question": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note: str.toLowerCase() returns the lowercase version of a string.", "answer": "public boolean endOther(String a, String b)\r\n{\r\n    if (a.toLowerCase().endsWith(b.toLowerCase()))\r\n    {\r\n     \treturn true;\r\n    }\r\n    else if (b.toLowerCase().endsWith(a.toLowerCase()))\r\n    {\r\n        return true;\r\n    }\r\n    else\r\n        return false;\r\n}\r\n"}
{"context": "", "question": "You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.", "answer": "public int greenTicket(int a, int b, int c)\r\n{\r\n    if (a == b && b == c)\r\n        return 20;\r\n    else if (a == b || a == c || b == c)\r\n        return 10;\r\n    else\r\n        return 0;\r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string str and a non-empty word, return a version of the original string where all chars have been replaced by pluses (+), except for appearances of the word which are preserved unchanged.", "answer": "public String plusOut(String str, String word)\r\n{\r\n    String plusString = \"\";\r\n    \r\n    for(int i=0;i<str.length();i++) {\r\n    \tif(str.indexOf(word,i) == i) {\r\n        \tplusString += word;\r\n            i += word.length();\r\n        }\r\n        if(i==str.length()-1)\r\n            break;\r\n        plusString += \"+\";\r\n    }\r\n    \r\n    return plusString;\r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if the array contains two 7s next to each other, or there are two 7s separated by one element, such as with {7, 1, 7}. Otherwise, return false.", "answer": "public boolean has77(int[] nums)\r\n{\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n    \tif (nums[i] == 7 && nums[i + 1] == 7)\r\n        {\r\n        \treturn true;\r\n        }\r\n        else if (nums[i] == 7 && nums[i + 2] == 7)\r\n        {\r\n        \treturn true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    int leg = str.length() - 2;\r\n    for (int s = 0; s < leg; s++)\r\n    {\r\n        if (str.charAt(s) == 'x' && str.charAt(s + 1) == 'y' && str.charAt(s + 2) == 'z')\r\n        {\r\n            if ( s == 0 || str.charAt(s - 1) != '.')\r\n                return true;\r\n        }\r\n    }\r\n       return false;\r\n}\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    int count = 0;    \r\n    for (int i = 0; i < nums.length; i ++)\r\n    {\r\n    \tif (i+1 <= (nums.length - 1) && nums[i] != nums[i+1])\r\n        {        \t\r\n            if(nums[i] == nums[i-1])\r\n            {\r\n            \tcount = count + 1;\r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    return count;\r\n}\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n    boolean t=false;\r\n    for (int i=str.length()-1; i>=0; i--)\r\n    {\r\n        if (str.charAt(i)=='y')\r\n        {\r\n            t=true;\r\n        }\r\n        if (str.charAt(i)=='x' && str.charAt(i)!='y')\r\n        {\r\n            t=false;\r\n        }\r\n    }\r\n    return t;\r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if the array contains two 7s next to each other, or there are two 7s separated by one element, such as with {7, 1, 7}. Otherwise, return false.", "answer": "public boolean has77(int[] nums)\r\n{\r\n    Boolean has77 = false;\r\n   \tfor (int i = 0; i < nums.length; i++)\r\n    {\r\n        if (nums[i] = 7 && nums[i + 1] = 7)\r\n        {\r\n            has77 = true;\r\n        }\r\n        else if (nums[i] = 7 && nums[i + 2] = 7)\r\n        {\r\n            has77 = true;\r\n        }\r\n    }\r\n    return has77;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that takes an int array as its parameter and returns the number of even ints it contains. Note: the % \"mod\" operator computes the remainder, e.g. 5 % 2 is 1.", "answer": "public int countEvens(int[] nums)\r\n{\r\n    int total = 0;\r\n    for (int i = 0; i < nums.length; i++) {\r\n        if (nums[i] % 2 == 0) {\r\n            totatl = total + 1;\r\n        }\r\n    }\r\n    return total;\r\n}\r\n"}
{"context": "", "question": "Return the centered average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array has a length of 3 or more.", "answer": "public int centeredAverage(int[] nums)\r\n{\r\n    int max = nums[0];\r\n\tint min = nums[0];\r\n\tint sum = nums[0];\r\n\tfor(int i = 1; i < nums.length; i++)\r\n\t{\r\n\t\tsum  += nums[i];\r\n\t\tif(nums[i] > max)\r\n\t\t\tmax = nums[i];\r\n\t\telse if(nums[i] < min)\r\n\t\t\tmin = nums[i];\r\n\t}\r\n\treturn (sum-max-min) / (nums.length - 2);\r\n    \r\n}\r\n"}
{"context": "", "question": "Given n >= 0, create an array with the pattern {1, 1, 2, 1, 2, 3, ... 1, 2, 3 .. n} (spaces added to show the grouping). Note that the length of the array will be 1 + 2 + 3 ... + n, which is known to sum to exactly n * (n + 1)/2.", "answer": "public int[] seriesUp(int n)\r\n{\r\n    int[] nums = new int[n * (n + 1) / 2];\r\n    int count = 0;\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        i = count;\r\n\t\tfor (int j = 1; j < (j * (j + 1) / 2); j++)\r\n        {\r\n            nums[i] = j;\r\n            i++;\r\n            count++;\r\n        }\r\n    }\r\n    return nums;\r\n}\r\n"}
{"context": "", "question": "Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.", "answer": "public boolean canBalance(int[] nums)\r\n{\r\n    int tot = 0;\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        total += nums[i];\r\n    }\r\n    if (total == 0)\r\n    {\r\n        return true;\r\n    }\r\n    int current = 0;\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        current += nums[i];\r\n        if (current == total - current)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n    \r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    String result = \" \";\r\n    \r\n     if ( str.length() < 2)\r\n    {\r\n        result = str;\r\n    }\r\n    else if ( x.equals(y))\r\n    {\r\n        String x = str.substring(0, 2);\r\n    \r\n    String y = str.substring(str.length() - 2);\r\n        \r\n        result = str.substring(2);\r\n    }\r\n    else\r\n    {\r\n        result = str;\r\n    }\r\n    \r\n    return result;\r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    int length = str.length();\r\n    String front = str.substring(0, 2);\r\n    String back = str.substring(length - 2, length);\r\n    \r\n    if (length > 2)\r\n    {\r\n        if (front.equals(back))\r\n    \t{\r\n        \tstr = str.substring(2, length);\r\n        }\r\n    }\r\n    return str;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.", "answer": "public int blackjack(int a, int b)\r\n{\r\n    while (a <= 21 || b <= 21)  \r\n    \tif (a > b && a <= 21)\r\n            return a;\r\n    \tif (b > a && b <= 21)\r\n            return b;\r\n    return 0;\r\n}\r\n"}
{"context": "", "question": "You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.", "answer": "public int greenTicket(int a, int b, int c)\r\n{\r\n    if ( a=b && b=c && c=a)\r\n    {\r\n        return \"20\";\r\n\t}\r\n    else if ( a = b && a != c && b!=c)\r\n    {\r\n        return \"10\";\r\n    }\r\n    else\r\n    {\r\n        return \"0\";\r\n    }\r\n\r\n}\r\n"}
{"context": "", "question": "Consider the series of numbers beginning at start and running up to but not including end, so for example start=1 and end=5 gives the series 1, 2, 3, 4. Return a new String[] array containing the string form of these numbers, except in the case of multiples of 3, use \"Fizz\" instead of the number, and for multiples of 5 use \"Buzz\", and for multiples of both 3 and 5 use \"FizzBuzz\". In Java, String.valueOf(xxx) will make the String form of an int or other type.", "answer": "public String[] fizzBuzz(int start, int end)\r\n{\r\n    String goal = \"\";\r\n    for (int i = start; i < end; i++)\r\n    {\r\n        if ((i % 3 = 0) && (i % 5 = 0))\r\n        {\r\n            goal += \"FizzBuzz\";\r\n        }\r\n        if (i % 3 = 0)\r\n        {\r\n            goal += \"Fizz\";\r\n        }\r\n    \tif (i % 5 = 0)\r\n        {\r\n            goal += \"Buzz\";\r\n        }\r\n    }\r\n    return goal;\r\n}\r\n"}
{"context": "", "question": "Given a string str, find all places where a three-letter combination starting with \"z\" and ending with \"p\" occurs. Return a string where for all such three-letter sequences, the middle letter has been removed. For example, a string like \"zipXzap\" would produce a result of \"zpXzp\".", "answer": "public String zipZap(String str)\r\n{\r\n    String result = \"\";\r\n    int i = 0;\r\n    \r\n    if (str.length() < 3)\r\n        result = str;\r\n    else\r\n    {\r\n        while (i < str.length() - 2)\r\n    {\r\n        if (str.charAt(i) == 'z' && str.charAt(i + 2) == 'p')\r\n        {\r\n            result = result + \"zp\";\r\n            i = i + 3;\r\n        }\r\n        else\r\n        {\r\n            result = result + str.charAt(i);\r\n            i++;\r\n        }\r\n    }\r\n    }\r\n    return result;\r\n}\r\n"}
{"context": "", "question": "Given an array of int values, return true if the group of n numbers at the start of the array is the same as the group of n numbers at the end of the array. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n == 0 and n == 2, and false for n == 1 and n == 3. You may assume that n is in the range 0..nums.length, inclusive.", "answer": "public boolean sameEnds(int[] nums, int n)\r\n{\r\n    int start = 0;\r\n\tint end = nums.length-len;\r\n\tfor(; len > 0; len--)\r\n\t{\r\n\t\tif(nums[start] != nums[end])\r\n\t\t\treturn false;\r\n\t\telse\r\n\t\t{\r\n\t\t\tstart++;\r\n\t\t\tend++;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.", "answer": "public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)\r\n{\r\n    if (isMorning)\r\n    {\r\n        if (isMom)\r\n        {\r\n            return true;\r\n        }\r\n        else if (isAsleep)\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    if (!isMorning)\r\n    {\r\n        if (isAsleep)\r\n        {\r\n            return false;\r\n        }\r\n        else \r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    int x = 0;\r\n    if (small + big*5 >= goal)\r\n    {\r\n        while (goal != 0) \r\n        {\r\n            if (goal >= 5 )\r\n            {\r\n                goal = goal - big;\r\n    \t\t\tbig = big - 1;\r\n            }\r\n            else\r\n            {\r\n                goal = goal - small;\r\n                small = small - 1;\r\n                int x = x + 1;\r\n            }\r\n            \r\n        }\r\n    }\r\n    else\r\n    {\r\n        return -1;\r\n    }\r\n    return x;\r\n    \r\n}\r\n"}
{"context": "", "question": "We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.", "answer": "public int makeChocolate(int small, int big, int goal)\r\n{\r\n    if ((goal - (goal % 5))/5 <= big)\r\n    {\r\n        return (goal % 5);\r\n    }\r\n    else\r\n    {\r\n        return -1;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.", "answer": "public boolean canBalance(int[] nums)\r\n{\r\n    int size = nums.length;\r\n    int sum1 = 0;\r\n    int sum2 = 0;\r\n    int k = size - 1;\r\n    int i = 0;\r\n    int j = 0;\r\n    int temp1 = 0;\r\n    int temp2 = 0;\r\n    while (j <  size)\r\n    {\r\n        if (k <= i)\r\n            return false;\r\n    for (; k > i; k--)\r\n    {\t\r\n        sum2 += nums[k];    \r\n    }\r\n    for (; i < k ; i++)\r\n    {\r\n            sum1 += nums[i];\r\n    }\r\n        if (sum1 == sum2)\r\n\t\treturn true;\r\n    i++;\r\n    k--;\r\n    sum1 = 0;\r\n    sum2 = 0;\r\n        \r\n    }\r\n    \r\n    return false;\r\n\r\n    \r\n}\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    int total = 0;\r\n    int length = nums.length;\r\n    for ( int i = 0; i < length - 1; i++ )\r\n    {\r\n        if ( nums[i] == nums[i + 1] )\r\n        {\r\n            total++;\r\n            int place = i;\r\n            int j = 1;\r\n            while ( place + j < length\r\n                   && nums[place] == nums[place + j] )\r\n            {\r\n                j++;\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n    return total;\r\n}\r\n"}
{"context": "", "question": "Return true if the given string contains a \"bob\" string, but where the middle 'o' character can be any character.", "answer": "public boolean bobThere(String str)\r\n{\r\n    for (int i = 0; i < str.length(); i++) {\r\n        if (i + 2 <= str.substring(i).length()) {\r\n            if (str.substring(i, i+1).equals(\"b\")) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n                return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.", "answer": "public int countCode(String str)\r\n{\r\n    int count = 0;\r\n    for (int i = 0; i < str.length()-3; i++)\r\n        if (str.charAt(i) == 'c' && str.charAt(i+1) == 'o'\r\n        && str.charAt(i+3) == 'e')\r\n            count++;\r\n    return count;\r\n}\r\n"}
{"context": "", "question": "When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.", "answer": "public boolean cigarParty(int cigars, boolean isWeekend)\r\n{\r\n if (isWeekend) {\r\n     if (cigars >= 40) {\r\n         return true;\r\n     }\r\n     else  {\r\n         return false;\r\n     }\r\n }\r\n    if (cigars >= 40 && cigars <= 60) {\r\n        return true;\r\n    }\r\n    else {\r\n        return false; \r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\n    if (isBirthday == true)\r\n    {\r\n        if (speed <= 65)\r\n        {\r\n            return 0;\r\n        }\r\n        if (speed >= 86)\r\n        {\r\n            return 2;\r\n        }\r\n        else\r\n        {\r\n            return 1;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if (speed <= 60)\r\n        {\r\n            return 0;\r\n        }\r\n        if (speed >= 81)\r\n        {\r\n            return 2;\r\n        }\r\n        else\r\n        {\r\n            return 1;\r\n        }\r\n    }\r\n}"}
{"context": "", "question": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note: str.toLowerCase() returns the lowercase version of a string.", "answer": "public boolean endOther(String a, String b)\r\n{\r\n    String aSame = a.toLowerCase();\r\n    String bSame = b.toLowerCase();\r\n    if (a.length() > b.length())\r\n    {\r\n        if (aSame.substring(a.length() - b.length() + 1, a.length() - 1) == bSame)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    if (a.length() < b.length())\r\n    {\r\n        if (bSame.substring(b.length() - a.length() + 1, b.length() - 1) == aSame)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Consider the series of numbers beginning at start and running up to but not including end, so for example start=1 and end=5 gives the series 1, 2, 3, 4. Return a new String[] array containing the string form of these numbers, except in the case of multiples of 3, use \"Fizz\" instead of the number, and for multiples of 5 use \"Buzz\", and for multiples of both 3 and 5 use \"FizzBuzz\". In Java, String.valueOf(xxx) will make the String form of an int or other type.", "answer": "public String[] fizzBuzz(int start, int end)\r\n{\r\n    String[] answer = new String[end - start];\r\n    for (int i = start; i < end; i++)\r\n    {\r\n        if (answer[i] % 5 == 0)\r\n        {\r\n            answer[i - start] = \"Buzz\";\r\n        }\r\n        else if (answer[i] % 3 == 0)\r\n        {\r\n            answer[i - start] = \"Fizz\";\r\n        }\r\n        else if (answer[i] % 15 == 0)\r\n        {\r\n            answer[i - start] = \"FizzBuzz\";\r\n        }\r\n        else\r\n        {\r\n            answer[i - start] = fizzBuzz[i];\r\n        }\r\n    }\r\n    return answer; \r\n}\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    if (nums.length < 2)\r\n    {\r\n        return 0;\r\n    }\r\n    else\r\n    {\r\n        int counter = 0;\r\n        for (int i = 0; i < nums.length - 1; i++)\r\n        {\r\n            if (nums[i] == nums[i+1])\r\n            {\r\n                int clumpSize = this.sizeClump(nums, nums[i], i);\r\n                i = i + next;\r\n                counter++;\r\n            }\r\n        }\r\n        return counter;\r\n    }\r\n}\r\n\r\npublic int sizeClump(int[] nums, int initValue, int start)\r\n{\r\n    int nextNum = 0;\r\n    while (nums[start] == initValue)\r\n    {\r\n        nextNum++;\r\n    }\r\n    return nextNum;\r\n}"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string str and a non-empty word, return a version of the original string where all chars have been replaced by pluses (+), except for appearances of the word which are preserved unchanged.", "answer": "public String plusOut(String str, String word)\r\n{\r\n    int i=0;\r\n    int j=0;\r\n    String s=null;\r\n    for(i=0; i+1<=str.length();i++)\r\n    {\r\n        for(j=str.length()-1; j>0;j--)\r\n        {\r\n        if (str.substring(i, j).equals(word))\r\n        {\r\n            for(int k = 0; k<i+1; k++)\r\n            {\r\n                s= \"+\"+word;\r\n            }\r\n            for(int k = 0; k<j; k++)\r\n            {\r\n                s=s+\"+\";\r\n            }\r\n        }\r\n        else\r\n            for(int k = 0; k<str.length(); k++)\r\n            {\r\n                s=s+\"+\";\r\n            }\r\n        }\r\n    }\r\n    return s;\r\n}\r\n"}
{"context": "", "question": "Return the centered average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array has a length of 3 or more.", "answer": "public int centeredAverage(int[] nums)\r\n{\r\n    int lowest = nums[0];\r\n    int highest = nums[0];\r\n    int sum = 0;\r\n    int total = nums.length - 2;\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n        if (nums[i] > highest)\r\n        {\r\n            highest = nums[i];\r\n        }\r\n        else if (nums[i] < lowest)\r\n        {\r\n            lowest = nums[i];\r\n        }\r\n        sum += nums[i];\r\n    }\r\n    sum -= highest;\r\n    sum -= lowest;\r\n    return (sum / total);\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\n    int noTicket = 0;\r\n    int smallTicket = 1;\r\n    int bigTicket = 2;\r\n    if (speed <= 60)\r\n    {\r\n       return (noTicket);\r\n    }\r\n    if  (61 <= speed && speed <= 80)\r\n    {\r\n        return (smallTicket);\r\n    }\r\n    if (speed > 81)\r\n    {\r\n        return (bigTicket);\r\n    }\r\n    if (isBirthday)\r\n    {\r\n        return speed -=5;\r\n    }  \r\n}\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n    boolean ans = false; \r\n    int xcount=0;\r\n    int ycount=0;\r\n    for(int i=0;i<str.length();i++)\r\n    {\r\n        if(str.charAt(i)=='x')\r\n        {\r\n            xcount++;\r\n        }\r\n        if(str.charAt(i)=='y')\r\n        {\r\n            ycount++;\r\n        }\r\n    }\r\n    if(xcount==ycount)\r\n    {\r\n        ans =true; \r\n    }\r\n    return ans; \r\n}\r\n"}
{"context": "", "question": "Consider the series of numbers beginning at start and running up to but not including end, so for example start=1 and end=5 gives the series 1, 2, 3, 4. Return a new String[] array containing the string form of these numbers, except in the case of multiples of 3, use \"Fizz\" instead of the number, and for multiples of 5 use \"Buzz\", and for multiples of both 3 and 5 use \"FizzBuzz\". In Java, String.valueOf(xxx) will make the String form of an int or other type.", "answer": "public String[] fizzBuzz(int start, int end)\r\n{\r\n    String[] ans = new String[end-start];\r\n    for (int i = start; i<end; i++)\r\n    {\r\n        if(i%3==0 && i%5==0)\r\n        {\r\n            ans[i-start]=\"FizzBuzz\";\r\n        }\r\n        else if (i%3 == 0)\r\n        {\r\n            ans[i-start]=\"Fizz\";\r\n        }\r\n        else if(i%5==0)\r\n        {\r\n            ans[i-start]=\"Buzz\";\r\n        }\r\n        else\r\n        {\r\n            ans[i-start]=String.valueOf(i);\r\n        }\r\n    }\r\n    return ans;\r\n}"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.", "answer": "public String repeatEnd(String str, int n)\r\n{\r\n    String test=str.substring(str.length()-n);\r\n    for(int i=1;i<n;i++)\r\n            test = test+str.substring(str.length()-n);\r\n    return test;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.", "answer": "public int loneSum(int a, int b, int c)\r\n{\r\n    int x = a + b + c;\r\n    if (a == b)\r\n    {\r\n        if (a == c)\r\n        {\r\n            return 0;\r\n        }\r\n        else\r\n        {\r\n            return c;\r\n        }\r\n    }\r\n    else if (b == c)\r\n    {\r\n        if (a == c)\r\n        {\r\n            return 0;\r\n        }\r\n        else\r\n        {\r\n            return a;\r\n        }\r\n    }\r\n    else if (a == c)\r\n    {\r\n        if (b == c)\r\n        {\r\n            return 0;\r\n        }\r\n        else\r\n        {\r\n            return b;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        return x;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given n >= 0, create an array with the pattern {1, 1, 2, 1, 2, 3, ... 1, 2, 3 .. n} (spaces added to show the grouping). Note that the length of the array will be 1 + 2 + 3 ... + n, which is known to sum to exactly n * (n + 1)/2.", "answer": "public int[] seriesUp(int n)\r\n{\r\n    int[] seriesUp = new int[n * (n + 1) / 2];\r\n    int x = 0;\r\n    for (int i = 1; i <= n; i++){\r\n        for (int j = 1; j <= i; j++){\r\n            seriesUp[x] = j;\r\n            x++;\r\n        }\r\n    }\r\n    return seriesUp;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string str and a non-empty word, return a version of the original string where all chars have been replaced by pluses (+), except for appearances of the word which are preserved unchanged.", "answer": "public String plusOut(String str, String word)\r\n{\r\n    int string = str.length();\r\n    int word = word.length();\r\n    String finish = \"\";\r\n    \r\n    for (int i = 0; i < string; i++)\r\n    {\r\n        if (i <= string - word)\r\n        {\r\n            String temp = str.substring(i, i + word);\r\n            if (temp.equals(word))\r\n            {\r\n                finish += \"+\";\r\n            }\r\n            else finish += \"+\";\r\n        }\r\n        return finish;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    int counter = 0;\r\n\tfor (int i = 0; i < nums.length - 2; i++)\r\n    {\r\n        int a = nums[i];\r\n        int b = nums[i + 1];\r\n        \r\n        if (a == b)\r\n        {\r\n            counter++;\r\n        }\r\n    }\r\n    return counter;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.", "answer": "public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)\r\n{\r\n    boolean answer = true;\r\n    if (isAlseep)\r\n    {\r\n        answer = false;\r\n    }\r\n    else if (isMorning && !isMom)\r\n    {\r\n        answer = false;\r\n    }\r\n    return answer;    \r\n}\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n    int length = str.length();\r\n    Boolean run = false;\r\n    int value = 0;\r\n    for (int i = 0; i < length; i++)\r\n    {\r\n        if (str.charAt(i) == 'x')\r\n        {\r\n            run = true;\r\n            value = str.lastIndexOf(\"x\");\r\n        }\r\n        else\r\n        {\r\n            value = length;\r\n        }\r\n    }\r\n    Boolean answer = false;\r\n    for (int x = value; x < length; x++)\r\n    {\r\n        if (str.charAt(x) == 'y')\r\n        {\r\n           answer = true;\r\n        }\r\n    }\r\n    return answer;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that takes an int array as its parameter and returns the number of even ints it contains. Note: the % \"mod\" operator computes the remainder, e.g. 5 % 2 is 1.", "answer": "public int countEvens(int[] nums)\r\n{\r\n    int number;\r\n    for (int i=0;i<nums.length;i++)\r\n    {\r\n        number +=1;\r\n    }\r\n    return number;\r\n}\r\n"}
{"context": "", "question": "We'll say that a value is \"everywhere\" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.", "answer": "public boolean isEverywhere(int[] nums, int val)\r\n{\r\n    boolean y = true;\r\n   \tfor (int i = 1; i < nums.length - 1; i++) {\r\n        if (nums[i - 1] == val && nums[i + 1] == val) {\r\n            y = y && true;\r\n        }\r\n        else {\r\n            y = false;\r\n        }\r\n    }\r\n    return y;\r\n}\r\n"}
{"context": "", "question": "You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.", "answer": "public int greenTicket(int a, int b, int c)\r\n{\r\n    if (a == b && a == c) {\r\n        return 20;\r\n    }\r\n    else if (a != b && a != c && b != c) {\r\n        return 0;\r\n    }\r\n    else if (a == b || a == c || b == c) {\r\n        return 10;\r\n    }\r\nreturn a;}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    if (str.length() >= 3) {\r\n   \t \tfor (int i = 0; i < str.length() - 3; i++) {\r\n        \tif (str.substring(i, i + 3).equals(\"xyz\")) {\r\n            \tif (i == 0) {\r\n                    return true;\r\n                }\r\n                else if (str.charAt(i - 1) == '.') {\r\n                    return false;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n        \t}\r\n            else {\r\n               return false; \r\n            }\r\n    \t}\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n"}
{"context": "", "question": "For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a, b, and c, return the sum of their rounded values. To avoid code repetition, write a separate helper public int round10(int num) and call it 3 times. Write the helper entirely below and at the same indent level as roundSum().", "answer": "public int roundSum(int a, int b, int c)\r\n{\r\n    return round10(a)+round10(b)+round10(c);\r\n}\r\n\r\npublic int round10(int num)\r\n{\r\n    if (num-num/10 >=5)\r\n    {\r\n        return (num/10-1)*10;\r\n    }\r\n    else\r\n    {\r\n        return (num/10+1)*10;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Return the centered average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array has a length of 3 or more.", "answer": "public int centeredAverage(int[] nums)\r\n{\r\n   \r\n   for(int x = 0; x < nums.length; x++)\r\n   {\r\n       for(int y = x; y > 0; y--)\r\n       {\r\n           if(nums[y] < nums[y-1])\r\n           {\r\n               int start = nums[y-1];\r\n               nums[y-1] = nums[y];\r\n               nums[y] = start; \r\n           }\r\n       }\r\n   }\r\n   \r\n    int sum = 0;\r\n   for(int i = 1; i <= nums.length-2; i++)\r\n   {\r\n       sum += nums[i];\r\n   }\r\n    \r\n    return sum / (nums.length-2);\r\n    \r\n}\r\n"}
{"context": "", "question": "The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.", "answer": "public boolean love6(int a, int b)\r\n{\r\n    if (a == 6 || b == 6)\r\n    {\r\n        return true;\r\n    }\r\n    return ((a + b) = 6);\r\n    return ((a - b) == 6);\r\n}\r\n"}
{"context": "", "question": "Given an int array of any length, return a new array of its first 2 elements. If the array is smaller than length 2, use whatever elements are present.", "answer": "public int[] frontPiece(int[] nums)\r\n{\r\n  \t\r\n    if (nums.length > 2)\r\n    {\r\n        return nums.get(0, 1).toArray();\r\n    }\r\n    return nums;\r\n}\r\n"}
{"context": "", "question": "Return an array that is \"left shifted\" by one--so for an input of {6, 2, 5, 3}, the method returns {2, 5, 3, 6}. You may modify and return the given array, or return a new array.", "answer": "public int[] shiftLeft(int[] nums)\r\n{\r\n    int[] inty = new int[nums.length];\r\n    int p = 0;\r\n    for (int i = 1; i < inty.length; i++)\r\n    {\r\n        inty[p] = nums[i];\r\n        p++;\r\n    }\r\n    inty[inty.length-1] = nums[0];\r\n    return inty;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string str and a non-empty word, return a version of the original string where all chars have been replaced by pluses (+), except for appearances of the word which are preserved unchanged.", "answer": "public String plusOut(String str, String word)\r\n{\r\n    String string;\r\n    int length = word.length();\r\n    for (int i = 0; i < str.length() - length; i++)\r\n    {\r\n        if (str.substring(i, i + length).equals(word))\r\n        {\r\n            string = \"+\";\r\n            return word;\r\n        }\r\n        return string + string;\r\n    }\r\n    return string;\r\n}\r\n"}
{"context": "", "question": "Given an int[] array, write a function that returns an array where all the 10's have been removed. The remaining elements should shift left towards the start of the array as needed, and the empty spaces at the end of the array should be set to 0. So {1, 10, 10, 2} yields {1, 2, 0, 0}. You may modify and return the given array or make a new array.", "answer": "public int[] withoutTen(int[] nums)\r\n{\r\n    int[] no10 = new int[nums.length];\r\n    int count = 0;\r\n    for (int i = 0; i < nums.length ; i++)\r\n    {\r\n        if (nums[i] != 10)\r\n        {\r\n            no10[count] = nums[i];\r\n            count++;   \r\n        }\r\n    }\r\n    while (count < nums.length)\r\n    {\r\n        no10[count] = 0;\r\n        count++;\r\n    }\r\n    return no10;\r\n            \r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.", "answer": "public boolean evenlySpaced(int a, int b, int c)\r\n{\r\n    if (a < b && b < c)\r\n    {\r\n        if (b - a = c - b)\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n}\r\n"}
{"context": "", "question": "Return true if the given string contains a \"bob\" string, but where the middle 'o' character can be any character.", "answer": "public boolean bobThere(String str)\r\n{\r\n    int b = str.indexOf(\"b\");\r\n    String bob = str.substring(b, b + 2);\r\n    String ch = str.charAt(b + 2);\r\n    if (ch.equals(\"b\"))\r\n    {\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Return an array that is \"left shifted\" by one--so for an input of {6, 2, 5, 3}, the method returns {2, 5, 3, 6}. You may modify and return the given array, or return a new array.", "answer": "public int[] shiftLeft(int[] nums)\r\n{\r\n    if (nums.length >= 2)\r\n    {\r\n    for (int i=0;i<nums.length;i++)\r\n    {\r\n        nums[i+1] = nums[i];\r\n        \r\n    }\r\n    }\r\n    return nums;\r\n}\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    int length = nums.length;\r\n    int clumps = 0;\r\n    int counter = 0;\r\n    while (counter < length - 2)\r\n    {\r\n         if (nums[counter + 1] == nums[counter])\r\n         {\r\n             clumps = clumps + 1;\r\n             int adder = sizeClump(nums, counter);\r\n             counter = counter + adder;\r\n         }\r\n        else\r\n        {\r\n            counter = counter + 1;\r\n        }\r\n    }\r\n    return clumps;\r\n}\r\n\r\npublic int sizeClump(int[] nums, int position)\r\n{\r\n    int size = 0;\r\n    int newPosition = position + 1;\r\n    int clumpStart = nums[position];\r\n    while (newPosition < nums.length - 1 && clumpStart == nums[newPosition])\r\n    {\r\n        if (nums[newPosition] == clumpStart)\r\n        {\r\n            size = size + 1;\r\n        }\r\n        newPosition = newPoistion + 1;\r\n    }\r\n    return size;\r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    if (str.length() <= 1)\r\n    {\r\n        return str;\r\n    }\r\n    else\r\n    {\r\n        if (str.substring(0, 2) == str.substring(str.length() - 2, str.length()))\r\n        {\r\n            return \"-1\";\r\n        }\r\n        else\r\n        {\r\n            return str;\r\n        }\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n\tif (str.length()<2)\r\n        return str;\r\n    else if(str.substring( 0, 2) ==\r\n       str.substring((str.length()-2), str.length()))\r\n        return str.substring(2, str.length());\r\n    else\r\n        return str;\r\n}\r\n"}
{"context": "", "question": "You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.", "answer": "private int greenTicket;\r\n\r\npublic int greenTicket(int a, int b, int c)\r\n{\r\n    if (a == b == c)\r\n    {\r\n        greenTicket = 20;\r\n    }\r\n    else if (a == b || b == c || c == a)\r\n    {\r\n        greenTicket = 10;\r\n    }\r\n    else \r\n    {\r\n        greenTicket = 0;\r\n    }\r\n    return result;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.", "answer": "public int countCode(String str)\r\n{\r\n    int yum = 0;\r\n    int yes = str.length();\r\n    int no = (str.substring(i, i + 2));\r\n\r\nfor (int i=0; i < yes - 3; i++)\r\n{\r\nif (no.equals(\"co\") && str.charAt(i + 3) == 'e')\r\n\r\n    yum++;\r\n} \r\nreturn yum;\r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if every 2 that appears in the array is next to another 2. Otherwise, return false.", "answer": "public boolean twoTwo(int[] nums)\r\n{\r\n    boolean bool = false;\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n     if (nums[i] == 2 && (nums[i - 1] == 2 || nums[i + 1] == 2))\r\n     {\r\n      \tbool = true;\r\n         return bool;\r\n     }\r\n        else\r\n        {\r\n         bool = false;   \r\n        }\r\n    }\r\n    return bool;\r\n}\r\n"}
{"context": "", "question": "We'll say that a value is \"everywhere\" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.", "answer": "public boolean isEverywhere(int[] nums, int val)\r\n{\r\n    for (int i = 0; i < num.length; i++)\r\n    {\r\n        if (nums[i] != val && nums[i + 1] != val)\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    String bread1 = str.indexOf(\"bread\");\r\n    \r\n}\r\n"}
{"context": "", "question": "The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.", "answer": "public boolean love6(int a, int b)\r\n{\r\n    if ( a == 6 || b == 6 )\r\n    {\r\n        return true;\r\n    }\r\n    if ( Math.abs(a + b) == 6 || Math.abs(a - b) == 6) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string, return a string made of its first 2 chars. If the string length is less than 2, use '@' for the missing chars.", "answer": "public String atFirst(String str)\r\n{\r\n    String newstr = null;\r\n    if (str.length()<2)\r\n    {\r\n\t\tnewstr = Character.toString(str.charAt(0));\r\n    }\r\n    else\r\n    {\r\n        newstr = Character.toString(str.chatAt(0));\r\n    }\r\n        return newstr;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.", "answer": "public boolean answerCell;\r\n\r\npublic boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)\r\n{\r\n    if (isAsleep = true)\r\n    {\r\n        answerCell = false;\r\n    }\r\n    else if (isMorning = true)\r\n    {\r\n        if (isMom = true)\r\n        {\r\n            answerCell = true;\r\n        }\r\n        else if (isMom = false)\r\n        {\r\n            answerCell = false;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        answerCell = true;\r\n    }    \r\n    return answerCell;   \r\n}\r\n"}
{"context": "", "question": "Given an array, return an array that contains exactly the same numbers as the original array, but rearranged so that every 4 is immediately followed by a 5. Do not move the 4's, but every other number may move. The array contains the same number of 4's and 5's, and every 4 has a number after it that is not a 4. In this version, 5's may appear anywhere in the original array. (This is a slightly harder version of the fix34 problem.)", "answer": "public int[] fix45(int[] nums)\r\n{\r\n   int q = nums.length;\r\n    int i = 0;\r\n    int yes = 0;\r\n        \r\n    while(yes < q && nums[yes] != 5)\r\n        j++;\r\n                  \r\n    while(i < q) {\r\n        if(nums[i] == 4) {\r\n            int temp = nums[i+1];\r\n            nums[i+1] = nums[yes];\r\n            nums[yes] = temp;\r\n                                                \r\n            while((yes < q && nums[j] != 5) || yes == i + 1)\r\n                yes++;\r\n        }\r\n        i++;\r\n    }\r\n                                                                          \r\n    return nums;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.", "answer": "public int countCode(String str)\r\n{\r\n    for (int i = 0; i < str.length() - 3; i++) \r\n    {\r\n    if (str.charAt(i) == 'co' && str.charAt(i + 3) == 'e')\r\n    {\r\n        return true;\r\n    }\r\n    }\r\n    return false;\r\n}\r\n"}
{"context": "", "question": "Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. \"decomposition\").", "answer": "public int noTeenSum(int a, int b, int c)\r\n{\r\nfixTeen(a) + fixTeen(b) + fixTeen(c);\r\n}\r\n\r\npublic int fixTeen(int n)\r\n{\r\n    if (n > 12 && n < 15 && n > 16 && n <19) {\r\n        n = 0;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\n    if (isBirthday == true)\r\n    {\r\n     \tspeed = speed + 5;\r\n    }\r\n    if (speed <= 60)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (speed >= 61 && speed <=80)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        return 2;\r\n    }\r\n}\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n    return(str.lastIndexOf(\"x\")>str.indexOf(\"y\"));\r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.", "answer": "public int loneSum(int a, int b, int c)\r\n{\r\n    int x;\r\n    if (a == b && a == c)\r\n    {\r\n        x = a;\r\n    }\r\n    else if (a == b || a == c)\r\n    {\r\n        x = b + c;\r\n    }\r\n    else if (b == a || b == c)\r\n    {\r\n        x = a + c;\r\n    }\r\n    else\r\n    {\r\n        x = a + b + c;\r\n    }\r\n    return x;\r\n}\r\n"}
{"context": "", "question": "Write two methods in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if any of the values is a teen--in the range 13..19 inclusive--then that value counts as 0, except 15 and 16 do not count as teens. Write a separate helper method called fixTeen() that takes in an int value and returns that value fixed for the teen rule. In this way you avoid repeating the teen code 3 times (i.e. \"decomposition\").", "answer": "public int noTeenSum(int a, int b, int c)\r\n{\r\n\tif(a == 13 || a > 13 || a == 19 || a < 19)\r\n    {\r\n\t\treturn b + c; \r\n    }\r\n \r\n \treturn (a+b+c);\r\n}\r\npublic int fixTeen(int n)\r\n{\r\n    return n; \r\n}\r\n"}
{"context": "", "question": "Given a string, if the same 2-character substring appears at both its beginning and end, return the contents of the string without the 2-character substring at the beginning. For example, \"HelloHe\" yields \"lloHe\". Note that the 2-character substring at the beginning may overlap with the one at the end, so \"Hi\" yields \"\". If the two characters at the start and end of the string do not match each other, return the original string unchanged.", "answer": "public String without2(String str) \r\n{\r\n    if ((str.charAt(0) == str.charAt(str.length() - 2)) && (str.charAt(1) == str.charAt(str.length() - 1)))\r\n    {\r\n        String a = str.subString(2);\r\n        return a;\r\n    }\r\n    else\r\n    {\r\n        return str;\r\n    }\r\n}\r\n"}
{"context": "", "question": "You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.", "answer": "public int greenTicket(int a, int b, int c)\r\n{\r\n    if(a == b)\r\n\t{\r\n\t\tif(b == c)\r\n\t\t\treturn 20;\r\n\t\treturn 10;\r\n\t}\r\n\tif(a == c || b == c)\r\n\t\treturn 10;\r\n\treturn 0;\r\n}\r\n"}
{"context": "", "question": "You and your date are trying to get a table at a restaurant. The parameter you is the stylishness of your clothes, in the range 0..10, and date is the stylishness of your date's clothes. Write a method that returns your chances of getting a table, encoded as an int value with 0 = no, 1 = maybe, 2 = yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).", "answer": "public int dateFashion(int you, int date)\r\n{\r\n    dateFashion value = 2;\r\n    \r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    int first = -1;\r\n    int last = -1;\r\n      \r\n    for(int i = 0; i < str.length() - 5; i++) {\r\n        if(str.substring(i, i + 5).equals(\"bread\")) {\r\n            first = i;\r\n            break;\r\n        }\r\n    }\r\n                                \r\n    for(int i = str.length() - 5; i >= 0; i--) {\r\n        if(str.substring(i, i + 5).equals(\"bread\")) {\r\n            last = i;\r\n            break;\r\n        }\r\n    }\r\n                                                          \r\n    if(first != -1 && last != -1 && first != last)\r\n        return str.substring(first + 5, last);\r\n                                                                    \r\n    return \"\";\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.", "answer": "public boolean evenlySpaced(int a, int b, int c)\r\n{\r\n    boolean spaced = false;\r\n    int aMinusB = a - b;\r\n    int aMinusC = a - c;\r\n    int bMinusC = b - c;\r\n    if (Math.abs(aMinusB) == Math.abs(aMinusC) && \r\n        Math.abs(aMinusB) == Math.abs(bMinusC))\r\n    {\r\n        spaced = true;\r\n    }\r\n    return spaced;\r\n}\r\n"}
{"context": "", "question": "Given an array of ints, return true if every 2 that appears in the array is next to another 2. Otherwise, return false.", "answer": "public boolean twoTwo(int[] nums)\r\n{\r\n    int size = nums.length;\r\n    for(int i = 1; i < size ; i++)\r\n    {\r\n    \tif (nums[i - 1] == 2)\r\n        {\r\n            if (nums[i]==2)\r\n            {\r\n            }\r\n            else \r\n            {\r\n                return false;\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given three ints, a, b, and c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.", "answer": "public boolean evenlySpaced(int a, int b, int c)\r\n{\r\n    if (c>=b && b>=a && c-b == b-a)\r\n        return true;\r\n    else if (c>=b && a>=b && c-b == a-b)\r\n        return true;\r\n    else if (b>=c && c>=a && b-c == c-a)\r\n        return true;\r\n    else if (b>=c && a>=c && b-c == a-c)\r\n        return true;\r\n    else if (a>=b && b>=c && b-c == a-b)\r\n        return true;\r\n    else if (a>=b && c>=b && c-b == a-b)\r\n        return true;\r\n    else if (b>=a && c>=a && b-a == c-a)\r\n        return true;\r\n    else if (b>=a && a>=c && b-a == a-c)\r\n        return true;\r\n    else if (a>=c && b>=c && a-c == b-c)\r\n        return true;\r\n    else if (a>=c && c>=b && a-c == c-b)\r\n        return true;\r\n    else if (c>=a && b>=a && c-a == b-a)\r\n        return true;\r\n    else if (c>=a && a>=b && c-a == a-b)\r\n        return true;\r\n    else\r\n        return false;\r\n}\r\n"}
{"context": "", "question": "When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.", "answer": "public boolean cigarParty(int cigars, boolean isWeekend)\r\n{\r\n    if (isWeekend)\r\n    {\r\n        return true;\r\n    }\r\n    else if (!isWeekend)\r\n    {\r\n        if (cigars >= 40 || cigars <= 60)\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.", "answer": "public int countCode(String str)\r\n{\r\n    int sum = 0;\r\n    int l = str.length() - 3;\r\n    for(int i = 0; i < l; i++)\r\n    {\r\n        if(str.charAt(i) == 'c' && str.charAt(i+1) == 'o' && \t\tstr.charAt(i+3) == 'e')\r\n        {\r\n            sum = sum + 1;\r\n            i += 4;\r\n        }\r\n        else\r\n            i++;\r\n    }\r\n    return sum;\r\n    \r\n}\r\n"}
{"context": "", "question": "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.", "answer": "int count = 0;\r\npublic int countCode(String str)\r\n{\r\n    if (str.length() >= 4)\r\n    {\r\n    \tfor (int i = 0; i < str.length() - 3; i++)\r\n    \t{\r\n     \t\tif (str.substring(i, i + 3).equals(\"co\") &&\r\n               str.charAt(i + 3) == 'e')\r\n            {\r\n                count = count + 1;\r\n            }\r\n                \r\n    \t}\r\n    }\r\n       \r\n    return count;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that counts the number of times the string \"code\" appears anywhere in the given string str, except that we'll accept any letter in place of the 'd', so for example, \"cope\" and \"cooe\" count.", "answer": "public int countCode(String str)\r\n{\r\n    int counts = 0;\r\n    for (int i = 0; i < str.length() - 3; i++)\r\n    {\r\n        if (str.charAt(i) == 'c' && \r\n            str.charAt(i + 1) == 'o' &&\r\n           str.charAt(i + 2) == 'e')\r\n        {\r\n            return counts;\r\n        }\r\n    }\r\n    return counts;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    String yes = \"xyz\";\r\n    String no = \".xyz\";\r\n    \r\n    if (str.indexOf(\".xyz\") > 0)\r\n    {\r\n        return false;\r\n    }\r\n    else \r\n    {\r\n        return true;\r\n    }\r\n}\r\n"}
{"context": "", "question": "Given an int[] array, write a function that returns an array where all the 10's have been removed. The remaining elements should shift left towards the start of the array as needed, and the empty spaces at the end of the array should be set to 0. So {1, 10, 10, 2} yields {1, 2, 0, 0}. You may modify and return the given array or make a new array.", "answer": "public int[] withoutTen(int[] nums)\r\n{\r\n    int[] newArray = new int[nums.length];\r\n    for (int i = 0; i < nums.length; i++)\r\n    {\r\n     \tif (nums[i] != 10)\r\n        {\r\n         \tnums[i] = nums[i + 1];\r\n        }\r\n    }\r\n    return newArray;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, or 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday--on that day, your speed can be 5 higher in all cases.", "answer": "public int caughtSpeeding(int speed, boolean isBirthday)\r\n{\r\n    \r\n    \r\n    if(speed<=60)\r\n    {\r\n        return 0;\r\n    }\r\n    \r\n    if(speed >= 60 && speed <= 80)\r\n    {\r\n        return 1;\r\n    }\r\n    \r\n    if(speed >= 81)\r\n    {\r\n        return 2;\r\n    }\r\n    \r\n    if(isBirthday = true)\r\n    {\r\n        if(speed <=65)\r\n        {\r\n            return 0;\r\n        }\r\n        \r\n        if(speed >= 66 && speed<=85)\r\n        {\r\n            return 1;\r\n        }\r\n        \r\n        if(speed >= 86)\r\n        {\r\n            return 2;\r\n        }\r\n    }\r\n               \r\n    \r\n        \r\n        \r\n    \r\n}\r\n"}
{"context": "", "question": "Given an array containing three ints, return the sum of all the elements.", "answer": "public int sum3(int[] nums)\r\n{\r\n    int sum = 0;\r\n    for (int integer : nums)\r\n    {\r\n        sum += integer;\r\n    }\r\n    return sum;\r\n}\r\n"}
{"context": "", "question": "Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.", "answer": "public boolean canBalance(int[] nums)\r\n{\r\n    int count = 0;\r\n    for(int i =0; i < nums.length-1; i++)\r\n    {\r\n        int sumLeft = 0;\r\n        int sumRight = 0;\r\n        for(int x = 0; x < i; x++)\r\n        {\r\n            sumLeft += nums[x];\r\n        }\r\n        for(int y = nums.length -1; y > i; y--)\r\n        {\r\n            sumRight += nums[y];\r\n        }\r\n        \r\n        if(sumLeft == sumRight)\r\n        {\r\n            count++;\r\n        }\r\n    }\r\n    if(count > 0)\r\n    {\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n}\r\n"}
{"context": "", "question": "We'll say that a string is xy-balanced if for all the 'x' characterss in the string, there exists a 'y' character somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "answer": "public boolean xyBalance(String str)\r\n{\r\n    for (int i = str.length() - 1; i >= 0; i--)\r\n    {\r\n        if (str.charAt(i) == 'y')\r\n        {\r\n            return true;\r\n        }\r\n        else if (str.charAt(i) == 'x')\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that returns true if the given string str contains an occurrence of the substring \"xyz\" where \"xyz\" is not directly preceded by a period (\".\"). For example, \"xxyz\" counts, while \"x.xyz\" does not.", "answer": "public boolean xyzThere(String str)\r\n{\r\n    String str3 = \"xyz\";\r\n    for(int i = 0; i < str.length(); i+=3) {\r\n        if(str.substring(i, i+3).equals(str3) && !str.charAt(i-1).equals('.')) {\r\n        \treturn true;\r\n        }\r\n        else {\r\n        \treturn false;\r\n        }\r\n    }\r\n}\r\n"}
{"context": "", "question": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "answer": "public int countClumps(int[] nums)\r\n{\r\n    int clumps = 0;\r\n    boolean clump = false; \r\n    for (int i = 0; i < nums.length -1; i++)\r\n    {\r\n        if (nums[i] == nums[i + 1])\r\n            {\r\n                clump = true; \r\n                clumps++;\r\n            }\r\n    }\r\n    return clumps;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string, return a string made of its first 2 chars. If the string length is less than 2, use '@' for the missing chars.", "answer": "public String atFirst(String str)\r\n{\r\n    if (str.length() > 2)\r\n        return str.substring(0, 2);\r\n\telse\r\n        return str;\r\n}\r\n"}
{"context": "", "question": "A sandwich is two pieces of bread with something in between. Write a Java method that takes in a string str and returns the string that is between the first and last appearance of \"bread\" in str. Return the empty string \"\" if there are not two pieces of bread.", "answer": "public String getSandwich(String str)\r\n{\r\n    if (str.length()<10) {\r\n        return \"\";\r\n    }\r\n    else\r\n    {\r\n        for (int i=0;i<str.length()-10;i++)\r\n        {\r\n            if (str.substring(i,i+5).equals(\"bread\"))\r\n            {\r\n                for (int j=i+5;i<str.length()-5;j++)\r\n                {\r\n                    if (str.substring(j,j+5).equals(\"bread\"))\r\n                    {\r\n                        return str.substring(i+5,j);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return \"\";\r\n}\r\n"}
{"context": "", "question": "Given an int[] array, write a function that returns an array where all the 10's have been removed. The remaining elements should shift left towards the start of the array as needed, and the empty spaces at the end of the array should be set to 0. So {1, 10, 10, 2} yields {1, 2, 0, 0}. You may modify and return the given array or make a new array.", "answer": "public int[] withoutTen(int[] nums)\r\n{\r\n    int length = nums.length;\r\n\tfor (int i = 0; i < nums.length; i++)\r\n    {\r\n        if (nums[i] == 10)\r\n        {\r\n            length --;\r\n        }\r\n    }\r\n    int[] ints = new int[nums.length];\r\n    int k = 0;\r\n    for (int i = 0; i < ints.length; i++)\r\n    {\r\n        if (nums[k] != 10)\r\n        {\r\n            nums[k] = nums[i];\r\n            k++;\r\n        }\r\n        \r\n    }\r\n}\r\n"}
{"context": "", "question": "Given an array containing three ints, return the sum of all the elements.", "answer": "public int sum3(int[] nums)\r\n{\r\n    int total =0;\r\n    \r\n    for(int i = 0; i<sum3.length; i++)\r\n    {\r\n        total += sum3[i];\r\n    }\r\n    \r\n    return total;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 3 int values, a, b, and c, return their sum. However, if one of the values is 13 then it does not count towards the sum and values to its right do not count. So for example, if b is 13, then both b and c do not count.", "answer": "public int luckySum(int a, int b, int c)\r\n{\r\n    if(a==13)\r\n    {\r\n    \treturn 0;\r\n    }\r\n    else if(b == 13)\r\n    {\r\n    \treturn a;\r\n    }\r\n    else if(c == 13)\r\n    {\r\n    \treturn (b+a);\r\n    }\r\n    return (a + b + c);\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.", "answer": "public String repeatEnd(String str, int n) {\r\n  int len = str.length();\r\n  String newWord = \"\";\r\n  \r\n  for (int i = 0; i < n; i++) {\r\n    newWord += str.substring(len - n, len);\r\n  }\r\n  return newWord;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.", "answer": "public int sortaSum(int a, int b)\r\n{\r\n    int sum = a + b;\r\n    if (sum > 10)\r\n        if (sum <19)\r\n            return 20;\r\n    else\r\n        return num;\r\n}\r\n"}
{"context": "", "question": "Given an int[] array, write a function that returns an array where all the 10's have been removed. The remaining elements should shift left towards the start of the array as needed, and the empty spaces at the end of the array should be set to 0. So {1, 10, 10, 2} yields {1, 2, 0, 0}. You may modify and return the given array or make a new array.", "answer": "public int[] withoutTen(int[] nums) {\r\n    int[] copy = new int[nums.length];\r\n    int index = 0;\r\n \r\n    for (int i = 0; i < nums.length; i++)\r\n        if (nums[i] != 10) {\r\n            copy[index] = nums[i];\r\n            index++;\r\n        }\r\n    return copy;\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a number n, return true if n is in the range 1..10, inclusive. Unless \"outsideMode\" is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.", "answer": "public boolean in1To10(int n, boolean outsideMode)\r\n{\r\n    if (outsideMode)\r\n    {\r\n        if (n <= 1 || n >= 10)\r\n            return true;\r\n    }\r\n    return (n >= 1 && n <= 10);\r\n}\r\n"}
{"context": "", "question": "Write a function in Java that implements the following logic: Given a string, return a string made of its first 2 chars. If the string length is less than 2, use '@' for the missing chars.", "answer": "public String atFirst(String str)\r\n{\r\n    if (str.length() < 2)\r\n    {\r\n        while (str.length() < 2)\r\n        {\r\n\t\t\tstr += '@';\r\n        }\r\n    }\r\n    else\r\n    {\r\n        str = str.substring(0, 2);\r\n    }\r\n    \r\n    return str;\r\n}\r\n"}
